// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/player/ClientConnection.schema
#ifndef SPATIALOS_SCHEMA_improbable_player_ClientConnection_schema_14814115204064113157_INCLUDED
#define SPATIALOS_SCHEMA_improbable_player_ClientConnection_schema_14814115204064113157_INCLUDED
#include <improbable/collections.h>
#include <improbable/math/coordinates.h>
#include <improbable/math/vector3d.h>
#include <improbable/math/vector3f.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

// Schema forward declarations.
//----------------------------------------------------------------

namespace schema {
namespace improbable {
namespace player {

class ClientDisconnectRequest;
class ClientDisconnectResponse;
class HeartbeatRequest;
class HeartbeatResponse;
class ClientConnectionData;

}  // ::improbable
}  // ::player
}  // ::schema

namespace improbable {
namespace player {

// Forward declarations.
//----------------------------------------------------------------

class ClientConnectionData;
class ClientDisconnectRequest;
class ClientDisconnectResponse;
class HeartbeatRequest;
class HeartbeatResponse;

namespace detail {
const ::worker::detail::ClientComponentVtable& Vtable_ClientConnection();
struct GenericCommandObject_ClientConnection {
  std::uint32_t CommandId;
  ::worker::Variant<
      ::improbable::player::ClientDisconnectRequest,
      ::improbable::player::ClientDisconnectResponse,
      ::improbable::player::HeartbeatRequest,
      ::improbable::player::HeartbeatResponse> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class ClientConnectionData {
public:
  // Main constructor.
  ClientConnectionData(std::uint32_t timeout_beats_remaining);

  // Copyable and moveable.
  ClientConnectionData(ClientConnectionData&&) = default;
  ClientConnectionData(const ClientConnectionData&) = default;
  ClientConnectionData& operator=(ClientConnectionData&&) = default;
  ClientConnectionData& operator=(const ClientConnectionData&) = default;
  ~ClientConnectionData() = default;

  bool operator==(const ClientConnectionData&) const;
  bool operator!=(const ClientConnectionData&) const;

  // Field timeout_beats_remaining = 1.
  std::uint32_t timeout_beats_remaining() const;
  std::uint32_t& timeout_beats_remaining();
  ClientConnectionData& set_timeout_beats_remaining(std::uint32_t);

private:
  std::uint32_t _timeout_beats_remaining;
};

class ClientDisconnectRequest {
public:
  // Main constructor.
  ClientDisconnectRequest();

  // Copyable and moveable.
  ClientDisconnectRequest(ClientDisconnectRequest&&) = default;
  ClientDisconnectRequest(const ClientDisconnectRequest&) = default;
  ClientDisconnectRequest& operator=(ClientDisconnectRequest&&) = default;
  ClientDisconnectRequest& operator=(const ClientDisconnectRequest&) = default;
  ~ClientDisconnectRequest() = default;

  bool operator==(const ClientDisconnectRequest&) const;
  bool operator!=(const ClientDisconnectRequest&) const;
};

class ClientDisconnectResponse {
public:
  // Main constructor.
  ClientDisconnectResponse();

  // Copyable and moveable.
  ClientDisconnectResponse(ClientDisconnectResponse&&) = default;
  ClientDisconnectResponse(const ClientDisconnectResponse&) = default;
  ClientDisconnectResponse& operator=(ClientDisconnectResponse&&) = default;
  ClientDisconnectResponse& operator=(const ClientDisconnectResponse&) = default;
  ~ClientDisconnectResponse() = default;

  bool operator==(const ClientDisconnectResponse&) const;
  bool operator!=(const ClientDisconnectResponse&) const;
};

class HeartbeatRequest {
public:
  // Main constructor.
  HeartbeatRequest();

  // Copyable and moveable.
  HeartbeatRequest(HeartbeatRequest&&) = default;
  HeartbeatRequest(const HeartbeatRequest&) = default;
  HeartbeatRequest& operator=(HeartbeatRequest&&) = default;
  HeartbeatRequest& operator=(const HeartbeatRequest&) = default;
  ~HeartbeatRequest() = default;

  bool operator==(const HeartbeatRequest&) const;
  bool operator!=(const HeartbeatRequest&) const;
};

class HeartbeatResponse {
public:
  // Main constructor.
  HeartbeatResponse();

  // Copyable and moveable.
  HeartbeatResponse(HeartbeatResponse&&) = default;
  HeartbeatResponse(const HeartbeatResponse&) = default;
  HeartbeatResponse& operator=(HeartbeatResponse&&) = default;
  HeartbeatResponse& operator=(const HeartbeatResponse&) = default;
  ~HeartbeatResponse() = default;

  bool operator==(const HeartbeatResponse&) const;
  bool operator!=(const HeartbeatResponse&) const;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::player::ClientConnection;
 *
 *   ClientConnection::Update update;
 *   connection.SendComponentUpdate< ClientConnection >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< ClientConnection >(
 *       [&](const worker::ComponentUpdateOp< ClientConnection >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         ClientConnection::Update update = op.GetUpdate();
 *       });
 *
 *   ClientConnection::Data data = entity.Get< ClientConnection >();
 */
struct ClientConnection : ::worker::detail::ComponentMetaclassBase<
    ClientConnection, detail::Vtable_ClientConnection> {
  static constexpr const ::worker::ComponentId ComponentId = 1003;
  using Data = ::improbable::player::ClientConnectionData;
  using GenericCommandObject = detail::GenericCommandObject_ClientConnection;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::player::ClientConnectionData object. */
    static Update FromInitialData(const ::improbable::player::ClientConnectionData& data);

    /**
     * Converts to a ::improbable::player::ClientConnectionData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::player::ClientConnectionData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::player::ClientConnectionData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::player::ClientConnectionData&) const;

    // Field timeout_beats_remaining = 1.
    const ::worker::Option< std::uint32_t >& timeout_beats_remaining() const;
    ::worker::Option< std::uint32_t >& timeout_beats_remaining();
    Update& set_timeout_beats_remaining(std::uint32_t);

  private:
    ::worker::Option< std::uint32_t > _timeout_beats_remaining;
  };

  /**
   * Command metaclasses for the ClientConnection component.
   * Each metaclass can be supplied as the template parameter to all command-related templated
   * types and methods in the C++ worker API.
  */
  class Commands {
  public:
    class Heartbeat {
    public:
      static constexpr const std::uint32_t CommandId = 1;
      using ComponentMetaclass = ClientConnection;
      using Request = ::improbable::player::HeartbeatRequest;
      using Response = ::improbable::player::HeartbeatResponse;
    };
    class DisconnectClient {
    public:
      static constexpr const std::uint32_t CommandId = 2;
      using ComponentMetaclass = ClientConnection;
      using Request = ::improbable::player::ClientDisconnectRequest;
      using Response = ::improbable::player::ClientDisconnectResponse;
    };
  };
};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Serialize_ClientConnectionData(
    const ::improbable::player::ClientConnectionData&,
    ::schema::improbable::player::ClientConnectionData&);

::improbable::player::ClientConnectionData Deserialize_ClientConnectionData(
    const ::schema::improbable::player::ClientConnectionData&);

void Serialize_ClientDisconnectRequest(
    const ::improbable::player::ClientDisconnectRequest&,
    ::schema::improbable::player::ClientDisconnectRequest&);

::improbable::player::ClientDisconnectRequest Deserialize_ClientDisconnectRequest(
    const ::schema::improbable::player::ClientDisconnectRequest&);

void Serialize_ClientDisconnectResponse(
    const ::improbable::player::ClientDisconnectResponse&,
    ::schema::improbable::player::ClientDisconnectResponse&);

::improbable::player::ClientDisconnectResponse Deserialize_ClientDisconnectResponse(
    const ::schema::improbable::player::ClientDisconnectResponse&);

void Serialize_HeartbeatRequest(
    const ::improbable::player::HeartbeatRequest&,
    ::schema::improbable::player::HeartbeatRequest&);

::improbable::player::HeartbeatRequest Deserialize_HeartbeatRequest(
    const ::schema::improbable::player::HeartbeatRequest&);

void Serialize_HeartbeatResponse(
    const ::improbable::player::HeartbeatResponse&,
    ::schema::improbable::player::HeartbeatResponse&);

::improbable::player::HeartbeatResponse Deserialize_HeartbeatResponse(
    const ::schema::improbable::player::HeartbeatResponse&);

}  // ::detail
}  // ::player
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_player_ClientConnection_schema_14814115204064113157_INCLUDED
