// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/player/ClientConnection.schema
#include <improbable/player/ClientConnection.h>
#include <improbable/entity_state.pb.h>
#include <improbable/player/ClientConnection.pb.h>

namespace improbable {
namespace player {

// Implementation of ClientConnectionData.
//----------------------------------------------------------------

ClientConnectionData::ClientConnectionData(std::uint32_t timeout_beats_remaining)
: _timeout_beats_remaining{timeout_beats_remaining} {}

bool ClientConnectionData::operator==(const ClientConnectionData& value) const {
  return
      _timeout_beats_remaining == value._timeout_beats_remaining;
}

bool ClientConnectionData::operator!=(const ClientConnectionData& value) const {
  return !operator==(value);
}

std::uint32_t ClientConnectionData::timeout_beats_remaining() const {
  return _timeout_beats_remaining;
}

std::uint32_t& ClientConnectionData::timeout_beats_remaining() {
  return _timeout_beats_remaining;
}

ClientConnectionData& ClientConnectionData::set_timeout_beats_remaining(std::uint32_t value) {
  _timeout_beats_remaining = value;
  return *this;
}

// Implementation of ClientDisconnectRequest.
//----------------------------------------------------------------

ClientDisconnectRequest::ClientDisconnectRequest() {}

bool ClientDisconnectRequest::operator==(const ClientDisconnectRequest&) const {
  return true;
}

bool ClientDisconnectRequest::operator!=(const ClientDisconnectRequest& value) const {
  return !operator==(value);
}

// Implementation of ClientDisconnectResponse.
//----------------------------------------------------------------

ClientDisconnectResponse::ClientDisconnectResponse() {}

bool ClientDisconnectResponse::operator==(const ClientDisconnectResponse&) const {
  return true;
}

bool ClientDisconnectResponse::operator!=(const ClientDisconnectResponse& value) const {
  return !operator==(value);
}

// Implementation of HeartbeatRequest.
//----------------------------------------------------------------

HeartbeatRequest::HeartbeatRequest() {}

bool HeartbeatRequest::operator==(const HeartbeatRequest&) const {
  return true;
}

bool HeartbeatRequest::operator!=(const HeartbeatRequest& value) const {
  return !operator==(value);
}

// Implementation of HeartbeatResponse.
//----------------------------------------------------------------

HeartbeatResponse::HeartbeatResponse() {}

bool HeartbeatResponse::operator==(const HeartbeatResponse&) const {
  return true;
}

bool HeartbeatResponse::operator!=(const HeartbeatResponse& value) const {
  return !operator==(value);
}

// Implementation of ClientConnection.
//----------------------------------------------------------------

constexpr const ::worker::ComponentId ClientConnection::ComponentId;

constexpr const std::uint32_t ClientConnection::Commands::Heartbeat::CommandId;

constexpr const std::uint32_t ClientConnection::Commands::DisconnectClient::CommandId;

bool ClientConnection::Update::operator==(const ClientConnection::Update& value) const {
  return
      _timeout_beats_remaining == value._timeout_beats_remaining;
}

bool ClientConnection::Update::operator!=(const ClientConnection::Update& value) const {
  return !operator==(value);
}

ClientConnection::Update ClientConnection::Update::FromInitialData(const ::improbable::player::ClientConnectionData& data) {
  ClientConnection::Update update;
  update._timeout_beats_remaining.emplace(data.timeout_beats_remaining());
  return update;
}

::improbable::player::ClientConnectionData ClientConnection::Update::ToInitialData() const {
  return ::improbable::player::ClientConnectionData(*_timeout_beats_remaining);
}

void ClientConnection::Update::ApplyTo(::improbable::player::ClientConnectionData& data) const {
  if (_timeout_beats_remaining) {
    data.set_timeout_beats_remaining(*_timeout_beats_remaining);
  }
}

const ::worker::Option< std::uint32_t >& ClientConnection::Update::timeout_beats_remaining() const {
  return _timeout_beats_remaining;
}

::worker::Option< std::uint32_t >& ClientConnection::Update::timeout_beats_remaining() {
  return _timeout_beats_remaining;
}

ClientConnection::Update& ClientConnection::Update::set_timeout_beats_remaining(std::uint32_t value) {
  _timeout_beats_remaining.emplace(value); return *this;
}

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Serialize_ClientConnectionData(
    const ::improbable::player::ClientConnectionData& data,
    ::schema::improbable::player::ClientConnectionData& proto) {
  proto.set_field1_timeout_beats_remaining(data.timeout_beats_remaining());
}

::improbable::player::ClientConnectionData Deserialize_ClientConnectionData(
    const ::schema::improbable::player::ClientConnectionData& proto) {
  ::improbable::player::ClientConnectionData result{
      proto.field1_timeout_beats_remaining()};
  return result;
}

void Serialize_ClientDisconnectRequest(
    const ::improbable::player::ClientDisconnectRequest&,
    ::schema::improbable::player::ClientDisconnectRequest&) {}

::improbable::player::ClientDisconnectRequest Deserialize_ClientDisconnectRequest(
    const ::schema::improbable::player::ClientDisconnectRequest&) {
  return {};
}

void Serialize_ClientDisconnectResponse(
    const ::improbable::player::ClientDisconnectResponse&,
    ::schema::improbable::player::ClientDisconnectResponse&) {}

::improbable::player::ClientDisconnectResponse Deserialize_ClientDisconnectResponse(
    const ::schema::improbable::player::ClientDisconnectResponse&) {
  return {};
}

void Serialize_HeartbeatRequest(
    const ::improbable::player::HeartbeatRequest&,
    ::schema::improbable::player::HeartbeatRequest&) {}

::improbable::player::HeartbeatRequest Deserialize_HeartbeatRequest(
    const ::schema::improbable::player::HeartbeatRequest&) {
  return {};
}

void Serialize_HeartbeatResponse(
    const ::improbable::player::HeartbeatResponse&,
    ::schema::improbable::player::HeartbeatResponse&) {}

::improbable::player::HeartbeatResponse Deserialize_HeartbeatResponse(
    const ::schema::improbable::player::HeartbeatResponse&) {
  return {};
}

namespace {

void VtableBufferFree_ClientConnection(::worker::ComponentId, std::uint8_t* buffer) {
  delete[] buffer;
}

void VtableFree_ClientConnection(
    ::worker::ComponentId, std::uint8_t object_type,
    ::worker::detail::ClientObject* object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    delete static_cast< ::improbable::player::ClientConnection::Update* >(object);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    delete static_cast< ::improbable::player::ClientConnectionData* >(object);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request ||
             object_type == ::worker::detail::ClientComponentVtable::Response) {
    delete static_cast< GenericCommandObject_ClientConnection* >(object);
  }
}

::worker::detail::ClientObject* VtableCopy_ClientConnection(
    ::worker::ComponentId, std::uint8_t, ::worker::detail::ClientObject* object) {
  return object;
}

std::uint8_t VtableDeserialize_ClientConnection(
    ::worker::ComponentId, std::uint8_t object_type, const std::uint8_t* buffer,
    std::uint32_t length, ::worker::detail::ClientObject** object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    *object = new ::improbable::player::ClientConnection::Update;
    auto client_object = static_cast< ::improbable::player::ClientConnection::Update* >(*object);
    {
      const auto& proto = proto_wrapper.entity_state().GetExtension(::schema::improbable::player::ClientConnection::component_extension);

      std::set<std::uint32_t> fields_to_clear{proto_wrapper.fields_to_clear().begin(),
                                              proto_wrapper.fields_to_clear().end()};
      if (proto.has_field1_timeout_beats_remaining()) {
        client_object->timeout_beats_remaining().emplace(proto.field1_timeout_beats_remaining());
      }
    }
    {
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    const auto& proto = proto_wrapper.GetExtension(::schema::improbable::player::ClientConnection::component_extension);

    *object = new ::improbable::player::ClientConnectionData{::improbable::player::detail::Deserialize_ClientConnectionData(proto)};
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    const auto& proto = proto_wrapper.GetExtension(::schema::improbable::player::ClientConnection::command_extension);

    if (proto.has_command_heartbeat_request()) {
      *object = new detail::GenericCommandObject_ClientConnection{
          ::improbable::player::ClientConnection::Commands::Heartbeat::CommandId,
         ::improbable::player::detail::Deserialize_HeartbeatRequest(proto.command_heartbeat_request())};
    }
    if (proto.has_command_disconnect_client_request()) {
      *object = new detail::GenericCommandObject_ClientConnection{
          ::improbable::player::ClientConnection::Commands::DisconnectClient::CommandId,
         ::improbable::player::detail::Deserialize_ClientDisconnectRequest(proto.command_disconnect_client_request())};
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    const auto& proto = proto_wrapper.GetExtension(::schema::improbable::player::ClientConnection::command_extension);

    if (proto.has_command_heartbeat_response()) {
      *object = new detail::GenericCommandObject_ClientConnection{
          ::improbable::player::ClientConnection::Commands::Heartbeat::CommandId,
          ::improbable::player::detail::Deserialize_HeartbeatResponse(proto.command_heartbeat_response())};
    }
    if (proto.has_command_disconnect_client_response()) {
      *object = new detail::GenericCommandObject_ClientConnection{
          ::improbable::player::ClientConnection::Commands::DisconnectClient::CommandId,
          ::improbable::player::detail::Deserialize_ClientDisconnectResponse(proto.command_disconnect_client_response())};
    }
  }
  return true;
}

void VtableSerialize_ClientConnection(
    ::worker::ComponentId, std::uint8_t object_type,
    const ::worker::detail::ClientObject* object, std::uint8_t** buffer,
    std::uint32_t* length) {
  static_cast<void>(object);
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    const auto& data = *static_cast<const ::improbable::player::ClientConnection::Update*>(object);
    {
      auto& proto = *proto_wrapper.mutable_entity_state()->MutableExtension(::schema::improbable::player::ClientConnection::component_extension);
      if (data.timeout_beats_remaining()) {
        proto.set_field1_timeout_beats_remaining(*data.timeout_beats_remaining());
      }
    }
    {
    }

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    const auto& data = *static_cast<const ::improbable::player::ClientConnectionData*>(object);
    auto& proto = *proto_wrapper.MutableExtension(::schema::improbable::player::ClientConnection::component_extension);

    ::improbable::player::detail::Serialize_ClientConnectionData(data, proto);
    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    const auto& data = *static_cast<const GenericCommandObject_ClientConnection*>(object);
    auto& proto = *proto_wrapper.MutableExtension(::schema::improbable::player::ClientConnection::command_extension);

    if (data.CommandId == ::improbable::player::ClientConnection::Commands::Heartbeat::CommandId) {
      ::improbable::player::detail::Serialize_HeartbeatRequest(*data.CommandObject.data< ::improbable::player::HeartbeatRequest >(), *proto.mutable_command_heartbeat_request());
    }
    if (data.CommandId == ::improbable::player::ClientConnection::Commands::DisconnectClient::CommandId) {
      ::improbable::player::detail::Serialize_ClientDisconnectRequest(*data.CommandObject.data< ::improbable::player::ClientDisconnectRequest >(), *proto.mutable_command_disconnect_client_request());
    }

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    const auto& data = *static_cast<const GenericCommandObject_ClientConnection*>(object);
    auto& proto = *proto_wrapper.MutableExtension(::schema::improbable::player::ClientConnection::command_extension);

    if (data.CommandId == ::improbable::player::ClientConnection::Commands::Heartbeat::CommandId) {
      ::improbable::player::detail::Serialize_HeartbeatResponse(*data.CommandObject.data< ::improbable::player::HeartbeatResponse >(), *proto.mutable_command_heartbeat_response());
    }
    if (data.CommandId == ::improbable::player::ClientConnection::Commands::DisconnectClient::CommandId) {
      ::improbable::player::detail::Serialize_ClientDisconnectResponse(*data.CommandObject.data< ::improbable::player::ClientDisconnectResponse >(), *proto.mutable_command_disconnect_client_response());
    }

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  }
}

}  // anonymous namespace

const ::worker::detail::ClientComponentVtable& Vtable_ClientConnection() {
  static const ::worker::detail::ClientComponentVtable vtable = {
      1003,
      &detail::VtableBufferFree_ClientConnection,
      &detail::VtableFree_ClientConnection,
      &detail::VtableCopy_ClientConnection,
      &detail::VtableDeserialize_ClientConnection,
      &detail::VtableSerialize_ClientConnection,
  };
  return vtable;
}

}  // ::detail

}  // ::player
}  // ::improbable
