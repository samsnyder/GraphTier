// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/core/Quaternion.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/core/Quaternion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace core {

namespace {

const ::google::protobuf::Descriptor* Quaternion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quaternion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fcore_2fQuaternion_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fcore_2fQuaternion_2eproto() {
  protobuf_AddDesc_improbable_2fcore_2fQuaternion_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/core/Quaternion.proto");
  GOOGLE_CHECK(file != NULL);
  Quaternion_descriptor_ = file->message_type(0);
  static const int Quaternion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, field1_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, field2_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, field3_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, field4_w_),
  };
  Quaternion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Quaternion_descriptor_,
      Quaternion::internal_default_instance(),
      Quaternion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _has_bits_),
      -1,
      -1,
      sizeof(Quaternion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fcore_2fQuaternion_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Quaternion_descriptor_, Quaternion::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fcore_2fQuaternion_2eproto() {
  Quaternion_default_instance_.Shutdown();
  delete Quaternion_reflection_;
}

void protobuf_InitDefaults_improbable_2fcore_2fQuaternion_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_InitDefaults_improbable_2fentity_5fstate_2eproto();
  Quaternion_default_instance_.DefaultConstruct();
  Quaternion_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_improbable_2fcore_2fQuaternion_2eproto_once_);
void protobuf_InitDefaults_improbable_2fcore_2fQuaternion_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_improbable_2fcore_2fQuaternion_2eproto_once_,
                 &protobuf_InitDefaults_improbable_2fcore_2fQuaternion_2eproto_impl);
}
void protobuf_AddDesc_improbable_2fcore_2fQuaternion_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_improbable_2fcore_2fQuaternion_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n improbable/core/Quaternion.proto\022\026sche"
    "ma.improbable.core\032\035improbable/entity_st"
    "ate.proto\"p\n\nQuaternion\022\027\n\010field1_x\030\001 \001("
    "\002B\005\302\363\030\001x\022\027\n\010field2_y\030\002 \001(\002B\005\302\363\030\001y\022\027\n\010fie"
    "ld3_z\030\003 \001(\002B\005\302\363\030\001z\022\027\n\010field4_w\030\004 \001(\002B\005\302\363"
    "\030\001wB\026B\024QuaternionOuterClass", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/core/Quaternion.proto", &protobuf_RegisterTypes);
  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fcore_2fQuaternion_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_improbable_2fcore_2fQuaternion_2eproto_once_);
void protobuf_AddDesc_improbable_2fcore_2fQuaternion_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_improbable_2fcore_2fQuaternion_2eproto_once_,
                 &protobuf_AddDesc_improbable_2fcore_2fQuaternion_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fcore_2fQuaternion_2eproto {
  StaticDescriptorInitializer_improbable_2fcore_2fQuaternion_2eproto() {
    protobuf_AddDesc_improbable_2fcore_2fQuaternion_2eproto();
  }
} static_descriptor_initializer_improbable_2fcore_2fQuaternion_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kField1XFieldNumber;
const int Quaternion::kField2YFieldNumber;
const int Quaternion::kField3ZFieldNumber;
const int Quaternion::kField4WFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fcore_2fQuaternion_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.core.Quaternion)
}

void Quaternion::InitAsDefaultInstance() {
}

Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.core.Quaternion)
}

void Quaternion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&field1_x_, 0, reinterpret_cast<char*>(&field4_w_) -
    reinterpret_cast<char*>(&field1_x_) + sizeof(field4_w_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:schema.improbable.core.Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
}

void Quaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quaternion_descriptor_;
}

const Quaternion& Quaternion::default_instance() {
  protobuf_InitDefaults_improbable_2fcore_2fQuaternion_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Quaternion> Quaternion_default_instance_;

Quaternion* Quaternion::New(::google::protobuf::Arena* arena) const {
  Quaternion* n = new Quaternion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.core.Quaternion)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Quaternion, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Quaternion*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(field1_x_, field4_w_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.core.Quaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float field1_x = 1;
      case 1: {
        if (tag == 13) {
          set_has_field1_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &field1_x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_field2_y;
        break;
      }

      // optional float field2_y = 2;
      case 2: {
        if (tag == 21) {
         parse_field2_y:
          set_has_field2_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &field2_y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_field3_z;
        break;
      }

      // optional float field3_z = 3;
      case 3: {
        if (tag == 29) {
         parse_field3_z:
          set_has_field3_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &field3_z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_field4_w;
        break;
      }

      // optional float field4_w = 4;
      case 4: {
        if (tag == 37) {
         parse_field4_w:
          set_has_field4_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &field4_w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.core.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.core.Quaternion)
  return false;
#undef DO_
}

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.core.Quaternion)
  // optional float field1_x = 1;
  if (has_field1_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->field1_x(), output);
  }

  // optional float field2_y = 2;
  if (has_field2_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->field2_y(), output);
  }

  // optional float field3_z = 3;
  if (has_field3_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->field3_z(), output);
  }

  // optional float field4_w = 4;
  if (has_field4_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->field4_w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.core.Quaternion)
}

::google::protobuf::uint8* Quaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.core.Quaternion)
  // optional float field1_x = 1;
  if (has_field1_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->field1_x(), target);
  }

  // optional float field2_y = 2;
  if (has_field2_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->field2_y(), target);
  }

  // optional float field3_z = 3;
  if (has_field3_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->field3_z(), target);
  }

  // optional float field4_w = 4;
  if (has_field4_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->field4_w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.core.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.core.Quaternion)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional float field1_x = 1;
    if (has_field1_x()) {
      total_size += 1 + 4;
    }

    // optional float field2_y = 2;
    if (has_field2_y()) {
      total_size += 1 + 4;
    }

    // optional float field3_z = 3;
    if (has_field3_z()) {
      total_size += 1 + 4;
    }

    // optional float field4_w = 4;
    if (has_field4_w()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.core.Quaternion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Quaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.core.Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.core.Quaternion)
    UnsafeMergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.core.Quaternion)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Quaternion::UnsafeMergeFrom(const Quaternion& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_x()) {
      set_field1_x(from.field1_x());
    }
    if (from.has_field2_y()) {
      set_field2_y(from.field2_y());
    }
    if (from.has_field3_z()) {
      set_field3_z(from.field3_z());
    }
    if (from.has_field4_w()) {
      set_field4_w(from.field4_w());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.core.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.core.Quaternion)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Quaternion::IsInitialized() const {

  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  std::swap(field1_x_, other->field1_x_);
  std::swap(field2_y_, other->field2_y_);
  std::swap(field3_z_, other->field3_z_);
  std::swap(field4_w_, other->field4_w_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quaternion_descriptor_;
  metadata.reflection = Quaternion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quaternion

// optional float field1_x = 1;
bool Quaternion::has_field1_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Quaternion::set_has_field1_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Quaternion::clear_has_field1_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Quaternion::clear_field1_x() {
  field1_x_ = 0;
  clear_has_field1_x();
}
float Quaternion::field1_x() const {
  // @@protoc_insertion_point(field_get:schema.improbable.core.Quaternion.field1_x)
  return field1_x_;
}
void Quaternion::set_field1_x(float value) {
  set_has_field1_x();
  field1_x_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.core.Quaternion.field1_x)
}

// optional float field2_y = 2;
bool Quaternion::has_field2_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Quaternion::set_has_field2_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Quaternion::clear_has_field2_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Quaternion::clear_field2_y() {
  field2_y_ = 0;
  clear_has_field2_y();
}
float Quaternion::field2_y() const {
  // @@protoc_insertion_point(field_get:schema.improbable.core.Quaternion.field2_y)
  return field2_y_;
}
void Quaternion::set_field2_y(float value) {
  set_has_field2_y();
  field2_y_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.core.Quaternion.field2_y)
}

// optional float field3_z = 3;
bool Quaternion::has_field3_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Quaternion::set_has_field3_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Quaternion::clear_has_field3_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Quaternion::clear_field3_z() {
  field3_z_ = 0;
  clear_has_field3_z();
}
float Quaternion::field3_z() const {
  // @@protoc_insertion_point(field_get:schema.improbable.core.Quaternion.field3_z)
  return field3_z_;
}
void Quaternion::set_field3_z(float value) {
  set_has_field3_z();
  field3_z_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.core.Quaternion.field3_z)
}

// optional float field4_w = 4;
bool Quaternion::has_field4_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Quaternion::set_has_field4_w() {
  _has_bits_[0] |= 0x00000008u;
}
void Quaternion::clear_has_field4_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void Quaternion::clear_field4_w() {
  field4_w_ = 0;
  clear_has_field4_w();
}
float Quaternion::field4_w() const {
  // @@protoc_insertion_point(field_get:schema.improbable.core.Quaternion.field4_w)
  return field4_w_;
}
void Quaternion::set_field4_w(float value) {
  set_has_field4_w();
  field4_w_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.core.Quaternion.field4_w)
}

inline const Quaternion* Quaternion::internal_default_instance() {
  return &Quaternion_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
