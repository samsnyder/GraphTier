// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/core/ClientAuthorityCheck.schema
#include <improbable/core/ClientAuthorityCheck.h>
#include <improbable/entity_state.pb.h>
#include <improbable/core/ClientAuthorityCheck.pb.h>

namespace improbable {
namespace core {

// Implementation of ClientAuthorityCheckData.
//----------------------------------------------------------------

ClientAuthorityCheckData::ClientAuthorityCheckData() {}

bool ClientAuthorityCheckData::operator==(const ClientAuthorityCheckData&) const {
  return true;
}

bool ClientAuthorityCheckData::operator!=(const ClientAuthorityCheckData& value) const {
  return !operator==(value);
}

// Implementation of ClientAuthorityCheck.
//----------------------------------------------------------------

constexpr const ::worker::ComponentId ClientAuthorityCheck::ComponentId;

bool ClientAuthorityCheck::Update::operator==(const ClientAuthorityCheck::Update&) const {
  return true;
}

bool ClientAuthorityCheck::Update::operator!=(const ClientAuthorityCheck::Update& value) const {
  return !operator==(value);
}

ClientAuthorityCheck::Update ClientAuthorityCheck::Update::FromInitialData(const ::improbable::core::ClientAuthorityCheckData&) {
  return ClientAuthorityCheck::Update{};
}

::improbable::core::ClientAuthorityCheckData ClientAuthorityCheck::Update::ToInitialData() const {
  return ::improbable::core::ClientAuthorityCheckData();
}

void ClientAuthorityCheck::Update::ApplyTo(::improbable::core::ClientAuthorityCheckData&) const {
}

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Serialize_ClientAuthorityCheckData(
    const ::improbable::core::ClientAuthorityCheckData&,
    ::schema::improbable::core::ClientAuthorityCheckData&) {}

::improbable::core::ClientAuthorityCheckData Deserialize_ClientAuthorityCheckData(
    const ::schema::improbable::core::ClientAuthorityCheckData&) {
  return {};
}

namespace {

void VtableBufferFree_ClientAuthorityCheck(::worker::ComponentId, std::uint8_t* buffer) {
  delete[] buffer;
}

void VtableFree_ClientAuthorityCheck(
    ::worker::ComponentId, std::uint8_t object_type,
    ::worker::detail::ClientObject* object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    delete static_cast< ::improbable::core::ClientAuthorityCheck::Update* >(object);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    delete static_cast< ::improbable::core::ClientAuthorityCheckData* >(object);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request ||
             object_type == ::worker::detail::ClientComponentVtable::Response) {
    delete static_cast< GenericCommandObject_ClientAuthorityCheck* >(object);
  }
}

::worker::detail::ClientObject* VtableCopy_ClientAuthorityCheck(
    ::worker::ComponentId, std::uint8_t, ::worker::detail::ClientObject* object) {
  return object;
}

std::uint8_t VtableDeserialize_ClientAuthorityCheck(
    ::worker::ComponentId, std::uint8_t object_type, const std::uint8_t* buffer,
    std::uint32_t length, ::worker::detail::ClientObject** object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    *object = new ::improbable::core::ClientAuthorityCheck::Update;
    {
    }
    {
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    const auto& proto = proto_wrapper.GetExtension(::schema::improbable::core::ClientAuthorityCheck::component_extension);

    *object = new ::improbable::core::ClientAuthorityCheckData{::improbable::core::detail::Deserialize_ClientAuthorityCheckData(proto)};
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
  }
  return true;
}

void VtableSerialize_ClientAuthorityCheck(
    ::worker::ComponentId, std::uint8_t object_type,
    const ::worker::detail::ClientObject* object, std::uint8_t** buffer,
    std::uint32_t* length) {
  static_cast<void>(object);
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    {
      proto_wrapper.mutable_entity_state()->MutableExtension(::schema::improbable::core::ClientAuthorityCheck::component_extension);
    }
    {
    }

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    const auto& data = *static_cast<const ::improbable::core::ClientAuthorityCheckData*>(object);
    auto& proto = *proto_wrapper.MutableExtension(::schema::improbable::core::ClientAuthorityCheck::component_extension);

    ::improbable::core::detail::Serialize_ClientAuthorityCheckData(data, proto);
    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    proto_wrapper.MutableExtension(::schema::improbable::core::ClientAuthorityCheck::command_extension);


    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    proto_wrapper.MutableExtension(::schema::improbable::core::ClientAuthorityCheck::command_extension);


    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  }
}

}  // anonymous namespace

const ::worker::detail::ClientComponentVtable& Vtable_ClientAuthorityCheck() {
  static const ::worker::detail::ClientComponentVtable vtable = {
      1002,
      &detail::VtableBufferFree_ClientAuthorityCheck,
      &detail::VtableFree_ClientAuthorityCheck,
      &detail::VtableCopy_ClientAuthorityCheck,
      &detail::VtableDeserialize_ClientAuthorityCheck,
      &detail::VtableSerialize_ClientAuthorityCheck,
  };
  return vtable;
}

}  // ::detail

}  // ::core
}  // ::improbable
