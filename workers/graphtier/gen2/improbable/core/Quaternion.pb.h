// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/core/Quaternion.proto

#ifndef PROTOBUF_improbable_2fcore_2fQuaternion_2eproto__INCLUDED
#define PROTOBUF_improbable_2fcore_2fQuaternion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "improbable/entity_state.pb.h"
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace core {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_improbable_2fcore_2fQuaternion_2eproto();
void protobuf_InitDefaults_improbable_2fcore_2fQuaternion_2eproto();
void protobuf_AssignDesc_improbable_2fcore_2fQuaternion_2eproto();
void protobuf_ShutdownFile_improbable_2fcore_2fQuaternion_2eproto();

class Quaternion;

// ===================================================================

class Quaternion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.improbable.core.Quaternion) */ {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaternion& default_instance();

  static const Quaternion* internal_default_instance();

  void Swap(Quaternion* other);

  // implements Message ----------------------------------------------

  inline Quaternion* New() const { return New(NULL); }

  Quaternion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Quaternion* other);
  void UnsafeMergeFrom(const Quaternion& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float field1_x = 1;
  bool has_field1_x() const;
  void clear_field1_x();
  static const int kField1XFieldNumber = 1;
  float field1_x() const;
  void set_field1_x(float value);

  // optional float field2_y = 2;
  bool has_field2_y() const;
  void clear_field2_y();
  static const int kField2YFieldNumber = 2;
  float field2_y() const;
  void set_field2_y(float value);

  // optional float field3_z = 3;
  bool has_field3_z() const;
  void clear_field3_z();
  static const int kField3ZFieldNumber = 3;
  float field3_z() const;
  void set_field3_z(float value);

  // optional float field4_w = 4;
  bool has_field4_w() const;
  void clear_field4_w();
  static const int kField4WFieldNumber = 4;
  float field4_w() const;
  void set_field4_w(float value);

  // @@protoc_insertion_point(class_scope:schema.improbable.core.Quaternion)
 private:
  inline void set_has_field1_x();
  inline void clear_has_field1_x();
  inline void set_has_field2_y();
  inline void clear_has_field2_y();
  inline void set_has_field3_z();
  inline void clear_has_field3_z();
  inline void set_has_field4_w();
  inline void clear_has_field4_w();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float field1_x_;
  float field2_y_;
  float field3_z_;
  float field4_w_;
  friend void  protobuf_InitDefaults_improbable_2fcore_2fQuaternion_2eproto_impl();
  friend void  protobuf_AddDesc_improbable_2fcore_2fQuaternion_2eproto_impl();
  friend void protobuf_AssignDesc_improbable_2fcore_2fQuaternion_2eproto();
  friend void protobuf_ShutdownFile_improbable_2fcore_2fQuaternion_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Quaternion> Quaternion_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Quaternion

// optional float field1_x = 1;
inline bool Quaternion::has_field1_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Quaternion::set_has_field1_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Quaternion::clear_has_field1_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Quaternion::clear_field1_x() {
  field1_x_ = 0;
  clear_has_field1_x();
}
inline float Quaternion::field1_x() const {
  // @@protoc_insertion_point(field_get:schema.improbable.core.Quaternion.field1_x)
  return field1_x_;
}
inline void Quaternion::set_field1_x(float value) {
  set_has_field1_x();
  field1_x_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.core.Quaternion.field1_x)
}

// optional float field2_y = 2;
inline bool Quaternion::has_field2_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Quaternion::set_has_field2_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Quaternion::clear_has_field2_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Quaternion::clear_field2_y() {
  field2_y_ = 0;
  clear_has_field2_y();
}
inline float Quaternion::field2_y() const {
  // @@protoc_insertion_point(field_get:schema.improbable.core.Quaternion.field2_y)
  return field2_y_;
}
inline void Quaternion::set_field2_y(float value) {
  set_has_field2_y();
  field2_y_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.core.Quaternion.field2_y)
}

// optional float field3_z = 3;
inline bool Quaternion::has_field3_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Quaternion::set_has_field3_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Quaternion::clear_has_field3_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Quaternion::clear_field3_z() {
  field3_z_ = 0;
  clear_has_field3_z();
}
inline float Quaternion::field3_z() const {
  // @@protoc_insertion_point(field_get:schema.improbable.core.Quaternion.field3_z)
  return field3_z_;
}
inline void Quaternion::set_field3_z(float value) {
  set_has_field3_z();
  field3_z_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.core.Quaternion.field3_z)
}

// optional float field4_w = 4;
inline bool Quaternion::has_field4_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Quaternion::set_has_field4_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Quaternion::clear_has_field4_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Quaternion::clear_field4_w() {
  field4_w_ = 0;
  clear_has_field4_w();
}
inline float Quaternion::field4_w() const {
  // @@protoc_insertion_point(field_get:schema.improbable.core.Quaternion.field4_w)
  return field4_w_;
}
inline void Quaternion::set_field4_w(float value) {
  set_has_field4_w();
  field4_w_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.core.Quaternion.field4_w)
}

inline const Quaternion* Quaternion::internal_default_instance() {
  return &Quaternion_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_improbable_2fcore_2fQuaternion_2eproto__INCLUDED
