// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/core/PlayerCreation.schema
#ifndef SPATIALOS_SCHEMA_improbable_core_PlayerCreation_schema_3439336078765508596_INCLUDED
#define SPATIALOS_SCHEMA_improbable_core_PlayerCreation_schema_3439336078765508596_INCLUDED
#include <improbable/collections.h>
#include <improbable/math/coordinates.h>
#include <improbable/math/vector3d.h>
#include <improbable/math/vector3f.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

// Schema forward declarations.
//----------------------------------------------------------------

namespace schema {
namespace improbable {
namespace core {

class CreatePlayerRequest;
class CreatePlayerResponse;
class PlayerCreationData;

}  // ::improbable
}  // ::core
}  // ::schema

namespace improbable {
namespace core {

// Forward declarations.
//----------------------------------------------------------------

class CreatePlayerRequest;
class CreatePlayerResponse;
class PlayerCreationData;

namespace detail {
const ::worker::detail::ClientComponentVtable& Vtable_PlayerCreation();
struct GenericCommandObject_PlayerCreation {
  std::uint32_t CommandId;
  ::worker::Variant<
      ::improbable::core::CreatePlayerRequest,
      ::improbable::core::CreatePlayerResponse> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class CreatePlayerRequest {
public:
  // Main constructor.
  CreatePlayerRequest();

  // Copyable and moveable.
  CreatePlayerRequest(CreatePlayerRequest&&) = default;
  CreatePlayerRequest(const CreatePlayerRequest&) = default;
  CreatePlayerRequest& operator=(CreatePlayerRequest&&) = default;
  CreatePlayerRequest& operator=(const CreatePlayerRequest&) = default;
  ~CreatePlayerRequest() = default;

  bool operator==(const CreatePlayerRequest&) const;
  bool operator!=(const CreatePlayerRequest&) const;
};

class CreatePlayerResponse {
public:
  // Main constructor.
  CreatePlayerResponse();

  // Copyable and moveable.
  CreatePlayerResponse(CreatePlayerResponse&&) = default;
  CreatePlayerResponse(const CreatePlayerResponse&) = default;
  CreatePlayerResponse& operator=(CreatePlayerResponse&&) = default;
  CreatePlayerResponse& operator=(const CreatePlayerResponse&) = default;
  ~CreatePlayerResponse() = default;

  bool operator==(const CreatePlayerResponse&) const;
  bool operator!=(const CreatePlayerResponse&) const;
};

class PlayerCreationData {
public:
  // Main constructor.
  PlayerCreationData();

  // Copyable and moveable.
  PlayerCreationData(PlayerCreationData&&) = default;
  PlayerCreationData(const PlayerCreationData&) = default;
  PlayerCreationData& operator=(PlayerCreationData&&) = default;
  PlayerCreationData& operator=(const PlayerCreationData&) = default;
  ~PlayerCreationData() = default;

  bool operator==(const PlayerCreationData&) const;
  bool operator!=(const PlayerCreationData&) const;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::core::PlayerCreation;
 *
 *   PlayerCreation::Update update;
 *   connection.SendComponentUpdate< PlayerCreation >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< PlayerCreation >(
 *       [&](const worker::ComponentUpdateOp< PlayerCreation >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         PlayerCreation::Update update = op.GetUpdate();
 *       });
 *
 *   PlayerCreation::Data data = entity.Get< PlayerCreation >();
 */
struct PlayerCreation : ::worker::detail::ComponentMetaclassBase<
    PlayerCreation, detail::Vtable_PlayerCreation> {
  static constexpr const ::worker::ComponentId ComponentId = 1001;
  using Data = ::improbable::core::PlayerCreationData;
  using GenericCommandObject = detail::GenericCommandObject_PlayerCreation;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::core::PlayerCreationData object. */
    static Update FromInitialData(const ::improbable::core::PlayerCreationData& data);

    /**
     * Converts to a ::improbable::core::PlayerCreationData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::core::PlayerCreationData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::core::PlayerCreationData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::core::PlayerCreationData&) const;
  };

  /**
   * Command metaclasses for the PlayerCreation component.
   * Each metaclass can be supplied as the template parameter to all command-related templated
   * types and methods in the C++ worker API.
  */
  class Commands {
  public:
    class CreatePlayer {
    public:
      static constexpr const std::uint32_t CommandId = 1;
      using ComponentMetaclass = PlayerCreation;
      using Request = ::improbable::core::CreatePlayerRequest;
      using Response = ::improbable::core::CreatePlayerResponse;
    };
  };
};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Serialize_CreatePlayerRequest(
    const ::improbable::core::CreatePlayerRequest&,
    ::schema::improbable::core::CreatePlayerRequest&);

::improbable::core::CreatePlayerRequest Deserialize_CreatePlayerRequest(
    const ::schema::improbable::core::CreatePlayerRequest&);

void Serialize_CreatePlayerResponse(
    const ::improbable::core::CreatePlayerResponse&,
    ::schema::improbable::core::CreatePlayerResponse&);

::improbable::core::CreatePlayerResponse Deserialize_CreatePlayerResponse(
    const ::schema::improbable::core::CreatePlayerResponse&);

void Serialize_PlayerCreationData(
    const ::improbable::core::PlayerCreationData&,
    ::schema::improbable::core::PlayerCreationData&);

::improbable::core::PlayerCreationData Deserialize_PlayerCreationData(
    const ::schema::improbable::core::PlayerCreationData&);

}  // ::detail
}  // ::core
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_core_PlayerCreation_schema_3439336078765508596_INCLUDED
