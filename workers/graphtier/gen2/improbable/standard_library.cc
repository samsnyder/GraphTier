// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/standard_library.schema
#include <improbable/standard_library.h>
#include <improbable/entity_state.pb.h>
#include <improbable/standard_library.pb.h>

namespace improbable {

// Implementation of ComponentAcl.
//----------------------------------------------------------------

ComponentAcl::ComponentAcl(const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& write)
: _write{write} {}

bool ComponentAcl::operator==(const ComponentAcl& value) const {
  return
      _write == value._write;
}

bool ComponentAcl::operator!=(const ComponentAcl& value) const {
  return !operator==(value);
}

const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& ComponentAcl::write() const {
  return _write;
}

::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& ComponentAcl::write() {
  return _write;
}

ComponentAcl& ComponentAcl::set_write(const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& value) {
  _write = value;
  return *this;
}

// Implementation of EntityAclData.
//----------------------------------------------------------------

EntityAclData::EntityAclData(
    const ::worker::Option< ::improbable::WorkerRequirementSet >& read,
    const ::worker::Option< ::improbable::ComponentAcl >& component_acl)
: _read{read}
, _component_acl{component_acl} {}

bool EntityAclData::operator==(const EntityAclData& value) const {
  return
      _read == value._read &&
      _component_acl == value._component_acl;
}

bool EntityAclData::operator!=(const EntityAclData& value) const {
  return !operator==(value);
}

const ::worker::Option< ::improbable::WorkerRequirementSet >& EntityAclData::read() const {
  return _read;
}

::worker::Option< ::improbable::WorkerRequirementSet >& EntityAclData::read() {
  return _read;
}

EntityAclData& EntityAclData::set_read(const ::worker::Option< ::improbable::WorkerRequirementSet >& value) {
  _read = value;
  return *this;
}

const ::worker::Option< ::improbable::ComponentAcl >& EntityAclData::component_acl() const {
  return _component_acl;
}

::worker::Option< ::improbable::ComponentAcl >& EntityAclData::component_acl() {
  return _component_acl;
}

EntityAclData& EntityAclData::set_component_acl(const ::worker::Option< ::improbable::ComponentAcl >& value) {
  _component_acl = value;
  return *this;
}

// Implementation of WorkerAttribute.
//----------------------------------------------------------------

WorkerAttribute::WorkerAttribute(const ::worker::Option< std::string >& name)
: _name{name} {}

bool WorkerAttribute::operator==(const WorkerAttribute& value) const {
  return
      _name == value._name;
}

bool WorkerAttribute::operator!=(const WorkerAttribute& value) const {
  return !operator==(value);
}

const ::worker::Option< std::string >& WorkerAttribute::name() const {
  return _name;
}

::worker::Option< std::string >& WorkerAttribute::name() {
  return _name;
}

WorkerAttribute& WorkerAttribute::set_name(const ::worker::Option< std::string >& value) {
  _name = value;
  return *this;
}

// Implementation of WorkerAttributeSet.
//----------------------------------------------------------------

WorkerAttributeSet::WorkerAttributeSet(const ::worker::List< ::improbable::WorkerAttribute >& attribute)
: _attribute{attribute} {}

bool WorkerAttributeSet::operator==(const WorkerAttributeSet& value) const {
  return
      _attribute == value._attribute;
}

bool WorkerAttributeSet::operator!=(const WorkerAttributeSet& value) const {
  return !operator==(value);
}

const ::worker::List< ::improbable::WorkerAttribute >& WorkerAttributeSet::attribute() const {
  return _attribute;
}

::worker::List< ::improbable::WorkerAttribute >& WorkerAttributeSet::attribute() {
  return _attribute;
}

WorkerAttributeSet& WorkerAttributeSet::set_attribute(const ::worker::List< ::improbable::WorkerAttribute >& value) {
  _attribute = value;
  return *this;
}

// Implementation of WorkerRequirementSet.
//----------------------------------------------------------------

WorkerRequirementSet::WorkerRequirementSet(const ::worker::List< ::improbable::WorkerAttributeSet >& attribute_set)
: _attribute_set{attribute_set} {}

bool WorkerRequirementSet::operator==(const WorkerRequirementSet& value) const {
  return
      _attribute_set == value._attribute_set;
}

bool WorkerRequirementSet::operator!=(const WorkerRequirementSet& value) const {
  return !operator==(value);
}

const ::worker::List< ::improbable::WorkerAttributeSet >& WorkerRequirementSet::attribute_set() const {
  return _attribute_set;
}

::worker::List< ::improbable::WorkerAttributeSet >& WorkerRequirementSet::attribute_set() {
  return _attribute_set;
}

WorkerRequirementSet& WorkerRequirementSet::set_attribute_set(const ::worker::List< ::improbable::WorkerAttributeSet >& value) {
  _attribute_set = value;
  return *this;
}

// Implementation of EntityAcl.
//----------------------------------------------------------------

constexpr const ::worker::ComponentId EntityAcl::ComponentId;

bool EntityAcl::Update::operator==(const EntityAcl::Update& value) const {
  return
      _read == value._read &&
      _component_acl == value._component_acl;
}

bool EntityAcl::Update::operator!=(const EntityAcl::Update& value) const {
  return !operator==(value);
}

EntityAcl::Update EntityAcl::Update::FromInitialData(const ::improbable::EntityAclData& data) {
  EntityAcl::Update update;
  update._read.emplace(data.read());
  update._component_acl.emplace(data.component_acl());
  return update;
}

::improbable::EntityAclData EntityAcl::Update::ToInitialData() const {
  return ::improbable::EntityAclData(
      *_read,
      *_component_acl);
}

void EntityAcl::Update::ApplyTo(::improbable::EntityAclData& data) const {
  if (_read) {
    data.set_read(*_read);
  }
  if (_component_acl) {
    data.set_component_acl(*_component_acl);
  }
}

const ::worker::Option< ::worker::Option< ::improbable::WorkerRequirementSet > >& EntityAcl::Update::read() const {
  return _read;
}

::worker::Option< ::worker::Option< ::improbable::WorkerRequirementSet > >& EntityAcl::Update::read() {
  return _read;
}

EntityAcl::Update& EntityAcl::Update::set_read(const ::worker::Option< ::improbable::WorkerRequirementSet >& value) {
  _read.emplace(value); return *this;
}

const ::worker::Option< ::worker::Option< ::improbable::ComponentAcl > >& EntityAcl::Update::component_acl() const {
  return _component_acl;
}

::worker::Option< ::worker::Option< ::improbable::ComponentAcl > >& EntityAcl::Update::component_acl() {
  return _component_acl;
}

EntityAcl::Update& EntityAcl::Update::set_component_acl(const ::worker::Option< ::improbable::ComponentAcl >& value) {
  _component_acl.emplace(value); return *this;
}

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Serialize_ComponentAcl(
    const ::improbable::ComponentAcl& data,
    ::schema::improbable::ComponentAcl& proto) {
  for (const auto& item : data.write()) {
    ::improbable::detail::Serialize_WorkerRequirementSet(item.second, (*proto.mutable_field1_write())[item.first]);
  }
}

::improbable::ComponentAcl Deserialize_ComponentAcl(
    const ::schema::improbable::ComponentAcl& proto) {
  ::improbable::ComponentAcl result{
      {}};
  for (const auto& item : proto.field1_write()) {
    result.write().emplace(item.first, ::improbable::detail::Deserialize_WorkerRequirementSet(item.second));
  }
  return result;
}

void Serialize_EntityAclData(
    const ::improbable::EntityAclData& data,
    ::schema::improbable::EntityAclData& proto) {
  if (data.read()) {
    ::improbable::detail::Serialize_WorkerRequirementSet(*data.read(), *proto.mutable_field1_read());
  }
  if (data.component_acl()) {
    ::improbable::detail::Serialize_ComponentAcl(*data.component_acl(), *proto.mutable_field2_component_acl());
  }
}

::improbable::EntityAclData Deserialize_EntityAclData(
    const ::schema::improbable::EntityAclData& proto) {
  ::improbable::EntityAclData result{
      {},
      {}};
  if (proto.has_field1_read()) {
    result.read().emplace(::improbable::detail::Deserialize_WorkerRequirementSet(proto.field1_read()));
  }
  if (proto.has_field2_component_acl()) {
    result.component_acl().emplace(::improbable::detail::Deserialize_ComponentAcl(proto.field2_component_acl()));
  }
  return result;
}

void Serialize_WorkerAttribute(
    const ::improbable::WorkerAttribute& data,
    ::schema::improbable::WorkerAttribute& proto) {
  if (data.name()) {
    proto.set_field1_name(*data.name());
  }
}

::improbable::WorkerAttribute Deserialize_WorkerAttribute(
    const ::schema::improbable::WorkerAttribute& proto) {
  ::improbable::WorkerAttribute result{
      {}};
  if (proto.has_field1_name()) {
    result.name().emplace(proto.field1_name());
  }
  return result;
}

void Serialize_WorkerAttributeSet(
    const ::improbable::WorkerAttributeSet& data,
    ::schema::improbable::WorkerAttributeSet& proto) {
  for (const auto& item : data.attribute()) {
    ::improbable::detail::Serialize_WorkerAttribute(item, *proto.add_field1_attribute());
  }
}

::improbable::WorkerAttributeSet Deserialize_WorkerAttributeSet(
    const ::schema::improbable::WorkerAttributeSet& proto) {
  ::improbable::WorkerAttributeSet result{
      {}};
  for (const auto& item : proto.field1_attribute()) {
    result.attribute().emplace_back(::improbable::detail::Deserialize_WorkerAttribute(item));
  }
  return result;
}

void Serialize_WorkerRequirementSet(
    const ::improbable::WorkerRequirementSet& data,
    ::schema::improbable::WorkerRequirementSet& proto) {
  for (const auto& item : data.attribute_set()) {
    ::improbable::detail::Serialize_WorkerAttributeSet(item, *proto.add_field1_attribute_set());
  }
}

::improbable::WorkerRequirementSet Deserialize_WorkerRequirementSet(
    const ::schema::improbable::WorkerRequirementSet& proto) {
  ::improbable::WorkerRequirementSet result{
      {}};
  for (const auto& item : proto.field1_attribute_set()) {
    result.attribute_set().emplace_back(::improbable::detail::Deserialize_WorkerAttributeSet(item));
  }
  return result;
}

namespace {

void VtableBufferFree_EntityAcl(::worker::ComponentId, std::uint8_t* buffer) {
  delete[] buffer;
}

void VtableFree_EntityAcl(
    ::worker::ComponentId, std::uint8_t object_type,
    ::worker::detail::ClientObject* object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    delete static_cast< ::improbable::EntityAcl::Update* >(object);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    delete static_cast< ::improbable::EntityAclData* >(object);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request ||
             object_type == ::worker::detail::ClientComponentVtable::Response) {
    delete static_cast< GenericCommandObject_EntityAcl* >(object);
  }
}

::worker::detail::ClientObject* VtableCopy_EntityAcl(
    ::worker::ComponentId, std::uint8_t, ::worker::detail::ClientObject* object) {
  return object;
}

std::uint8_t VtableDeserialize_EntityAcl(
    ::worker::ComponentId, std::uint8_t object_type, const std::uint8_t* buffer,
    std::uint32_t length, ::worker::detail::ClientObject** object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    *object = new ::improbable::EntityAcl::Update;
    auto client_object = static_cast< ::improbable::EntityAcl::Update* >(*object);
    {
      const auto& proto = proto_wrapper.entity_state().GetExtension(::schema::improbable::EntityAcl::component_extension);

      std::set<std::uint32_t> fields_to_clear{proto_wrapper.fields_to_clear().begin(),
                                              proto_wrapper.fields_to_clear().end()};
      if (proto.has_field1_read() || fields_to_clear.count(1)) {
        client_object->read().emplace();
        if (proto.has_field1_read()) {
          client_object->read()->emplace(::improbable::detail::Deserialize_WorkerRequirementSet(proto.field1_read()));
        }
      }
      if (proto.has_field2_component_acl() || fields_to_clear.count(2)) {
        client_object->component_acl().emplace();
        if (proto.has_field2_component_acl()) {
          client_object->component_acl()->emplace(::improbable::detail::Deserialize_ComponentAcl(proto.field2_component_acl()));
        }
      }
    }
    {
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    const auto& proto = proto_wrapper.GetExtension(::schema::improbable::EntityAcl::component_extension);

    *object = new ::improbable::EntityAclData{::improbable::detail::Deserialize_EntityAclData(proto)};
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
  }
  return true;
}

void VtableSerialize_EntityAcl(
    ::worker::ComponentId, std::uint8_t object_type,
    const ::worker::detail::ClientObject* object, std::uint8_t** buffer,
    std::uint32_t* length) {
  static_cast<void>(object);
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    const auto& data = *static_cast<const ::improbable::EntityAcl::Update*>(object);
    {
      auto& proto = *proto_wrapper.mutable_entity_state()->MutableExtension(::schema::improbable::EntityAcl::component_extension);
      if (data.read()) {
        if (data.read()->empty()) {
          proto_wrapper.add_fields_to_clear(1);
        }
        if (*data.read()) {
          ::improbable::detail::Serialize_WorkerRequirementSet(**data.read(), *proto.mutable_field1_read());
        }
      }
      if (data.component_acl()) {
        if (data.component_acl()->empty()) {
          proto_wrapper.add_fields_to_clear(2);
        }
        if (*data.component_acl()) {
          ::improbable::detail::Serialize_ComponentAcl(**data.component_acl(), *proto.mutable_field2_component_acl());
        }
      }
    }
    {
    }

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    const auto& data = *static_cast<const ::improbable::EntityAclData*>(object);
    auto& proto = *proto_wrapper.MutableExtension(::schema::improbable::EntityAcl::component_extension);

    ::improbable::detail::Serialize_EntityAclData(data, proto);
    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    proto_wrapper.MutableExtension(::schema::improbable::EntityAcl::command_extension);


    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    proto_wrapper.MutableExtension(::schema::improbable::EntityAcl::command_extension);


    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  }
}

}  // anonymous namespace

const ::worker::detail::ClientComponentVtable& Vtable_EntityAcl() {
  static const ::worker::detail::ClientComponentVtable vtable = {
      50,
      &detail::VtableBufferFree_EntityAcl,
      &detail::VtableFree_EntityAcl,
      &detail::VtableCopy_EntityAcl,
      &detail::VtableDeserialize_EntityAcl,
      &detail::VtableSerialize_EntityAcl,
  };
  return vtable;
}

}  // ::detail

}  // ::improbable
