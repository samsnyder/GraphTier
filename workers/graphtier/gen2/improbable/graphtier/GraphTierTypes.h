// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/graphtier/GraphTierTypes.schema
#ifndef SPATIALOS_SCHEMA_improbable_graphtier_GraphTierTypes_schema_6526337297682060330_INCLUDED
#define SPATIALOS_SCHEMA_improbable_graphtier_GraphTierTypes_schema_6526337297682060330_INCLUDED
#include <improbable/collections.h>
#include <improbable/math/coordinates.h>
#include <improbable/math/vector3d.h>
#include <improbable/math/vector3f.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

// Schema forward declarations.
//----------------------------------------------------------------

namespace schema {
namespace improbable {
namespace graphtier {

class Path;
class Path_PathLeg;

}  // ::improbable
}  // ::graphtier
}  // ::schema

namespace improbable {
namespace graphtier {

// Forward declarations.
//----------------------------------------------------------------

class Path;
class Path_PathLeg;

namespace detail {
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class Path {
public:
  // Nested types.
  using PathLeg = Path_PathLeg;

  // Main constructor.
  Path(
      const ::worker::List< ::improbable::graphtier::Path_PathLeg >& legs,
      double cost);

  // Copyable and moveable.
  Path(Path&&) = default;
  Path(const Path&) = default;
  Path& operator=(Path&&) = default;
  Path& operator=(const Path&) = default;
  ~Path() = default;

  bool operator==(const Path&) const;
  bool operator!=(const Path&) const;

  // Field legs = 1.
  const ::worker::List< ::improbable::graphtier::Path_PathLeg >& legs() const;
  ::worker::List< ::improbable::graphtier::Path_PathLeg >& legs();
  Path& set_legs(const ::worker::List< ::improbable::graphtier::Path_PathLeg >&);

  // Field cost = 2.
  double cost() const;
  double& cost();
  Path& set_cost(double);

private:
  ::worker::List< ::improbable::graphtier::Path_PathLeg > _legs;
  double _cost;
};

class Path_PathLeg {
public:
  // Main constructor.
  Path_PathLeg(
      ::worker::EntityId from,
      ::worker::EntityId to,
      ::worker::EntityId network_id,
      double cost);

  // Copyable and moveable.
  Path_PathLeg(Path_PathLeg&&) = default;
  Path_PathLeg(const Path_PathLeg&) = default;
  Path_PathLeg& operator=(Path_PathLeg&&) = default;
  Path_PathLeg& operator=(const Path_PathLeg&) = default;
  ~Path_PathLeg() = default;

  bool operator==(const Path_PathLeg&) const;
  bool operator!=(const Path_PathLeg&) const;

  // Field from = 1.
  ::worker::EntityId from() const;
  ::worker::EntityId& from();
  Path_PathLeg& set_from(::worker::EntityId);

  // Field to = 2.
  ::worker::EntityId to() const;
  ::worker::EntityId& to();
  Path_PathLeg& set_to(::worker::EntityId);

  // Field network_id = 3.
  ::worker::EntityId network_id() const;
  ::worker::EntityId& network_id();
  Path_PathLeg& set_network_id(::worker::EntityId);

  // Field cost = 4.
  double cost() const;
  double& cost();
  Path_PathLeg& set_cost(double);

private:
  ::worker::EntityId _from;
  ::worker::EntityId _to;
  ::worker::EntityId _network_id;
  double _cost;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Serialize_Path(
    const ::improbable::graphtier::Path&,
    ::schema::improbable::graphtier::Path&);

::improbable::graphtier::Path Deserialize_Path(
    const ::schema::improbable::graphtier::Path&);

void Serialize_Path_PathLeg(
    const ::improbable::graphtier::Path_PathLeg&,
    ::schema::improbable::graphtier::Path_PathLeg&);

::improbable::graphtier::Path_PathLeg Deserialize_Path_PathLeg(
    const ::schema::improbable::graphtier::Path_PathLeg&);

}  // ::detail
}  // ::graphtier
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_graphtier_GraphTierTypes_schema_6526337297682060330_INCLUDED
