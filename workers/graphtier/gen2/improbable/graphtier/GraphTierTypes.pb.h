// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/graphtier/GraphTierTypes.proto

#ifndef PROTOBUF_improbable_2fgraphtier_2fGraphTierTypes_2eproto__INCLUDED
#define PROTOBUF_improbable_2fgraphtier_2fGraphTierTypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "improbable/entity_state.pb.h"
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace graphtier {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
void protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
void protobuf_AssignDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
void protobuf_ShutdownFile_improbable_2fgraphtier_2fGraphTierTypes_2eproto();

class Path;
class Path_PathLeg;

// ===================================================================

class Path_PathLeg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.improbable.graphtier.Path.PathLeg) */ {
 public:
  Path_PathLeg();
  virtual ~Path_PathLeg();

  Path_PathLeg(const Path_PathLeg& from);

  inline Path_PathLeg& operator=(const Path_PathLeg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Path_PathLeg& default_instance();

  static const Path_PathLeg* internal_default_instance();

  void Swap(Path_PathLeg* other);

  // implements Message ----------------------------------------------

  inline Path_PathLeg* New() const { return New(NULL); }

  Path_PathLeg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Path_PathLeg& from);
  void MergeFrom(const Path_PathLeg& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Path_PathLeg* other);
  void UnsafeMergeFrom(const Path_PathLeg& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 field1_from = 1;
  bool has_field1_from() const;
  void clear_field1_from();
  static const int kField1FromFieldNumber = 1;
  ::google::protobuf::int64 field1_from() const;
  void set_field1_from(::google::protobuf::int64 value);

  // optional int64 field2_to = 2;
  bool has_field2_to() const;
  void clear_field2_to();
  static const int kField2ToFieldNumber = 2;
  ::google::protobuf::int64 field2_to() const;
  void set_field2_to(::google::protobuf::int64 value);

  // optional int64 field3_network_id = 3;
  bool has_field3_network_id() const;
  void clear_field3_network_id();
  static const int kField3NetworkIdFieldNumber = 3;
  ::google::protobuf::int64 field3_network_id() const;
  void set_field3_network_id(::google::protobuf::int64 value);

  // optional double field4_cost = 4;
  bool has_field4_cost() const;
  void clear_field4_cost();
  static const int kField4CostFieldNumber = 4;
  double field4_cost() const;
  void set_field4_cost(double value);

  // @@protoc_insertion_point(class_scope:schema.improbable.graphtier.Path.PathLeg)
 private:
  inline void set_has_field1_from();
  inline void clear_has_field1_from();
  inline void set_has_field2_to();
  inline void clear_has_field2_to();
  inline void set_has_field3_network_id();
  inline void clear_has_field3_network_id();
  inline void set_has_field4_cost();
  inline void clear_has_field4_cost();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 field1_from_;
  ::google::protobuf::int64 field2_to_;
  ::google::protobuf::int64 field3_network_id_;
  double field4_cost_;
  friend void  protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto_impl();
  friend void  protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto_impl();
  friend void protobuf_AssignDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  friend void protobuf_ShutdownFile_improbable_2fgraphtier_2fGraphTierTypes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Path_PathLeg> Path_PathLeg_default_instance_;

// -------------------------------------------------------------------

class Path : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.improbable.graphtier.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Path& default_instance();

  static const Path* internal_default_instance();

  void Swap(Path* other);

  // implements Message ----------------------------------------------

  inline Path* New() const { return New(NULL); }

  Path* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Path* other);
  void UnsafeMergeFrom(const Path& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Path_PathLeg PathLeg;

  // accessors -------------------------------------------------------

  // repeated .schema.improbable.graphtier.Path.PathLeg field1_legs = 1;
  int field1_legs_size() const;
  void clear_field1_legs();
  static const int kField1LegsFieldNumber = 1;
  const ::schema::improbable::graphtier::Path_PathLeg& field1_legs(int index) const;
  ::schema::improbable::graphtier::Path_PathLeg* mutable_field1_legs(int index);
  ::schema::improbable::graphtier::Path_PathLeg* add_field1_legs();
  ::google::protobuf::RepeatedPtrField< ::schema::improbable::graphtier::Path_PathLeg >*
      mutable_field1_legs();
  const ::google::protobuf::RepeatedPtrField< ::schema::improbable::graphtier::Path_PathLeg >&
      field1_legs() const;

  // optional double field2_cost = 2;
  bool has_field2_cost() const;
  void clear_field2_cost();
  static const int kField2CostFieldNumber = 2;
  double field2_cost() const;
  void set_field2_cost(double value);

  // @@protoc_insertion_point(class_scope:schema.improbable.graphtier.Path)
 private:
  inline void set_has_field2_cost();
  inline void clear_has_field2_cost();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::schema::improbable::graphtier::Path_PathLeg > field1_legs_;
  double field2_cost_;
  friend void  protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto_impl();
  friend void  protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto_impl();
  friend void protobuf_AssignDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  friend void protobuf_ShutdownFile_improbable_2fgraphtier_2fGraphTierTypes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Path> Path_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Path_PathLeg

// optional int64 field1_from = 1;
inline bool Path_PathLeg::has_field1_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Path_PathLeg::set_has_field1_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Path_PathLeg::clear_has_field1_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Path_PathLeg::clear_field1_from() {
  field1_from_ = GOOGLE_LONGLONG(0);
  clear_has_field1_from();
}
inline ::google::protobuf::int64 Path_PathLeg::field1_from() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.PathLeg.field1_from)
  return field1_from_;
}
inline void Path_PathLeg::set_field1_from(::google::protobuf::int64 value) {
  set_has_field1_from();
  field1_from_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.Path.PathLeg.field1_from)
}

// optional int64 field2_to = 2;
inline bool Path_PathLeg::has_field2_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Path_PathLeg::set_has_field2_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Path_PathLeg::clear_has_field2_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Path_PathLeg::clear_field2_to() {
  field2_to_ = GOOGLE_LONGLONG(0);
  clear_has_field2_to();
}
inline ::google::protobuf::int64 Path_PathLeg::field2_to() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.PathLeg.field2_to)
  return field2_to_;
}
inline void Path_PathLeg::set_field2_to(::google::protobuf::int64 value) {
  set_has_field2_to();
  field2_to_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.Path.PathLeg.field2_to)
}

// optional int64 field3_network_id = 3;
inline bool Path_PathLeg::has_field3_network_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Path_PathLeg::set_has_field3_network_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Path_PathLeg::clear_has_field3_network_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Path_PathLeg::clear_field3_network_id() {
  field3_network_id_ = GOOGLE_LONGLONG(0);
  clear_has_field3_network_id();
}
inline ::google::protobuf::int64 Path_PathLeg::field3_network_id() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.PathLeg.field3_network_id)
  return field3_network_id_;
}
inline void Path_PathLeg::set_field3_network_id(::google::protobuf::int64 value) {
  set_has_field3_network_id();
  field3_network_id_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.Path.PathLeg.field3_network_id)
}

// optional double field4_cost = 4;
inline bool Path_PathLeg::has_field4_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Path_PathLeg::set_has_field4_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Path_PathLeg::clear_has_field4_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Path_PathLeg::clear_field4_cost() {
  field4_cost_ = 0;
  clear_has_field4_cost();
}
inline double Path_PathLeg::field4_cost() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.PathLeg.field4_cost)
  return field4_cost_;
}
inline void Path_PathLeg::set_field4_cost(double value) {
  set_has_field4_cost();
  field4_cost_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.Path.PathLeg.field4_cost)
}

inline const Path_PathLeg* Path_PathLeg::internal_default_instance() {
  return &Path_PathLeg_default_instance_.get();
}
// -------------------------------------------------------------------

// Path

// repeated .schema.improbable.graphtier.Path.PathLeg field1_legs = 1;
inline int Path::field1_legs_size() const {
  return field1_legs_.size();
}
inline void Path::clear_field1_legs() {
  field1_legs_.Clear();
}
inline const ::schema::improbable::graphtier::Path_PathLeg& Path::field1_legs(int index) const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.field1_legs)
  return field1_legs_.Get(index);
}
inline ::schema::improbable::graphtier::Path_PathLeg* Path::mutable_field1_legs(int index) {
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.Path.field1_legs)
  return field1_legs_.Mutable(index);
}
inline ::schema::improbable::graphtier::Path_PathLeg* Path::add_field1_legs() {
  // @@protoc_insertion_point(field_add:schema.improbable.graphtier.Path.field1_legs)
  return field1_legs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::schema::improbable::graphtier::Path_PathLeg >*
Path::mutable_field1_legs() {
  // @@protoc_insertion_point(field_mutable_list:schema.improbable.graphtier.Path.field1_legs)
  return &field1_legs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::schema::improbable::graphtier::Path_PathLeg >&
Path::field1_legs() const {
  // @@protoc_insertion_point(field_list:schema.improbable.graphtier.Path.field1_legs)
  return field1_legs_;
}

// optional double field2_cost = 2;
inline bool Path::has_field2_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Path::set_has_field2_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Path::clear_has_field2_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Path::clear_field2_cost() {
  field2_cost_ = 0;
  clear_has_field2_cost();
}
inline double Path::field2_cost() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.field2_cost)
  return field2_cost_;
}
inline void Path::set_field2_cost(double value) {
  set_has_field2_cost();
  field2_cost_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.Path.field2_cost)
}

inline const Path* Path::internal_default_instance() {
  return &Path_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graphtier
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_improbable_2fgraphtier_2fGraphTierTypes_2eproto__INCLUDED
