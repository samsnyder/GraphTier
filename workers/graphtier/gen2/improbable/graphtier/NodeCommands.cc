// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/graphtier/NodeCommands.schema
#include <improbable/graphtier/NodeCommands.h>
#include <improbable/entity_state.pb.h>
#include <improbable/graphtier/NodeCommands.pb.h>

namespace improbable {
namespace graphtier {

// Implementation of NodeCommandsData.
//----------------------------------------------------------------

NodeCommandsData::NodeCommandsData() {}

bool NodeCommandsData::operator==(const NodeCommandsData&) const {
  return true;
}

bool NodeCommandsData::operator!=(const NodeCommandsData& value) const {
  return !operator==(value);
}

// Implementation of RouteFindRequest.
//----------------------------------------------------------------

RouteFindRequest::RouteFindRequest(::worker::EntityId to)
: _to{to} {}

bool RouteFindRequest::operator==(const RouteFindRequest& value) const {
  return
      _to == value._to;
}

bool RouteFindRequest::operator!=(const RouteFindRequest& value) const {
  return !operator==(value);
}

::worker::EntityId RouteFindRequest::to() const {
  return _to;
}

::worker::EntityId& RouteFindRequest::to() {
  return _to;
}

RouteFindRequest& RouteFindRequest::set_to(::worker::EntityId value) {
  _to = value;
  return *this;
}

// Implementation of RouteFindResponse.
//----------------------------------------------------------------

RouteFindResponse::RouteFindResponse(const ::worker::Option< ::improbable::graphtier::Path >& path)
: _path{path} {}

bool RouteFindResponse::operator==(const RouteFindResponse& value) const {
  return
      _path == value._path;
}

bool RouteFindResponse::operator!=(const RouteFindResponse& value) const {
  return !operator==(value);
}

const ::worker::Option< ::improbable::graphtier::Path >& RouteFindResponse::path() const {
  return _path;
}

::worker::Option< ::improbable::graphtier::Path >& RouteFindResponse::path() {
  return _path;
}

RouteFindResponse& RouteFindResponse::set_path(const ::worker::Option< ::improbable::graphtier::Path >& value) {
  _path = value;
  return *this;
}

// Implementation of NodeCommands.
//----------------------------------------------------------------

constexpr const ::worker::ComponentId NodeCommands::ComponentId;

constexpr const std::uint32_t NodeCommands::Commands::FindRoute::CommandId;

bool NodeCommands::Update::operator==(const NodeCommands::Update&) const {
  return true;
}

bool NodeCommands::Update::operator!=(const NodeCommands::Update& value) const {
  return !operator==(value);
}

NodeCommands::Update NodeCommands::Update::FromInitialData(const ::improbable::graphtier::NodeCommandsData&) {
  return NodeCommands::Update{};
}

::improbable::graphtier::NodeCommandsData NodeCommands::Update::ToInitialData() const {
  return ::improbable::graphtier::NodeCommandsData();
}

void NodeCommands::Update::ApplyTo(::improbable::graphtier::NodeCommandsData&) const {
}

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Serialize_NodeCommandsData(
    const ::improbable::graphtier::NodeCommandsData&,
    ::schema::improbable::graphtier::NodeCommandsData&) {}

::improbable::graphtier::NodeCommandsData Deserialize_NodeCommandsData(
    const ::schema::improbable::graphtier::NodeCommandsData&) {
  return {};
}

void Serialize_RouteFindRequest(
    const ::improbable::graphtier::RouteFindRequest& data,
    ::schema::improbable::graphtier::RouteFindRequest& proto) {
  proto.set_field2_to(data.to());
}

::improbable::graphtier::RouteFindRequest Deserialize_RouteFindRequest(
    const ::schema::improbable::graphtier::RouteFindRequest& proto) {
  ::improbable::graphtier::RouteFindRequest result{
      proto.field2_to()};
  return result;
}

void Serialize_RouteFindResponse(
    const ::improbable::graphtier::RouteFindResponse& data,
    ::schema::improbable::graphtier::RouteFindResponse& proto) {
  if (data.path()) {
    ::improbable::graphtier::detail::Serialize_Path(*data.path(), *proto.mutable_field1_path());
  }
}

::improbable::graphtier::RouteFindResponse Deserialize_RouteFindResponse(
    const ::schema::improbable::graphtier::RouteFindResponse& proto) {
  ::improbable::graphtier::RouteFindResponse result{
      {}};
  if (proto.has_field1_path()) {
    result.path().emplace(::improbable::graphtier::detail::Deserialize_Path(proto.field1_path()));
  }
  return result;
}

namespace {

void VtableBufferFree_NodeCommands(::worker::ComponentId, std::uint8_t* buffer) {
  delete[] buffer;
}

void VtableFree_NodeCommands(
    ::worker::ComponentId, std::uint8_t object_type,
    ::worker::detail::ClientObject* object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    delete static_cast< ::improbable::graphtier::NodeCommands::Update* >(object);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    delete static_cast< ::improbable::graphtier::NodeCommandsData* >(object);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request ||
             object_type == ::worker::detail::ClientComponentVtable::Response) {
    delete static_cast< GenericCommandObject_NodeCommands* >(object);
  }
}

::worker::detail::ClientObject* VtableCopy_NodeCommands(
    ::worker::ComponentId, std::uint8_t, ::worker::detail::ClientObject* object) {
  return object;
}

std::uint8_t VtableDeserialize_NodeCommands(
    ::worker::ComponentId, std::uint8_t object_type, const std::uint8_t* buffer,
    std::uint32_t length, ::worker::detail::ClientObject** object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    *object = new ::improbable::graphtier::NodeCommands::Update;
    {
    }
    {
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    const auto& proto = proto_wrapper.GetExtension(::schema::improbable::graphtier::NodeCommands::component_extension);

    *object = new ::improbable::graphtier::NodeCommandsData{::improbable::graphtier::detail::Deserialize_NodeCommandsData(proto)};
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    const auto& proto = proto_wrapper.GetExtension(::schema::improbable::graphtier::NodeCommands::command_extension);

    if (proto.has_command_find_route_request()) {
      *object = new detail::GenericCommandObject_NodeCommands{
          ::improbable::graphtier::NodeCommands::Commands::FindRoute::CommandId,
         ::improbable::graphtier::detail::Deserialize_RouteFindRequest(proto.command_find_route_request())};
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    const auto& proto = proto_wrapper.GetExtension(::schema::improbable::graphtier::NodeCommands::command_extension);

    if (proto.has_command_find_route_response()) {
      *object = new detail::GenericCommandObject_NodeCommands{
          ::improbable::graphtier::NodeCommands::Commands::FindRoute::CommandId,
          ::improbable::graphtier::detail::Deserialize_RouteFindResponse(proto.command_find_route_response())};
    }
  }
  return true;
}

void VtableSerialize_NodeCommands(
    ::worker::ComponentId, std::uint8_t object_type,
    const ::worker::detail::ClientObject* object, std::uint8_t** buffer,
    std::uint32_t* length) {
  static_cast<void>(object);
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    {
      proto_wrapper.mutable_entity_state()->MutableExtension(::schema::improbable::graphtier::NodeCommands::component_extension);
    }
    {
    }

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    const auto& data = *static_cast<const ::improbable::graphtier::NodeCommandsData*>(object);
    auto& proto = *proto_wrapper.MutableExtension(::schema::improbable::graphtier::NodeCommands::component_extension);

    ::improbable::graphtier::detail::Serialize_NodeCommandsData(data, proto);
    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    const auto& data = *static_cast<const GenericCommandObject_NodeCommands*>(object);
    auto& proto = *proto_wrapper.MutableExtension(::schema::improbable::graphtier::NodeCommands::command_extension);

    if (data.CommandId == ::improbable::graphtier::NodeCommands::Commands::FindRoute::CommandId) {
      ::improbable::graphtier::detail::Serialize_RouteFindRequest(*data.CommandObject.data< ::improbable::graphtier::RouteFindRequest >(), *proto.mutable_command_find_route_request());
    }

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    const auto& data = *static_cast<const GenericCommandObject_NodeCommands*>(object);
    auto& proto = *proto_wrapper.MutableExtension(::schema::improbable::graphtier::NodeCommands::command_extension);

    if (data.CommandId == ::improbable::graphtier::NodeCommands::Commands::FindRoute::CommandId) {
      ::improbable::graphtier::detail::Serialize_RouteFindResponse(*data.CommandObject.data< ::improbable::graphtier::RouteFindResponse >(), *proto.mutable_command_find_route_response());
    }

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  }
}

}  // anonymous namespace

const ::worker::detail::ClientComponentVtable& Vtable_NodeCommands() {
  static const ::worker::detail::ClientComponentVtable vtable = {
      8005,
      &detail::VtableBufferFree_NodeCommands,
      &detail::VtableFree_NodeCommands,
      &detail::VtableCopy_NodeCommands,
      &detail::VtableDeserialize_NodeCommands,
      &detail::VtableSerialize_NodeCommands,
  };
  return vtable;
}

}  // ::detail

}  // ::graphtier
}  // ::improbable
