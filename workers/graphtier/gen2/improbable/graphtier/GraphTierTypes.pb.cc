// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/graphtier/GraphTierTypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/graphtier/GraphTierTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace graphtier {

namespace {

const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* Path_PathLeg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_PathLeg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto() {
  protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/graphtier/GraphTierTypes.proto");
  GOOGLE_CHECK(file != NULL);
  Path_descriptor_ = file->message_type(0);
  static const int Path_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, field1_legs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, field2_cost_),
  };
  Path_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Path_descriptor_,
      Path::internal_default_instance(),
      Path_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _has_bits_),
      -1,
      -1,
      sizeof(Path),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _internal_metadata_));
  Path_PathLeg_descriptor_ = Path_descriptor_->nested_type(0);
  static const int Path_PathLeg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path_PathLeg, field1_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path_PathLeg, field2_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path_PathLeg, field3_network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path_PathLeg, field4_cost_),
  };
  Path_PathLeg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Path_PathLeg_descriptor_,
      Path_PathLeg::internal_default_instance(),
      Path_PathLeg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path_PathLeg, _has_bits_),
      -1,
      -1,
      sizeof(Path_PathLeg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path_PathLeg, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Path_descriptor_, Path::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Path_PathLeg_descriptor_, Path_PathLeg::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fgraphtier_2fGraphTierTypes_2eproto() {
  Path_default_instance_.Shutdown();
  delete Path_reflection_;
  Path_PathLeg_default_instance_.Shutdown();
  delete Path_PathLeg_reflection_;
}

void protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_InitDefaults_improbable_2fentity_5fstate_2eproto();
  Path_default_instance_.DefaultConstruct();
  Path_PathLeg_default_instance_.DefaultConstruct();
  Path_default_instance_.get_mutable()->InitAsDefaultInstance();
  Path_PathLeg_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto_once_);
void protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto_once_,
                 &protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto_impl);
}
void protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)improbable/graphtier/GraphTierTypes.pr"
    "oto\022\033schema.improbable.graphtier\032\035improb"
    "able/entity_state.proto\"\213\002\n\004Path\022H\n\013fiel"
    "d1_legs\030\001 \003(\0132).schema.improbable.grapht"
    "ier.Path.PathLegB\010\302\363\030\004legs\022\035\n\013field2_cos"
    "t\030\002 \001(\001B\010\302\363\030\004cost\032\231\001\n\007PathLeg\022!\n\013field1_"
    "from\030\001 \001(\003B\014\302\363\030\004from\350\363\030\001\022\035\n\tfield2_to\030\002 "
    "\001(\003B\n\302\363\030\002to\350\363\030\001\022-\n\021field3_network_id\030\003 \001"
    "(\003B\022\302\363\030\nnetwork_id\350\363\030\001\022\035\n\013field4_cost\030\004 "
    "\001(\001B\010\302\363\030\004costB\032B\030GraphTierTypesOuterClas"
    "s", 401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/graphtier/GraphTierTypes.proto", &protobuf_RegisterTypes);
  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fgraphtier_2fGraphTierTypes_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto_once_);
void protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto_once_,
                 &protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fgraphtier_2fGraphTierTypes_2eproto {
  StaticDescriptorInitializer_improbable_2fgraphtier_2fGraphTierTypes_2eproto() {
    protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  }
} static_descriptor_initializer_improbable_2fgraphtier_2fGraphTierTypes_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path_PathLeg::kField1FromFieldNumber;
const int Path_PathLeg::kField2ToFieldNumber;
const int Path_PathLeg::kField3NetworkIdFieldNumber;
const int Path_PathLeg::kField4CostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path_PathLeg::Path_PathLeg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.Path.PathLeg)
}

void Path_PathLeg::InitAsDefaultInstance() {
}

Path_PathLeg::Path_PathLeg(const Path_PathLeg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.Path.PathLeg)
}

void Path_PathLeg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&field1_from_, 0, reinterpret_cast<char*>(&field4_cost_) -
    reinterpret_cast<char*>(&field1_from_) + sizeof(field4_cost_));
}

Path_PathLeg::~Path_PathLeg() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.Path.PathLeg)
  SharedDtor();
}

void Path_PathLeg::SharedDtor() {
}

void Path_PathLeg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path_PathLeg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_PathLeg_descriptor_;
}

const Path_PathLeg& Path_PathLeg::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Path_PathLeg> Path_PathLeg_default_instance_;

Path_PathLeg* Path_PathLeg::New(::google::protobuf::Arena* arena) const {
  Path_PathLeg* n = new Path_PathLeg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path_PathLeg::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.Path.PathLeg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Path_PathLeg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Path_PathLeg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(field1_from_, field4_cost_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Path_PathLeg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.Path.PathLeg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 field1_from = 1;
      case 1: {
        if (tag == 8) {
          set_has_field1_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field1_from_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_field2_to;
        break;
      }

      // optional int64 field2_to = 2;
      case 2: {
        if (tag == 16) {
         parse_field2_to:
          set_has_field2_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field2_to_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_field3_network_id;
        break;
      }

      // optional int64 field3_network_id = 3;
      case 3: {
        if (tag == 24) {
         parse_field3_network_id:
          set_has_field3_network_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field3_network_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_field4_cost;
        break;
      }

      // optional double field4_cost = 4;
      case 4: {
        if (tag == 33) {
         parse_field4_cost:
          set_has_field4_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field4_cost_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.Path.PathLeg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.Path.PathLeg)
  return false;
#undef DO_
}

void Path_PathLeg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.Path.PathLeg)
  // optional int64 field1_from = 1;
  if (has_field1_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field1_from(), output);
  }

  // optional int64 field2_to = 2;
  if (has_field2_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->field2_to(), output);
  }

  // optional int64 field3_network_id = 3;
  if (has_field3_network_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->field3_network_id(), output);
  }

  // optional double field4_cost = 4;
  if (has_field4_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->field4_cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.Path.PathLeg)
}

::google::protobuf::uint8* Path_PathLeg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.Path.PathLeg)
  // optional int64 field1_from = 1;
  if (has_field1_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->field1_from(), target);
  }

  // optional int64 field2_to = 2;
  if (has_field2_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->field2_to(), target);
  }

  // optional int64 field3_network_id = 3;
  if (has_field3_network_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->field3_network_id(), target);
  }

  // optional double field4_cost = 4;
  if (has_field4_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->field4_cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.Path.PathLeg)
  return target;
}

size_t Path_PathLeg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.Path.PathLeg)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 field1_from = 1;
    if (has_field1_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field1_from());
    }

    // optional int64 field2_to = 2;
    if (has_field2_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field2_to());
    }

    // optional int64 field3_network_id = 3;
    if (has_field3_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field3_network_id());
    }

    // optional double field4_cost = 4;
    if (has_field4_cost()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path_PathLeg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.Path.PathLeg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Path_PathLeg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Path_PathLeg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.Path.PathLeg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.Path.PathLeg)
    UnsafeMergeFrom(*source);
  }
}

void Path_PathLeg::MergeFrom(const Path_PathLeg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.Path.PathLeg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Path_PathLeg::UnsafeMergeFrom(const Path_PathLeg& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_from()) {
      set_field1_from(from.field1_from());
    }
    if (from.has_field2_to()) {
      set_field2_to(from.field2_to());
    }
    if (from.has_field3_network_id()) {
      set_field3_network_id(from.field3_network_id());
    }
    if (from.has_field4_cost()) {
      set_field4_cost(from.field4_cost());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Path_PathLeg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.Path.PathLeg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path_PathLeg::CopyFrom(const Path_PathLeg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.Path.PathLeg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Path_PathLeg::IsInitialized() const {

  return true;
}

void Path_PathLeg::Swap(Path_PathLeg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path_PathLeg::InternalSwap(Path_PathLeg* other) {
  std::swap(field1_from_, other->field1_from_);
  std::swap(field2_to_, other->field2_to_);
  std::swap(field3_network_id_, other->field3_network_id_);
  std::swap(field4_cost_, other->field4_cost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path_PathLeg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_PathLeg_descriptor_;
  metadata.reflection = Path_PathLeg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kField1LegsFieldNumber;
const int Path::kField2CostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.Path)
}

void Path::InitAsDefaultInstance() {
}

Path::Path(const Path& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.Path)
}

void Path::SharedCtor() {
  _cached_size_ = 0;
  field2_cost_ = 0;
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.Path)
  SharedDtor();
}

void Path::SharedDtor() {
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Path> Path_default_instance_;

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.Path)
  field2_cost_ = 0;
  field1_legs_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .schema.improbable.graphtier.Path.PathLeg field1_legs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_field1_legs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_field1_legs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_field1_legs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(17)) goto parse_field2_cost;
        break;
      }

      // optional double field2_cost = 2;
      case 2: {
        if (tag == 17) {
         parse_field2_cost:
          set_has_field2_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field2_cost_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.Path)
  // repeated .schema.improbable.graphtier.Path.PathLeg field1_legs = 1;
  for (unsigned int i = 0, n = this->field1_legs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field1_legs(i), output);
  }

  // optional double field2_cost = 2;
  if (has_field2_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->field2_cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.Path)
}

::google::protobuf::uint8* Path::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.Path)
  // repeated .schema.improbable.graphtier.Path.PathLeg field1_legs = 1;
  for (unsigned int i = 0, n = this->field1_legs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->field1_legs(i), false, target);
  }

  // optional double field2_cost = 2;
  if (has_field2_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->field2_cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.Path)
  size_t total_size = 0;

  // optional double field2_cost = 2;
  if (has_field2_cost()) {
    total_size += 1 + 8;
  }

  // repeated .schema.improbable.graphtier.Path.PathLeg field1_legs = 1;
  {
    unsigned int count = this->field1_legs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field1_legs(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.Path)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Path* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.Path)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.Path)
    UnsafeMergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.Path)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Path::UnsafeMergeFrom(const Path& from) {
  GOOGLE_DCHECK(&from != this);
  field1_legs_.MergeFrom(from.field1_legs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_field2_cost()) {
      set_field2_cost(from.field2_cost());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.Path)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Path::IsInitialized() const {

  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  field1_legs_.UnsafeArenaSwap(&other->field1_legs_);
  std::swap(field2_cost_, other->field2_cost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Path_PathLeg

// optional int64 field1_from = 1;
bool Path_PathLeg::has_field1_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Path_PathLeg::set_has_field1_from() {
  _has_bits_[0] |= 0x00000001u;
}
void Path_PathLeg::clear_has_field1_from() {
  _has_bits_[0] &= ~0x00000001u;
}
void Path_PathLeg::clear_field1_from() {
  field1_from_ = GOOGLE_LONGLONG(0);
  clear_has_field1_from();
}
::google::protobuf::int64 Path_PathLeg::field1_from() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.PathLeg.field1_from)
  return field1_from_;
}
void Path_PathLeg::set_field1_from(::google::protobuf::int64 value) {
  set_has_field1_from();
  field1_from_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.Path.PathLeg.field1_from)
}

// optional int64 field2_to = 2;
bool Path_PathLeg::has_field2_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Path_PathLeg::set_has_field2_to() {
  _has_bits_[0] |= 0x00000002u;
}
void Path_PathLeg::clear_has_field2_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void Path_PathLeg::clear_field2_to() {
  field2_to_ = GOOGLE_LONGLONG(0);
  clear_has_field2_to();
}
::google::protobuf::int64 Path_PathLeg::field2_to() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.PathLeg.field2_to)
  return field2_to_;
}
void Path_PathLeg::set_field2_to(::google::protobuf::int64 value) {
  set_has_field2_to();
  field2_to_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.Path.PathLeg.field2_to)
}

// optional int64 field3_network_id = 3;
bool Path_PathLeg::has_field3_network_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Path_PathLeg::set_has_field3_network_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Path_PathLeg::clear_has_field3_network_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Path_PathLeg::clear_field3_network_id() {
  field3_network_id_ = GOOGLE_LONGLONG(0);
  clear_has_field3_network_id();
}
::google::protobuf::int64 Path_PathLeg::field3_network_id() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.PathLeg.field3_network_id)
  return field3_network_id_;
}
void Path_PathLeg::set_field3_network_id(::google::protobuf::int64 value) {
  set_has_field3_network_id();
  field3_network_id_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.Path.PathLeg.field3_network_id)
}

// optional double field4_cost = 4;
bool Path_PathLeg::has_field4_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Path_PathLeg::set_has_field4_cost() {
  _has_bits_[0] |= 0x00000008u;
}
void Path_PathLeg::clear_has_field4_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
void Path_PathLeg::clear_field4_cost() {
  field4_cost_ = 0;
  clear_has_field4_cost();
}
double Path_PathLeg::field4_cost() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.PathLeg.field4_cost)
  return field4_cost_;
}
void Path_PathLeg::set_field4_cost(double value) {
  set_has_field4_cost();
  field4_cost_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.Path.PathLeg.field4_cost)
}

inline const Path_PathLeg* Path_PathLeg::internal_default_instance() {
  return &Path_PathLeg_default_instance_.get();
}
// -------------------------------------------------------------------

// Path

// repeated .schema.improbable.graphtier.Path.PathLeg field1_legs = 1;
int Path::field1_legs_size() const {
  return field1_legs_.size();
}
void Path::clear_field1_legs() {
  field1_legs_.Clear();
}
const ::schema::improbable::graphtier::Path_PathLeg& Path::field1_legs(int index) const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.field1_legs)
  return field1_legs_.Get(index);
}
::schema::improbable::graphtier::Path_PathLeg* Path::mutable_field1_legs(int index) {
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.Path.field1_legs)
  return field1_legs_.Mutable(index);
}
::schema::improbable::graphtier::Path_PathLeg* Path::add_field1_legs() {
  // @@protoc_insertion_point(field_add:schema.improbable.graphtier.Path.field1_legs)
  return field1_legs_.Add();
}
::google::protobuf::RepeatedPtrField< ::schema::improbable::graphtier::Path_PathLeg >*
Path::mutable_field1_legs() {
  // @@protoc_insertion_point(field_mutable_list:schema.improbable.graphtier.Path.field1_legs)
  return &field1_legs_;
}
const ::google::protobuf::RepeatedPtrField< ::schema::improbable::graphtier::Path_PathLeg >&
Path::field1_legs() const {
  // @@protoc_insertion_point(field_list:schema.improbable.graphtier.Path.field1_legs)
  return field1_legs_;
}

// optional double field2_cost = 2;
bool Path::has_field2_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Path::set_has_field2_cost() {
  _has_bits_[0] |= 0x00000002u;
}
void Path::clear_has_field2_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
void Path::clear_field2_cost() {
  field2_cost_ = 0;
  clear_has_field2_cost();
}
double Path::field2_cost() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.Path.field2_cost)
  return field2_cost_;
}
void Path::set_field2_cost(double value) {
  set_has_field2_cost();
  field2_cost_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.Path.field2_cost)
}

inline const Path* Path::internal_default_instance() {
  return &Path_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace graphtier
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
