// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/graphtier/NetworkCommands.schema
#ifndef SPATIALOS_SCHEMA_improbable_graphtier_NetworkCommands_schema_17136397261185013275_INCLUDED
#define SPATIALOS_SCHEMA_improbable_graphtier_NetworkCommands_schema_17136397261185013275_INCLUDED
#include <improbable/collections.h>
#include <improbable/math/coordinates.h>
#include <improbable/math/vector3d.h>
#include <improbable/math/vector3f.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>
#include <improbable/graphtier/GraphTierTypes.h>

// Schema forward declarations.
//----------------------------------------------------------------

namespace schema {
namespace improbable {
namespace graphtier {

class NodeToNodeResponse;
class NodeToNodeRequest;
class NetworkCommandsData;

}  // ::improbable
}  // ::graphtier
}  // ::schema

namespace improbable {
namespace graphtier {

// Forward declarations.
//----------------------------------------------------------------

class NetworkCommandsData;
class NodeToNodeRequest;
class NodeToNodeResponse;

namespace detail {
const ::worker::detail::ClientComponentVtable& Vtable_NetworkCommands();
struct GenericCommandObject_NetworkCommands {
  std::uint32_t CommandId;
  ::worker::Variant<
      ::improbable::graphtier::NodeToNodeRequest,
      ::improbable::graphtier::NodeToNodeResponse> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class NetworkCommandsData {
public:
  // Main constructor.
  NetworkCommandsData();

  // Copyable and moveable.
  NetworkCommandsData(NetworkCommandsData&&) = default;
  NetworkCommandsData(const NetworkCommandsData&) = default;
  NetworkCommandsData& operator=(NetworkCommandsData&&) = default;
  NetworkCommandsData& operator=(const NetworkCommandsData&) = default;
  ~NetworkCommandsData() = default;

  bool operator==(const NetworkCommandsData&) const;
  bool operator!=(const NetworkCommandsData&) const;
};

class NodeToNodeRequest {
public:
  // Main constructor.
  NodeToNodeRequest(
      ::worker::EntityId from,
      ::worker::EntityId to);

  // Copyable and moveable.
  NodeToNodeRequest(NodeToNodeRequest&&) = default;
  NodeToNodeRequest(const NodeToNodeRequest&) = default;
  NodeToNodeRequest& operator=(NodeToNodeRequest&&) = default;
  NodeToNodeRequest& operator=(const NodeToNodeRequest&) = default;
  ~NodeToNodeRequest() = default;

  bool operator==(const NodeToNodeRequest&) const;
  bool operator!=(const NodeToNodeRequest&) const;

  // Field from = 1.
  ::worker::EntityId from() const;
  ::worker::EntityId& from();
  NodeToNodeRequest& set_from(::worker::EntityId);

  // Field to = 2.
  ::worker::EntityId to() const;
  ::worker::EntityId& to();
  NodeToNodeRequest& set_to(::worker::EntityId);

private:
  ::worker::EntityId _from;
  ::worker::EntityId _to;
};

class NodeToNodeResponse {
public:
  // Main constructor.
  NodeToNodeResponse(const ::improbable::graphtier::Path& path);

  // Copyable and moveable.
  NodeToNodeResponse(NodeToNodeResponse&&) = default;
  NodeToNodeResponse(const NodeToNodeResponse&) = default;
  NodeToNodeResponse& operator=(NodeToNodeResponse&&) = default;
  NodeToNodeResponse& operator=(const NodeToNodeResponse&) = default;
  ~NodeToNodeResponse() = default;

  bool operator==(const NodeToNodeResponse&) const;
  bool operator!=(const NodeToNodeResponse&) const;

  // Field path = 1.
  const ::improbable::graphtier::Path& path() const;
  ::improbable::graphtier::Path& path();
  NodeToNodeResponse& set_path(const ::improbable::graphtier::Path&);

private:
  ::improbable::graphtier::Path _path;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::graphtier::NetworkCommands;
 *
 *   NetworkCommands::Update update;
 *   connection.SendComponentUpdate< NetworkCommands >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< NetworkCommands >(
 *       [&](const worker::ComponentUpdateOp< NetworkCommands >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         NetworkCommands::Update update = op.GetUpdate();
 *       });
 *
 *   NetworkCommands::Data data = entity.Get< NetworkCommands >();
 */
struct NetworkCommands : ::worker::detail::ComponentMetaclassBase<
    NetworkCommands, detail::Vtable_NetworkCommands> {
  static constexpr const ::worker::ComponentId ComponentId = 8001;
  using Data = ::improbable::graphtier::NetworkCommandsData;
  using GenericCommandObject = detail::GenericCommandObject_NetworkCommands;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::graphtier::NetworkCommandsData object. */
    static Update FromInitialData(const ::improbable::graphtier::NetworkCommandsData& data);

    /**
     * Converts to a ::improbable::graphtier::NetworkCommandsData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::graphtier::NetworkCommandsData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::graphtier::NetworkCommandsData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::graphtier::NetworkCommandsData&) const;
  };

  /**
   * Command metaclasses for the NetworkCommands component.
   * Each metaclass can be supplied as the template parameter to all command-related templated
   * types and methods in the C++ worker API.
  */
  class Commands {
  public:
    class NodeToNode {
    public:
      static constexpr const std::uint32_t CommandId = 1;
      using ComponentMetaclass = NetworkCommands;
      using Request = ::improbable::graphtier::NodeToNodeRequest;
      using Response = ::improbable::graphtier::NodeToNodeResponse;
    };
  };
};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Serialize_NetworkCommandsData(
    const ::improbable::graphtier::NetworkCommandsData&,
    ::schema::improbable::graphtier::NetworkCommandsData&);

::improbable::graphtier::NetworkCommandsData Deserialize_NetworkCommandsData(
    const ::schema::improbable::graphtier::NetworkCommandsData&);

void Serialize_NodeToNodeRequest(
    const ::improbable::graphtier::NodeToNodeRequest&,
    ::schema::improbable::graphtier::NodeToNodeRequest&);

::improbable::graphtier::NodeToNodeRequest Deserialize_NodeToNodeRequest(
    const ::schema::improbable::graphtier::NodeToNodeRequest&);

void Serialize_NodeToNodeResponse(
    const ::improbable::graphtier::NodeToNodeResponse&,
    ::schema::improbable::graphtier::NodeToNodeResponse&);

::improbable::graphtier::NodeToNodeResponse Deserialize_NodeToNodeResponse(
    const ::schema::improbable::graphtier::NodeToNodeResponse&);

}  // ::detail
}  // ::graphtier
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_graphtier_NetworkCommands_schema_17136397261185013275_INCLUDED
