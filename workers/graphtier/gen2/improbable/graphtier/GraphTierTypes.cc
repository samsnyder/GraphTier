// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/graphtier/GraphTierTypes.schema
#include <improbable/graphtier/GraphTierTypes.h>
#include <improbable/entity_state.pb.h>
#include <improbable/graphtier/GraphTierTypes.pb.h>

namespace improbable {
namespace graphtier {

// Implementation of Path.
//----------------------------------------------------------------

Path::Path(
    const ::worker::List< ::improbable::graphtier::Path_PathLeg >& legs,
    double cost)
: _legs{legs}
, _cost{cost} {}

bool Path::operator==(const Path& value) const {
  return
      _legs == value._legs &&
      _cost == value._cost;
}

bool Path::operator!=(const Path& value) const {
  return !operator==(value);
}

const ::worker::List< ::improbable::graphtier::Path_PathLeg >& Path::legs() const {
  return _legs;
}

::worker::List< ::improbable::graphtier::Path_PathLeg >& Path::legs() {
  return _legs;
}

Path& Path::set_legs(const ::worker::List< ::improbable::graphtier::Path_PathLeg >& value) {
  _legs = value;
  return *this;
}

double Path::cost() const {
  return _cost;
}

double& Path::cost() {
  return _cost;
}

Path& Path::set_cost(double value) {
  _cost = value;
  return *this;
}

// Implementation of Path_PathLeg.
//----------------------------------------------------------------

Path_PathLeg::Path_PathLeg(
    ::worker::EntityId from,
    ::worker::EntityId to,
    ::worker::EntityId network_id,
    double cost)
: _from{from}
, _to{to}
, _network_id{network_id}
, _cost{cost} {}

bool Path_PathLeg::operator==(const Path_PathLeg& value) const {
  return
      _from == value._from &&
      _to == value._to &&
      _network_id == value._network_id &&
      _cost == value._cost;
}

bool Path_PathLeg::operator!=(const Path_PathLeg& value) const {
  return !operator==(value);
}

::worker::EntityId Path_PathLeg::from() const {
  return _from;
}

::worker::EntityId& Path_PathLeg::from() {
  return _from;
}

Path_PathLeg& Path_PathLeg::set_from(::worker::EntityId value) {
  _from = value;
  return *this;
}

::worker::EntityId Path_PathLeg::to() const {
  return _to;
}

::worker::EntityId& Path_PathLeg::to() {
  return _to;
}

Path_PathLeg& Path_PathLeg::set_to(::worker::EntityId value) {
  _to = value;
  return *this;
}

::worker::EntityId Path_PathLeg::network_id() const {
  return _network_id;
}

::worker::EntityId& Path_PathLeg::network_id() {
  return _network_id;
}

Path_PathLeg& Path_PathLeg::set_network_id(::worker::EntityId value) {
  _network_id = value;
  return *this;
}

double Path_PathLeg::cost() const {
  return _cost;
}

double& Path_PathLeg::cost() {
  return _cost;
}

Path_PathLeg& Path_PathLeg::set_cost(double value) {
  _cost = value;
  return *this;
}

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Serialize_Path(
    const ::improbable::graphtier::Path& data,
    ::schema::improbable::graphtier::Path& proto) {
  for (const auto& item : data.legs()) {
    ::improbable::graphtier::detail::Serialize_Path_PathLeg(item, *proto.add_field1_legs());
  }
  proto.set_field2_cost(data.cost());
}

::improbable::graphtier::Path Deserialize_Path(
    const ::schema::improbable::graphtier::Path& proto) {
  ::improbable::graphtier::Path result{
      {},
      proto.field2_cost()};
  for (const auto& item : proto.field1_legs()) {
    result.legs().emplace_back(::improbable::graphtier::detail::Deserialize_Path_PathLeg(item));
  }
  return result;
}

void Serialize_Path_PathLeg(
    const ::improbable::graphtier::Path_PathLeg& data,
    ::schema::improbable::graphtier::Path_PathLeg& proto) {
  proto.set_field1_from(data.from());
  proto.set_field2_to(data.to());
  proto.set_field3_network_id(data.network_id());
  proto.set_field4_cost(data.cost());
}

::improbable::graphtier::Path_PathLeg Deserialize_Path_PathLeg(
    const ::schema::improbable::graphtier::Path_PathLeg& proto) {
  ::improbable::graphtier::Path_PathLeg result{
      proto.field1_from(),
      proto.field2_to(),
      proto.field3_network_id(),
      proto.field4_cost()};
  return result;
}

}  // ::detail

}  // ::graphtier
}  // ::improbable
