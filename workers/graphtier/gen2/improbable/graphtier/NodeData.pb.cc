// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/graphtier/NodeData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/graphtier/NodeData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace graphtier {

namespace {

const ::google::protobuf::Descriptor* NetworkAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeDataData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeDataData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeData_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeData_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeData_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeData_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fgraphtier_2fNodeData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fgraphtier_2fNodeData_2eproto() {
  protobuf_AddDesc_improbable_2fgraphtier_2fNodeData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/graphtier/NodeData.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkAttachment_descriptor_ = file->message_type(0);
  static const int NetworkAttachment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAttachment, field1_network_),
  };
  NetworkAttachment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkAttachment_descriptor_,
      NetworkAttachment::internal_default_instance(),
      NetworkAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAttachment, _has_bits_),
      -1,
      -1,
      sizeof(NetworkAttachment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkAttachment, _internal_metadata_));
  NodeDataData_descriptor_ = file->message_type(1);
  static const int NodeDataData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDataData, field1_networks_),
  };
  NodeDataData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeDataData_descriptor_,
      NodeDataData::internal_default_instance(),
      NodeDataData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDataData, _has_bits_),
      -1,
      -1,
      sizeof(NodeDataData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDataData, _internal_metadata_));
  NodeData_descriptor_ = file->message_type(2);
  static const int NodeData_offsets_[1] = {
  };
  NodeData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeData_descriptor_,
      NodeData::internal_default_instance(),
      NodeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, _has_bits_),
      -1,
      -1,
      sizeof(NodeData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, _internal_metadata_));
  NodeData_Events_descriptor_ = NodeData_descriptor_->nested_type(0);
  static const int NodeData_Events_offsets_[1] = {
  };
  NodeData_Events_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeData_Events_descriptor_,
      NodeData_Events::internal_default_instance(),
      NodeData_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData_Events, _has_bits_),
      -1,
      -1,
      sizeof(NodeData_Events),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData_Events, _internal_metadata_));
  NodeData_Commands_descriptor_ = NodeData_descriptor_->nested_type(1);
  static const int NodeData_Commands_offsets_[1] = {
  };
  NodeData_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeData_Commands_descriptor_,
      NodeData_Commands::internal_default_instance(),
      NodeData_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData_Commands, _has_bits_),
      -1,
      -1,
      sizeof(NodeData_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData_Commands, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fgraphtier_2fNodeData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkAttachment_descriptor_, NetworkAttachment::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeDataData_descriptor_, NodeDataData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeData_descriptor_, NodeData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeData_Events_descriptor_, NodeData_Events::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeData_Commands_descriptor_, NodeData_Commands::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fgraphtier_2fNodeData_2eproto() {
  NetworkAttachment_default_instance_.Shutdown();
  delete NetworkAttachment_reflection_;
  NodeDataData_default_instance_.Shutdown();
  delete NodeDataData_reflection_;
  NodeData_default_instance_.Shutdown();
  delete NodeData_reflection_;
  NodeData_Events_default_instance_.Shutdown();
  delete NodeData_Events_reflection_;
  NodeData_Commands_default_instance_.Shutdown();
  delete NodeData_Commands_reflection_;
}

void protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_InitDefaults_improbable_2fentity_5fstate_2eproto();
  NetworkAttachment_default_instance_.DefaultConstruct();
  NodeDataData_default_instance_.DefaultConstruct();
  NodeData_default_instance_.DefaultConstruct();
  NodeData_Events_default_instance_.DefaultConstruct();
  NodeData_Commands_default_instance_.DefaultConstruct();
  NetworkAttachment_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeDataData_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeData_default_instance_.get_mutable()->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityState::internal_default_instance(),
    8006, 11, false, false,
    ::schema::improbable::graphtier::NodeDataData::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityEvent::internal_default_instance(),
    8006, 11, false, false,
    ::schema::improbable::graphtier::NodeData_Events::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityCommand::internal_default_instance(),
    8006, 11, false, false,
    ::schema::improbable::graphtier::NodeData_Commands::internal_default_instance());
  NodeData_Events_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeData_Commands_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto_once_);
void protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto_once_,
                 &protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto_impl);
}
void protobuf_AddDesc_improbable_2fgraphtier_2fNodeData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#improbable/graphtier/NodeData.proto\022\033s"
    "chema.improbable.graphtier\032\035improbable/e"
    "ntity_state.proto\"@\n\021NetworkAttachment\022+"
    "\n\016field1_network\030\001 \001(\003B\023\302\363\030\007network\350\363\030\001\340"
    "\363\030\001\"e\n\014NodeDataData\022U\n\017field1_networks\030\001"
    " \003(\0132..schema.improbable.graphtier.Netwo"
    "rkAttachmentB\014\302\363\030\010networks\"\207\003\n\010NodeData\032"
    "\010\n\006Events\032\n\n\010Commands2g\n\023component_exten"
    "sion\022\036.schema.improbable.EntityState\030\306> "
    "\001(\0132).schema.improbable.graphtier.NodeDa"
    "taData2f\n\017event_extension\022\036.schema.impro"
    "bable.EntityEvent\030\306> \001(\0132,.schema.improb"
    "able.graphtier.NodeData.Events2l\n\021comman"
    "d_extension\022 .schema.improbable.EntityCo"
    "mmand\030\306> \001(\0132..schema.improbable.graphti"
    "er.NodeData.Commands:&\302\363\030\"\n\035improbable.g"
    "raphtier.NodeData\020\306>B\024B\022NodeDataOuterCla"
    "ss", 682);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/graphtier/NodeData.proto", &protobuf_RegisterTypes);
  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fgraphtier_2fNodeData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_improbable_2fgraphtier_2fNodeData_2eproto_once_);
void protobuf_AddDesc_improbable_2fgraphtier_2fNodeData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_improbable_2fgraphtier_2fNodeData_2eproto_once_,
                 &protobuf_AddDesc_improbable_2fgraphtier_2fNodeData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fgraphtier_2fNodeData_2eproto {
  StaticDescriptorInitializer_improbable_2fgraphtier_2fNodeData_2eproto() {
    protobuf_AddDesc_improbable_2fgraphtier_2fNodeData_2eproto();
  }
} static_descriptor_initializer_improbable_2fgraphtier_2fNodeData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkAttachment::kField1NetworkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkAttachment::NetworkAttachment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkAttachment)
}

void NetworkAttachment::InitAsDefaultInstance() {
}

NetworkAttachment::NetworkAttachment(const NetworkAttachment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkAttachment)
}

void NetworkAttachment::SharedCtor() {
  _cached_size_ = 0;
  field1_network_ = GOOGLE_LONGLONG(0);
}

NetworkAttachment::~NetworkAttachment() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkAttachment)
  SharedDtor();
}

void NetworkAttachment::SharedDtor() {
}

void NetworkAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkAttachment_descriptor_;
}

const NetworkAttachment& NetworkAttachment::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkAttachment> NetworkAttachment_default_instance_;

NetworkAttachment* NetworkAttachment::New(::google::protobuf::Arena* arena) const {
  NetworkAttachment* n = new NetworkAttachment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkAttachment)
  field1_network_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 field1_network = 1;
      case 1: {
        if (tag == 8) {
          set_has_field1_network();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field1_network_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkAttachment)
  return false;
#undef DO_
}

void NetworkAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkAttachment)
  // optional int64 field1_network = 1;
  if (has_field1_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field1_network(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkAttachment)
}

::google::protobuf::uint8* NetworkAttachment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkAttachment)
  // optional int64 field1_network = 1;
  if (has_field1_network()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->field1_network(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkAttachment)
  return target;
}

size_t NetworkAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkAttachment)
  size_t total_size = 0;

  // optional int64 field1_network = 1;
  if (has_field1_network()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->field1_network());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkAttachment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkAttachment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkAttachment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkAttachment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkAttachment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkAttachment)
    UnsafeMergeFrom(*source);
  }
}

void NetworkAttachment::MergeFrom(const NetworkAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkAttachment)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkAttachment::UnsafeMergeFrom(const NetworkAttachment& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_network()) {
      set_field1_network(from.field1_network());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkAttachment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkAttachment::CopyFrom(const NetworkAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkAttachment)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkAttachment::IsInitialized() const {

  return true;
}

void NetworkAttachment::Swap(NetworkAttachment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkAttachment::InternalSwap(NetworkAttachment* other) {
  std::swap(field1_network_, other->field1_network_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkAttachment_descriptor_;
  metadata.reflection = NetworkAttachment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkAttachment

// optional int64 field1_network = 1;
bool NetworkAttachment::has_field1_network() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkAttachment::set_has_field1_network() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkAttachment::clear_has_field1_network() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkAttachment::clear_field1_network() {
  field1_network_ = GOOGLE_LONGLONG(0);
  clear_has_field1_network();
}
::google::protobuf::int64 NetworkAttachment::field1_network() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NetworkAttachment.field1_network)
  return field1_network_;
}
void NetworkAttachment::set_field1_network(::google::protobuf::int64 value) {
  set_has_field1_network();
  field1_network_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.NetworkAttachment.field1_network)
}

inline const NetworkAttachment* NetworkAttachment::internal_default_instance() {
  return &NetworkAttachment_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeDataData::kField1NetworksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeDataData::NodeDataData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NodeDataData)
}

void NodeDataData::InitAsDefaultInstance() {
}

NodeDataData::NodeDataData(const NodeDataData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NodeDataData)
}

void NodeDataData::SharedCtor() {
  _cached_size_ = 0;
}

NodeDataData::~NodeDataData() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NodeDataData)
  SharedDtor();
}

void NodeDataData::SharedDtor() {
}

void NodeDataData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeDataData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeDataData_descriptor_;
}

const NodeDataData& NodeDataData::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeDataData> NodeDataData_default_instance_;

NodeDataData* NodeDataData::New(::google::protobuf::Arena* arena) const {
  NodeDataData* n = new NodeDataData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeDataData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NodeDataData)
  field1_networks_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeDataData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NodeDataData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .schema.improbable.graphtier.NetworkAttachment field1_networks = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_field1_networks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_field1_networks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_field1_networks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NodeDataData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NodeDataData)
  return false;
#undef DO_
}

void NodeDataData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NodeDataData)
  // repeated .schema.improbable.graphtier.NetworkAttachment field1_networks = 1;
  for (unsigned int i = 0, n = this->field1_networks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field1_networks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NodeDataData)
}

::google::protobuf::uint8* NodeDataData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NodeDataData)
  // repeated .schema.improbable.graphtier.NetworkAttachment field1_networks = 1;
  for (unsigned int i = 0, n = this->field1_networks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->field1_networks(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NodeDataData)
  return target;
}

size_t NodeDataData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NodeDataData)
  size_t total_size = 0;

  // repeated .schema.improbable.graphtier.NetworkAttachment field1_networks = 1;
  {
    unsigned int count = this->field1_networks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field1_networks(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDataData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NodeDataData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeDataData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeDataData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NodeDataData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NodeDataData)
    UnsafeMergeFrom(*source);
  }
}

void NodeDataData::MergeFrom(const NodeDataData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NodeDataData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeDataData::UnsafeMergeFrom(const NodeDataData& from) {
  GOOGLE_DCHECK(&from != this);
  field1_networks_.MergeFrom(from.field1_networks_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NodeDataData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NodeDataData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDataData::CopyFrom(const NodeDataData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NodeDataData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeDataData::IsInitialized() const {

  return true;
}

void NodeDataData::Swap(NodeDataData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeDataData::InternalSwap(NodeDataData* other) {
  field1_networks_.UnsafeArenaSwap(&other->field1_networks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeDataData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeDataData_descriptor_;
  metadata.reflection = NodeDataData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeDataData

// repeated .schema.improbable.graphtier.NetworkAttachment field1_networks = 1;
int NodeDataData::field1_networks_size() const {
  return field1_networks_.size();
}
void NodeDataData::clear_field1_networks() {
  field1_networks_.Clear();
}
const ::schema::improbable::graphtier::NetworkAttachment& NodeDataData::field1_networks(int index) const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NodeDataData.field1_networks)
  return field1_networks_.Get(index);
}
::schema::improbable::graphtier::NetworkAttachment* NodeDataData::mutable_field1_networks(int index) {
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.NodeDataData.field1_networks)
  return field1_networks_.Mutable(index);
}
::schema::improbable::graphtier::NetworkAttachment* NodeDataData::add_field1_networks() {
  // @@protoc_insertion_point(field_add:schema.improbable.graphtier.NodeDataData.field1_networks)
  return field1_networks_.Add();
}
::google::protobuf::RepeatedPtrField< ::schema::improbable::graphtier::NetworkAttachment >*
NodeDataData::mutable_field1_networks() {
  // @@protoc_insertion_point(field_mutable_list:schema.improbable.graphtier.NodeDataData.field1_networks)
  return &field1_networks_;
}
const ::google::protobuf::RepeatedPtrField< ::schema::improbable::graphtier::NetworkAttachment >&
NodeDataData::field1_networks() const {
  // @@protoc_insertion_point(field_list:schema.improbable.graphtier.NodeDataData.field1_networks)
  return field1_networks_;
}

inline const NodeDataData* NodeDataData::internal_default_instance() {
  return &NodeDataData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeData_Events::NodeData_Events()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NodeData.Events)
}

void NodeData_Events::InitAsDefaultInstance() {
}

NodeData_Events::NodeData_Events(const NodeData_Events& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NodeData.Events)
}

void NodeData_Events::SharedCtor() {
  _cached_size_ = 0;
}

NodeData_Events::~NodeData_Events() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NodeData.Events)
  SharedDtor();
}

void NodeData_Events::SharedDtor() {
}

void NodeData_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeData_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeData_Events_descriptor_;
}

const NodeData_Events& NodeData_Events::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeData_Events> NodeData_Events_default_instance_;

NodeData_Events* NodeData_Events::New(::google::protobuf::Arena* arena) const {
  NodeData_Events* n = new NodeData_Events;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeData_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NodeData.Events)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeData_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NodeData.Events)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NodeData.Events)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NodeData.Events)
  return false;
#undef DO_
}

void NodeData_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NodeData.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NodeData.Events)
}

::google::protobuf::uint8* NodeData_Events::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NodeData.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NodeData.Events)
  return target;
}

size_t NodeData_Events::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NodeData.Events)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeData_Events::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NodeData.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeData_Events* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeData_Events>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NodeData.Events)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NodeData.Events)
    UnsafeMergeFrom(*source);
  }
}

void NodeData_Events::MergeFrom(const NodeData_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NodeData.Events)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeData_Events::UnsafeMergeFrom(const NodeData_Events& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NodeData_Events::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NodeData.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeData_Events::CopyFrom(const NodeData_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NodeData.Events)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeData_Events::IsInitialized() const {

  return true;
}

void NodeData_Events::Swap(NodeData_Events* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeData_Events::InternalSwap(NodeData_Events* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeData_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeData_Events_descriptor_;
  metadata.reflection = NodeData_Events_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeData_Commands::NodeData_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NodeData.Commands)
}

void NodeData_Commands::InitAsDefaultInstance() {
}

NodeData_Commands::NodeData_Commands(const NodeData_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NodeData.Commands)
}

void NodeData_Commands::SharedCtor() {
  _cached_size_ = 0;
}

NodeData_Commands::~NodeData_Commands() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NodeData.Commands)
  SharedDtor();
}

void NodeData_Commands::SharedDtor() {
}

void NodeData_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeData_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeData_Commands_descriptor_;
}

const NodeData_Commands& NodeData_Commands::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeData_Commands> NodeData_Commands_default_instance_;

NodeData_Commands* NodeData_Commands::New(::google::protobuf::Arena* arena) const {
  NodeData_Commands* n = new NodeData_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeData_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NodeData.Commands)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeData_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NodeData.Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NodeData.Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NodeData.Commands)
  return false;
#undef DO_
}

void NodeData_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NodeData.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NodeData.Commands)
}

::google::protobuf::uint8* NodeData_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NodeData.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NodeData.Commands)
  return target;
}

size_t NodeData_Commands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NodeData.Commands)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeData_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NodeData.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeData_Commands* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeData_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NodeData.Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NodeData.Commands)
    UnsafeMergeFrom(*source);
  }
}

void NodeData_Commands::MergeFrom(const NodeData_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NodeData.Commands)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeData_Commands::UnsafeMergeFrom(const NodeData_Commands& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NodeData_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NodeData.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeData_Commands::CopyFrom(const NodeData_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NodeData.Commands)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeData_Commands::IsInitialized() const {

  return true;
}

void NodeData_Commands::Swap(NodeData_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeData_Commands::InternalSwap(NodeData_Commands* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeData_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeData_Commands_descriptor_;
  metadata.reflection = NodeData_Commands_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeData::kComponentExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NodeDataData >, 11, false >
  NodeData::component_extension(kComponentExtensionFieldNumber, *::schema::improbable::graphtier::NodeDataData::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeData::kEventExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NodeData_Events >, 11, false >
  NodeData::event_extension(kEventExtensionFieldNumber, *::schema::improbable::graphtier::NodeData_Events::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeData::kCommandExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NodeData_Commands >, 11, false >
  NodeData::command_extension(kCommandExtensionFieldNumber, *::schema::improbable::graphtier::NodeData_Commands::internal_default_instance());
NodeData::NodeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NodeData)
}

void NodeData::InitAsDefaultInstance() {
}

NodeData::NodeData(const NodeData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NodeData)
}

void NodeData::SharedCtor() {
  _cached_size_ = 0;
}

NodeData::~NodeData() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NodeData)
  SharedDtor();
}

void NodeData::SharedDtor() {
}

void NodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeData_descriptor_;
}

const NodeData& NodeData::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeData> NodeData_default_instance_;

NodeData* NodeData::New(::google::protobuf::Arena* arena) const {
  NodeData* n = new NodeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NodeData)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NodeData)
  return false;
#undef DO_
}

void NodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NodeData)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NodeData)
}

::google::protobuf::uint8* NodeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NodeData)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NodeData)
  return target;
}

size_t NodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NodeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NodeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NodeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NodeData)
    UnsafeMergeFrom(*source);
  }
}

void NodeData::MergeFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NodeData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeData::UnsafeMergeFrom(const NodeData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NodeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeData::CopyFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NodeData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeData::IsInitialized() const {

  return true;
}

void NodeData::Swap(NodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeData::InternalSwap(NodeData* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeData_descriptor_;
  metadata.reflection = NodeData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeData_Events

inline const NodeData_Events* NodeData_Events::internal_default_instance() {
  return &NodeData_Events_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeData_Commands

inline const NodeData_Commands* NodeData_Commands::internal_default_instance() {
  return &NodeData_Commands_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeData

inline const NodeData* NodeData::internal_default_instance() {
  return &NodeData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace graphtier
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
