// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/graphtier/NodeCommands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/graphtier/NodeCommands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace graphtier {

namespace {

const ::google::protobuf::Descriptor* RouteFindResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteFindResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteFindRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteFindRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeCommandsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeCommandsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeCommands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeCommands_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeCommands_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeCommands_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeCommands_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeCommands_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fgraphtier_2fNodeCommands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fgraphtier_2fNodeCommands_2eproto() {
  protobuf_AddDesc_improbable_2fgraphtier_2fNodeCommands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/graphtier/NodeCommands.proto");
  GOOGLE_CHECK(file != NULL);
  RouteFindResponse_descriptor_ = file->message_type(0);
  static const int RouteFindResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteFindResponse, field1_path_),
  };
  RouteFindResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RouteFindResponse_descriptor_,
      RouteFindResponse::internal_default_instance(),
      RouteFindResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteFindResponse, _has_bits_),
      -1,
      -1,
      sizeof(RouteFindResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteFindResponse, _internal_metadata_));
  RouteFindRequest_descriptor_ = file->message_type(1);
  static const int RouteFindRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteFindRequest, field2_to_),
  };
  RouteFindRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RouteFindRequest_descriptor_,
      RouteFindRequest::internal_default_instance(),
      RouteFindRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteFindRequest, _has_bits_),
      -1,
      -1,
      sizeof(RouteFindRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteFindRequest, _internal_metadata_));
  NodeCommandsData_descriptor_ = file->message_type(2);
  static const int NodeCommandsData_offsets_[1] = {
  };
  NodeCommandsData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeCommandsData_descriptor_,
      NodeCommandsData::internal_default_instance(),
      NodeCommandsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCommandsData, _has_bits_),
      -1,
      -1,
      sizeof(NodeCommandsData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCommandsData, _internal_metadata_));
  NodeCommands_descriptor_ = file->message_type(3);
  static const int NodeCommands_offsets_[1] = {
  };
  NodeCommands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeCommands_descriptor_,
      NodeCommands::internal_default_instance(),
      NodeCommands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCommands, _has_bits_),
      -1,
      -1,
      sizeof(NodeCommands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCommands, _internal_metadata_));
  NodeCommands_Events_descriptor_ = NodeCommands_descriptor_->nested_type(0);
  static const int NodeCommands_Events_offsets_[1] = {
  };
  NodeCommands_Events_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeCommands_Events_descriptor_,
      NodeCommands_Events::internal_default_instance(),
      NodeCommands_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCommands_Events, _has_bits_),
      -1,
      -1,
      sizeof(NodeCommands_Events),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCommands_Events, _internal_metadata_));
  NodeCommands_Commands_descriptor_ = NodeCommands_descriptor_->nested_type(1);
  static const int NodeCommands_Commands_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCommands_Commands, command_find_route_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCommands_Commands, command_find_route_response_),
  };
  NodeCommands_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeCommands_Commands_descriptor_,
      NodeCommands_Commands::internal_default_instance(),
      NodeCommands_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCommands_Commands, _has_bits_),
      -1,
      -1,
      sizeof(NodeCommands_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeCommands_Commands, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fgraphtier_2fNodeCommands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RouteFindResponse_descriptor_, RouteFindResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RouteFindRequest_descriptor_, RouteFindRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeCommandsData_descriptor_, NodeCommandsData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeCommands_descriptor_, NodeCommands::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeCommands_Events_descriptor_, NodeCommands_Events::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeCommands_Commands_descriptor_, NodeCommands_Commands::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fgraphtier_2fNodeCommands_2eproto() {
  RouteFindResponse_default_instance_.Shutdown();
  delete RouteFindResponse_reflection_;
  RouteFindRequest_default_instance_.Shutdown();
  delete RouteFindRequest_reflection_;
  NodeCommandsData_default_instance_.Shutdown();
  delete NodeCommandsData_reflection_;
  NodeCommands_default_instance_.Shutdown();
  delete NodeCommands_reflection_;
  NodeCommands_Events_default_instance_.Shutdown();
  delete NodeCommands_Events_reflection_;
  NodeCommands_Commands_default_instance_.Shutdown();
  delete NodeCommands_Commands_reflection_;
}

void protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_InitDefaults_improbable_2fentity_5fstate_2eproto();
  ::schema::improbable::graphtier::protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  RouteFindResponse_default_instance_.DefaultConstruct();
  RouteFindRequest_default_instance_.DefaultConstruct();
  NodeCommandsData_default_instance_.DefaultConstruct();
  NodeCommands_default_instance_.DefaultConstruct();
  NodeCommands_Events_default_instance_.DefaultConstruct();
  NodeCommands_Commands_default_instance_.DefaultConstruct();
  RouteFindResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RouteFindRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeCommandsData_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeCommands_default_instance_.get_mutable()->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityState::internal_default_instance(),
    8005, 11, false, false,
    ::schema::improbable::graphtier::NodeCommandsData::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityEvent::internal_default_instance(),
    8005, 11, false, false,
    ::schema::improbable::graphtier::NodeCommands_Events::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityCommand::internal_default_instance(),
    8005, 11, false, false,
    ::schema::improbable::graphtier::NodeCommands_Commands::internal_default_instance());
  NodeCommands_Events_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeCommands_Commands_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto_once_);
void protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto_once_,
                 &protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto_impl);
}
void protobuf_AddDesc_improbable_2fgraphtier_2fNodeCommands_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'improbable/graphtier/NodeCommands.prot"
    "o\022\033schema.improbable.graphtier\032\035improbab"
    "le/entity_state.proto\032)improbable/grapht"
    "ier/GraphTierTypes.proto\"Y\n\021RouteFindRes"
    "ponse\022D\n\013field1_path\030\001 \001(\0132!.schema.impr"
    "obable.graphtier.PathB\014\302\363\030\004path\340\363\030\001\"1\n\020R"
    "outeFindRequest\022\035\n\tfield2_to\030\002 \001(\003B\n\302\363\030\002"
    "to\350\363\030\001\"\022\n\020NodeCommandsData\"\304\004\n\014NodeComma"
    "nds\032\010\n\006Events\032\262\001\n\010Commands\022Q\n\032command_fi"
    "nd_route_request\030\001 \001(\0132-.schema.improbab"
    "le.graphtier.RouteFindRequest\022S\n\033command"
    "_find_route_response\030\002 \001(\0132..schema.impr"
    "obable.graphtier.RouteFindResponse2k\n\023co"
    "mponent_extension\022\036.schema.improbable.En"
    "tityState\030\305> \001(\0132-.schema.improbable.gra"
    "phtier.NodeCommandsData2j\n\017event_extensi"
    "on\022\036.schema.improbable.EntityEvent\030\305> \001("
    "\01320.schema.improbable.graphtier.NodeComm"
    "ands.Events2p\n\021command_extension\022 .schem"
    "a.improbable.EntityCommand\030\305> \001(\01322.sche"
    "ma.improbable.graphtier.NodeCommands.Com"
    "mands:*\302\363\030&\n!improbable.graphtier.NodeCo"
    "mmands\020\305>B\030B\026NodeCommandsOuterClass", 915);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/graphtier/NodeCommands.proto", &protobuf_RegisterTypes);
  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::schema::improbable::graphtier::protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fgraphtier_2fNodeCommands_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_improbable_2fgraphtier_2fNodeCommands_2eproto_once_);
void protobuf_AddDesc_improbable_2fgraphtier_2fNodeCommands_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_improbable_2fgraphtier_2fNodeCommands_2eproto_once_,
                 &protobuf_AddDesc_improbable_2fgraphtier_2fNodeCommands_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fgraphtier_2fNodeCommands_2eproto {
  StaticDescriptorInitializer_improbable_2fgraphtier_2fNodeCommands_2eproto() {
    protobuf_AddDesc_improbable_2fgraphtier_2fNodeCommands_2eproto();
  }
} static_descriptor_initializer_improbable_2fgraphtier_2fNodeCommands_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteFindResponse::kField1PathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteFindResponse::RouteFindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.RouteFindResponse)
}

void RouteFindResponse::InitAsDefaultInstance() {
  field1_path_ = const_cast< ::schema::improbable::graphtier::Path*>(
      ::schema::improbable::graphtier::Path::internal_default_instance());
}

RouteFindResponse::RouteFindResponse(const RouteFindResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.RouteFindResponse)
}

void RouteFindResponse::SharedCtor() {
  _cached_size_ = 0;
  field1_path_ = NULL;
}

RouteFindResponse::~RouteFindResponse() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.RouteFindResponse)
  SharedDtor();
}

void RouteFindResponse::SharedDtor() {
  if (this != &RouteFindResponse_default_instance_.get()) {
    delete field1_path_;
  }
}

void RouteFindResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteFindResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteFindResponse_descriptor_;
}

const RouteFindResponse& RouteFindResponse::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RouteFindResponse> RouteFindResponse_default_instance_;

RouteFindResponse* RouteFindResponse::New(::google::protobuf::Arena* arena) const {
  RouteFindResponse* n = new RouteFindResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteFindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.RouteFindResponse)
  if (has_field1_path()) {
    if (field1_path_ != NULL) field1_path_->::schema::improbable::graphtier::Path::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RouteFindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.RouteFindResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .schema.improbable.graphtier.Path field1_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field1_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.RouteFindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.RouteFindResponse)
  return false;
#undef DO_
}

void RouteFindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.RouteFindResponse)
  // optional .schema.improbable.graphtier.Path field1_path = 1;
  if (has_field1_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field1_path_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.RouteFindResponse)
}

::google::protobuf::uint8* RouteFindResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.RouteFindResponse)
  // optional .schema.improbable.graphtier.Path field1_path = 1;
  if (has_field1_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field1_path_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.RouteFindResponse)
  return target;
}

size_t RouteFindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.RouteFindResponse)
  size_t total_size = 0;

  // optional .schema.improbable.graphtier.Path field1_path = 1;
  if (has_field1_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field1_path_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteFindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.RouteFindResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RouteFindResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteFindResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.RouteFindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.RouteFindResponse)
    UnsafeMergeFrom(*source);
  }
}

void RouteFindResponse::MergeFrom(const RouteFindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.RouteFindResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RouteFindResponse::UnsafeMergeFrom(const RouteFindResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_path()) {
      mutable_field1_path()->::schema::improbable::graphtier::Path::MergeFrom(from.field1_path());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RouteFindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.RouteFindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteFindResponse::CopyFrom(const RouteFindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.RouteFindResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RouteFindResponse::IsInitialized() const {

  return true;
}

void RouteFindResponse::Swap(RouteFindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteFindResponse::InternalSwap(RouteFindResponse* other) {
  std::swap(field1_path_, other->field1_path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteFindResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteFindResponse_descriptor_;
  metadata.reflection = RouteFindResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteFindResponse

// optional .schema.improbable.graphtier.Path field1_path = 1;
bool RouteFindResponse::has_field1_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RouteFindResponse::set_has_field1_path() {
  _has_bits_[0] |= 0x00000001u;
}
void RouteFindResponse::clear_has_field1_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void RouteFindResponse::clear_field1_path() {
  if (field1_path_ != NULL) field1_path_->::schema::improbable::graphtier::Path::Clear();
  clear_has_field1_path();
}
const ::schema::improbable::graphtier::Path& RouteFindResponse::field1_path() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.RouteFindResponse.field1_path)
  return field1_path_ != NULL ? *field1_path_
                         : *::schema::improbable::graphtier::Path::internal_default_instance();
}
::schema::improbable::graphtier::Path* RouteFindResponse::mutable_field1_path() {
  set_has_field1_path();
  if (field1_path_ == NULL) {
    field1_path_ = new ::schema::improbable::graphtier::Path;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.RouteFindResponse.field1_path)
  return field1_path_;
}
::schema::improbable::graphtier::Path* RouteFindResponse::release_field1_path() {
  // @@protoc_insertion_point(field_release:schema.improbable.graphtier.RouteFindResponse.field1_path)
  clear_has_field1_path();
  ::schema::improbable::graphtier::Path* temp = field1_path_;
  field1_path_ = NULL;
  return temp;
}
void RouteFindResponse::set_allocated_field1_path(::schema::improbable::graphtier::Path* field1_path) {
  delete field1_path_;
  field1_path_ = field1_path;
  if (field1_path) {
    set_has_field1_path();
  } else {
    clear_has_field1_path();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.graphtier.RouteFindResponse.field1_path)
}

inline const RouteFindResponse* RouteFindResponse::internal_default_instance() {
  return &RouteFindResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteFindRequest::kField2ToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteFindRequest::RouteFindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.RouteFindRequest)
}

void RouteFindRequest::InitAsDefaultInstance() {
}

RouteFindRequest::RouteFindRequest(const RouteFindRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.RouteFindRequest)
}

void RouteFindRequest::SharedCtor() {
  _cached_size_ = 0;
  field2_to_ = GOOGLE_LONGLONG(0);
}

RouteFindRequest::~RouteFindRequest() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.RouteFindRequest)
  SharedDtor();
}

void RouteFindRequest::SharedDtor() {
}

void RouteFindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteFindRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteFindRequest_descriptor_;
}

const RouteFindRequest& RouteFindRequest::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RouteFindRequest> RouteFindRequest_default_instance_;

RouteFindRequest* RouteFindRequest::New(::google::protobuf::Arena* arena) const {
  RouteFindRequest* n = new RouteFindRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteFindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.RouteFindRequest)
  field2_to_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RouteFindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.RouteFindRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 field2_to = 2;
      case 2: {
        if (tag == 16) {
          set_has_field2_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field2_to_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.RouteFindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.RouteFindRequest)
  return false;
#undef DO_
}

void RouteFindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.RouteFindRequest)
  // optional int64 field2_to = 2;
  if (has_field2_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->field2_to(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.RouteFindRequest)
}

::google::protobuf::uint8* RouteFindRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.RouteFindRequest)
  // optional int64 field2_to = 2;
  if (has_field2_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->field2_to(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.RouteFindRequest)
  return target;
}

size_t RouteFindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.RouteFindRequest)
  size_t total_size = 0;

  // optional int64 field2_to = 2;
  if (has_field2_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->field2_to());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteFindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.RouteFindRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RouteFindRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteFindRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.RouteFindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.RouteFindRequest)
    UnsafeMergeFrom(*source);
  }
}

void RouteFindRequest::MergeFrom(const RouteFindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.RouteFindRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RouteFindRequest::UnsafeMergeFrom(const RouteFindRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field2_to()) {
      set_field2_to(from.field2_to());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RouteFindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.RouteFindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteFindRequest::CopyFrom(const RouteFindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.RouteFindRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RouteFindRequest::IsInitialized() const {

  return true;
}

void RouteFindRequest::Swap(RouteFindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteFindRequest::InternalSwap(RouteFindRequest* other) {
  std::swap(field2_to_, other->field2_to_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteFindRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteFindRequest_descriptor_;
  metadata.reflection = RouteFindRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteFindRequest

// optional int64 field2_to = 2;
bool RouteFindRequest::has_field2_to() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RouteFindRequest::set_has_field2_to() {
  _has_bits_[0] |= 0x00000001u;
}
void RouteFindRequest::clear_has_field2_to() {
  _has_bits_[0] &= ~0x00000001u;
}
void RouteFindRequest::clear_field2_to() {
  field2_to_ = GOOGLE_LONGLONG(0);
  clear_has_field2_to();
}
::google::protobuf::int64 RouteFindRequest::field2_to() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.RouteFindRequest.field2_to)
  return field2_to_;
}
void RouteFindRequest::set_field2_to(::google::protobuf::int64 value) {
  set_has_field2_to();
  field2_to_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.RouteFindRequest.field2_to)
}

inline const RouteFindRequest* RouteFindRequest::internal_default_instance() {
  return &RouteFindRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeCommandsData::NodeCommandsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NodeCommandsData)
}

void NodeCommandsData::InitAsDefaultInstance() {
}

NodeCommandsData::NodeCommandsData(const NodeCommandsData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NodeCommandsData)
}

void NodeCommandsData::SharedCtor() {
  _cached_size_ = 0;
}

NodeCommandsData::~NodeCommandsData() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NodeCommandsData)
  SharedDtor();
}

void NodeCommandsData::SharedDtor() {
}

void NodeCommandsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeCommandsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeCommandsData_descriptor_;
}

const NodeCommandsData& NodeCommandsData::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeCommandsData> NodeCommandsData_default_instance_;

NodeCommandsData* NodeCommandsData::New(::google::protobuf::Arena* arena) const {
  NodeCommandsData* n = new NodeCommandsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeCommandsData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NodeCommandsData)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeCommandsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NodeCommandsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NodeCommandsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NodeCommandsData)
  return false;
#undef DO_
}

void NodeCommandsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NodeCommandsData)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NodeCommandsData)
}

::google::protobuf::uint8* NodeCommandsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NodeCommandsData)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NodeCommandsData)
  return target;
}

size_t NodeCommandsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NodeCommandsData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeCommandsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NodeCommandsData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeCommandsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeCommandsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NodeCommandsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NodeCommandsData)
    UnsafeMergeFrom(*source);
  }
}

void NodeCommandsData::MergeFrom(const NodeCommandsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NodeCommandsData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeCommandsData::UnsafeMergeFrom(const NodeCommandsData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NodeCommandsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NodeCommandsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeCommandsData::CopyFrom(const NodeCommandsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NodeCommandsData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeCommandsData::IsInitialized() const {

  return true;
}

void NodeCommandsData::Swap(NodeCommandsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeCommandsData::InternalSwap(NodeCommandsData* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeCommandsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeCommandsData_descriptor_;
  metadata.reflection = NodeCommandsData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeCommandsData

inline const NodeCommandsData* NodeCommandsData::internal_default_instance() {
  return &NodeCommandsData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeCommands_Events::NodeCommands_Events()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NodeCommands.Events)
}

void NodeCommands_Events::InitAsDefaultInstance() {
}

NodeCommands_Events::NodeCommands_Events(const NodeCommands_Events& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NodeCommands.Events)
}

void NodeCommands_Events::SharedCtor() {
  _cached_size_ = 0;
}

NodeCommands_Events::~NodeCommands_Events() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NodeCommands.Events)
  SharedDtor();
}

void NodeCommands_Events::SharedDtor() {
}

void NodeCommands_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeCommands_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeCommands_Events_descriptor_;
}

const NodeCommands_Events& NodeCommands_Events::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeCommands_Events> NodeCommands_Events_default_instance_;

NodeCommands_Events* NodeCommands_Events::New(::google::protobuf::Arena* arena) const {
  NodeCommands_Events* n = new NodeCommands_Events;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeCommands_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NodeCommands.Events)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeCommands_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NodeCommands.Events)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NodeCommands.Events)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NodeCommands.Events)
  return false;
#undef DO_
}

void NodeCommands_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NodeCommands.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NodeCommands.Events)
}

::google::protobuf::uint8* NodeCommands_Events::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NodeCommands.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NodeCommands.Events)
  return target;
}

size_t NodeCommands_Events::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NodeCommands.Events)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeCommands_Events::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NodeCommands.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeCommands_Events* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeCommands_Events>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NodeCommands.Events)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NodeCommands.Events)
    UnsafeMergeFrom(*source);
  }
}

void NodeCommands_Events::MergeFrom(const NodeCommands_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NodeCommands.Events)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeCommands_Events::UnsafeMergeFrom(const NodeCommands_Events& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NodeCommands_Events::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NodeCommands.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeCommands_Events::CopyFrom(const NodeCommands_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NodeCommands.Events)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeCommands_Events::IsInitialized() const {

  return true;
}

void NodeCommands_Events::Swap(NodeCommands_Events* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeCommands_Events::InternalSwap(NodeCommands_Events* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeCommands_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeCommands_Events_descriptor_;
  metadata.reflection = NodeCommands_Events_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeCommands_Commands::kCommandFindRouteRequestFieldNumber;
const int NodeCommands_Commands::kCommandFindRouteResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeCommands_Commands::NodeCommands_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NodeCommands.Commands)
}

void NodeCommands_Commands::InitAsDefaultInstance() {
  command_find_route_request_ = const_cast< ::schema::improbable::graphtier::RouteFindRequest*>(
      ::schema::improbable::graphtier::RouteFindRequest::internal_default_instance());
  command_find_route_response_ = const_cast< ::schema::improbable::graphtier::RouteFindResponse*>(
      ::schema::improbable::graphtier::RouteFindResponse::internal_default_instance());
}

NodeCommands_Commands::NodeCommands_Commands(const NodeCommands_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NodeCommands.Commands)
}

void NodeCommands_Commands::SharedCtor() {
  _cached_size_ = 0;
  command_find_route_request_ = NULL;
  command_find_route_response_ = NULL;
}

NodeCommands_Commands::~NodeCommands_Commands() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NodeCommands.Commands)
  SharedDtor();
}

void NodeCommands_Commands::SharedDtor() {
  if (this != &NodeCommands_Commands_default_instance_.get()) {
    delete command_find_route_request_;
    delete command_find_route_response_;
  }
}

void NodeCommands_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeCommands_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeCommands_Commands_descriptor_;
}

const NodeCommands_Commands& NodeCommands_Commands::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeCommands_Commands> NodeCommands_Commands_default_instance_;

NodeCommands_Commands* NodeCommands_Commands::New(::google::protobuf::Arena* arena) const {
  NodeCommands_Commands* n = new NodeCommands_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeCommands_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NodeCommands.Commands)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_command_find_route_request()) {
      if (command_find_route_request_ != NULL) command_find_route_request_->::schema::improbable::graphtier::RouteFindRequest::Clear();
    }
    if (has_command_find_route_response()) {
      if (command_find_route_response_ != NULL) command_find_route_response_->::schema::improbable::graphtier::RouteFindResponse::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeCommands_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NodeCommands.Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .schema.improbable.graphtier.RouteFindRequest command_find_route_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_find_route_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_command_find_route_response;
        break;
      }

      // optional .schema.improbable.graphtier.RouteFindResponse command_find_route_response = 2;
      case 2: {
        if (tag == 18) {
         parse_command_find_route_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_find_route_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NodeCommands.Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NodeCommands.Commands)
  return false;
#undef DO_
}

void NodeCommands_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NodeCommands.Commands)
  // optional .schema.improbable.graphtier.RouteFindRequest command_find_route_request = 1;
  if (has_command_find_route_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->command_find_route_request_, output);
  }

  // optional .schema.improbable.graphtier.RouteFindResponse command_find_route_response = 2;
  if (has_command_find_route_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->command_find_route_response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NodeCommands.Commands)
}

::google::protobuf::uint8* NodeCommands_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NodeCommands.Commands)
  // optional .schema.improbable.graphtier.RouteFindRequest command_find_route_request = 1;
  if (has_command_find_route_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->command_find_route_request_, false, target);
  }

  // optional .schema.improbable.graphtier.RouteFindResponse command_find_route_response = 2;
  if (has_command_find_route_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->command_find_route_response_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NodeCommands.Commands)
  return target;
}

size_t NodeCommands_Commands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NodeCommands.Commands)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .schema.improbable.graphtier.RouteFindRequest command_find_route_request = 1;
    if (has_command_find_route_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->command_find_route_request_);
    }

    // optional .schema.improbable.graphtier.RouteFindResponse command_find_route_response = 2;
    if (has_command_find_route_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->command_find_route_response_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeCommands_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NodeCommands.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeCommands_Commands* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeCommands_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NodeCommands.Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NodeCommands.Commands)
    UnsafeMergeFrom(*source);
  }
}

void NodeCommands_Commands::MergeFrom(const NodeCommands_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NodeCommands.Commands)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeCommands_Commands::UnsafeMergeFrom(const NodeCommands_Commands& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command_find_route_request()) {
      mutable_command_find_route_request()->::schema::improbable::graphtier::RouteFindRequest::MergeFrom(from.command_find_route_request());
    }
    if (from.has_command_find_route_response()) {
      mutable_command_find_route_response()->::schema::improbable::graphtier::RouteFindResponse::MergeFrom(from.command_find_route_response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NodeCommands_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NodeCommands.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeCommands_Commands::CopyFrom(const NodeCommands_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NodeCommands.Commands)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeCommands_Commands::IsInitialized() const {

  return true;
}

void NodeCommands_Commands::Swap(NodeCommands_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeCommands_Commands::InternalSwap(NodeCommands_Commands* other) {
  std::swap(command_find_route_request_, other->command_find_route_request_);
  std::swap(command_find_route_response_, other->command_find_route_response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeCommands_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeCommands_Commands_descriptor_;
  metadata.reflection = NodeCommands_Commands_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeCommands::kComponentExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NodeCommandsData >, 11, false >
  NodeCommands::component_extension(kComponentExtensionFieldNumber, *::schema::improbable::graphtier::NodeCommandsData::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeCommands::kEventExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NodeCommands_Events >, 11, false >
  NodeCommands::event_extension(kEventExtensionFieldNumber, *::schema::improbable::graphtier::NodeCommands_Events::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeCommands::kCommandExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NodeCommands_Commands >, 11, false >
  NodeCommands::command_extension(kCommandExtensionFieldNumber, *::schema::improbable::graphtier::NodeCommands_Commands::internal_default_instance());
NodeCommands::NodeCommands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NodeCommands)
}

void NodeCommands::InitAsDefaultInstance() {
}

NodeCommands::NodeCommands(const NodeCommands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NodeCommands)
}

void NodeCommands::SharedCtor() {
  _cached_size_ = 0;
}

NodeCommands::~NodeCommands() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NodeCommands)
  SharedDtor();
}

void NodeCommands::SharedDtor() {
}

void NodeCommands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeCommands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeCommands_descriptor_;
}

const NodeCommands& NodeCommands::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNodeCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeCommands> NodeCommands_default_instance_;

NodeCommands* NodeCommands::New(::google::protobuf::Arena* arena) const {
  NodeCommands* n = new NodeCommands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeCommands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NodeCommands)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeCommands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NodeCommands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NodeCommands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NodeCommands)
  return false;
#undef DO_
}

void NodeCommands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NodeCommands)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NodeCommands)
}

::google::protobuf::uint8* NodeCommands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NodeCommands)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NodeCommands)
  return target;
}

size_t NodeCommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NodeCommands)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeCommands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NodeCommands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeCommands* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeCommands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NodeCommands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NodeCommands)
    UnsafeMergeFrom(*source);
  }
}

void NodeCommands::MergeFrom(const NodeCommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NodeCommands)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeCommands::UnsafeMergeFrom(const NodeCommands& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NodeCommands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NodeCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeCommands::CopyFrom(const NodeCommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NodeCommands)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeCommands::IsInitialized() const {

  return true;
}

void NodeCommands::Swap(NodeCommands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeCommands::InternalSwap(NodeCommands* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeCommands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeCommands_descriptor_;
  metadata.reflection = NodeCommands_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeCommands_Events

inline const NodeCommands_Events* NodeCommands_Events::internal_default_instance() {
  return &NodeCommands_Events_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeCommands_Commands

// optional .schema.improbable.graphtier.RouteFindRequest command_find_route_request = 1;
bool NodeCommands_Commands::has_command_find_route_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeCommands_Commands::set_has_command_find_route_request() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeCommands_Commands::clear_has_command_find_route_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeCommands_Commands::clear_command_find_route_request() {
  if (command_find_route_request_ != NULL) command_find_route_request_->::schema::improbable::graphtier::RouteFindRequest::Clear();
  clear_has_command_find_route_request();
}
const ::schema::improbable::graphtier::RouteFindRequest& NodeCommands_Commands::command_find_route_request() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NodeCommands.Commands.command_find_route_request)
  return command_find_route_request_ != NULL ? *command_find_route_request_
                         : *::schema::improbable::graphtier::RouteFindRequest::internal_default_instance();
}
::schema::improbable::graphtier::RouteFindRequest* NodeCommands_Commands::mutable_command_find_route_request() {
  set_has_command_find_route_request();
  if (command_find_route_request_ == NULL) {
    command_find_route_request_ = new ::schema::improbable::graphtier::RouteFindRequest;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.NodeCommands.Commands.command_find_route_request)
  return command_find_route_request_;
}
::schema::improbable::graphtier::RouteFindRequest* NodeCommands_Commands::release_command_find_route_request() {
  // @@protoc_insertion_point(field_release:schema.improbable.graphtier.NodeCommands.Commands.command_find_route_request)
  clear_has_command_find_route_request();
  ::schema::improbable::graphtier::RouteFindRequest* temp = command_find_route_request_;
  command_find_route_request_ = NULL;
  return temp;
}
void NodeCommands_Commands::set_allocated_command_find_route_request(::schema::improbable::graphtier::RouteFindRequest* command_find_route_request) {
  delete command_find_route_request_;
  command_find_route_request_ = command_find_route_request;
  if (command_find_route_request) {
    set_has_command_find_route_request();
  } else {
    clear_has_command_find_route_request();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.graphtier.NodeCommands.Commands.command_find_route_request)
}

// optional .schema.improbable.graphtier.RouteFindResponse command_find_route_response = 2;
bool NodeCommands_Commands::has_command_find_route_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeCommands_Commands::set_has_command_find_route_response() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeCommands_Commands::clear_has_command_find_route_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeCommands_Commands::clear_command_find_route_response() {
  if (command_find_route_response_ != NULL) command_find_route_response_->::schema::improbable::graphtier::RouteFindResponse::Clear();
  clear_has_command_find_route_response();
}
const ::schema::improbable::graphtier::RouteFindResponse& NodeCommands_Commands::command_find_route_response() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NodeCommands.Commands.command_find_route_response)
  return command_find_route_response_ != NULL ? *command_find_route_response_
                         : *::schema::improbable::graphtier::RouteFindResponse::internal_default_instance();
}
::schema::improbable::graphtier::RouteFindResponse* NodeCommands_Commands::mutable_command_find_route_response() {
  set_has_command_find_route_response();
  if (command_find_route_response_ == NULL) {
    command_find_route_response_ = new ::schema::improbable::graphtier::RouteFindResponse;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.NodeCommands.Commands.command_find_route_response)
  return command_find_route_response_;
}
::schema::improbable::graphtier::RouteFindResponse* NodeCommands_Commands::release_command_find_route_response() {
  // @@protoc_insertion_point(field_release:schema.improbable.graphtier.NodeCommands.Commands.command_find_route_response)
  clear_has_command_find_route_response();
  ::schema::improbable::graphtier::RouteFindResponse* temp = command_find_route_response_;
  command_find_route_response_ = NULL;
  return temp;
}
void NodeCommands_Commands::set_allocated_command_find_route_response(::schema::improbable::graphtier::RouteFindResponse* command_find_route_response) {
  delete command_find_route_response_;
  command_find_route_response_ = command_find_route_response;
  if (command_find_route_response) {
    set_has_command_find_route_response();
  } else {
    clear_has_command_find_route_response();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.graphtier.NodeCommands.Commands.command_find_route_response)
}

inline const NodeCommands_Commands* NodeCommands_Commands::internal_default_instance() {
  return &NodeCommands_Commands_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeCommands

inline const NodeCommands* NodeCommands::internal_default_instance() {
  return &NodeCommands_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace graphtier
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
