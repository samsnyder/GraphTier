// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/graphtier/NodeData.schema
#ifndef SPATIALOS_SCHEMA_improbable_graphtier_NodeData_schema_13504961564323053391_INCLUDED
#define SPATIALOS_SCHEMA_improbable_graphtier_NodeData_schema_13504961564323053391_INCLUDED
#include <improbable/collections.h>
#include <improbable/math/coordinates.h>
#include <improbable/math/vector3d.h>
#include <improbable/math/vector3f.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

// Schema forward declarations.
//----------------------------------------------------------------

namespace schema {
namespace improbable {
namespace graphtier {

class NetworkAttachment;
class NodeDataData;

}  // ::improbable
}  // ::graphtier
}  // ::schema

namespace improbable {
namespace graphtier {

// Forward declarations.
//----------------------------------------------------------------

class NetworkAttachment;
class NodeDataData;

namespace detail {
const ::worker::detail::ClientComponentVtable& Vtable_NodeData();
struct GenericCommandObject_NodeData {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class NetworkAttachment {
public:
  // Main constructor.
  NetworkAttachment(const ::worker::Option< ::worker::EntityId >& network);

  // Copyable and moveable.
  NetworkAttachment(NetworkAttachment&&) = default;
  NetworkAttachment(const NetworkAttachment&) = default;
  NetworkAttachment& operator=(NetworkAttachment&&) = default;
  NetworkAttachment& operator=(const NetworkAttachment&) = default;
  ~NetworkAttachment() = default;

  bool operator==(const NetworkAttachment&) const;
  bool operator!=(const NetworkAttachment&) const;

  // Field network = 1.
  const ::worker::Option< ::worker::EntityId >& network() const;
  ::worker::Option< ::worker::EntityId >& network();
  NetworkAttachment& set_network(const ::worker::Option< ::worker::EntityId >&);

private:
  ::worker::Option< ::worker::EntityId > _network;
};

class NodeDataData {
public:
  // Main constructor.
  NodeDataData(const ::worker::List< ::improbable::graphtier::NetworkAttachment >& networks);

  // Copyable and moveable.
  NodeDataData(NodeDataData&&);
  NodeDataData(const NodeDataData&) = default;
  NodeDataData& operator=(NodeDataData&&) = default;
  NodeDataData& operator=(const NodeDataData&) = default;
  ~NodeDataData() = default;

  bool operator==(const NodeDataData&) const;
  bool operator!=(const NodeDataData&) const;

  // Field networks = 1.
  const ::worker::List< ::improbable::graphtier::NetworkAttachment >& networks() const;
  ::worker::List< ::improbable::graphtier::NetworkAttachment >& networks();
  NodeDataData& set_networks(const ::worker::List< ::improbable::graphtier::NetworkAttachment >&);

private:
  ::worker::List< ::improbable::graphtier::NetworkAttachment > _networks;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::graphtier::NodeData;
 *
 *   NodeData::Update update;
 *   connection.SendComponentUpdate< NodeData >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< NodeData >(
 *       [&](const worker::ComponentUpdateOp< NodeData >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         NodeData::Update update = op.GetUpdate();
 *       });
 *
 *   NodeData::Data data = entity.Get< NodeData >();
 */
struct NodeData : ::worker::detail::ComponentMetaclassBase<
    NodeData, detail::Vtable_NodeData> {
  static constexpr const ::worker::ComponentId ComponentId = 8006;
  using Data = ::improbable::graphtier::NodeDataData;
  using GenericCommandObject = detail::GenericCommandObject_NodeData;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::graphtier::NodeDataData object. */
    static Update FromInitialData(const ::improbable::graphtier::NodeDataData& data);

    /**
     * Converts to a ::improbable::graphtier::NodeDataData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::graphtier::NodeDataData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::graphtier::NodeDataData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::graphtier::NodeDataData&) const;

    // Field networks = 1.
    const ::worker::Option< ::worker::List< ::improbable::graphtier::NetworkAttachment > >& networks() const;
    ::worker::Option< ::worker::List< ::improbable::graphtier::NetworkAttachment > >& networks();
    Update& set_networks(const ::worker::List< ::improbable::graphtier::NetworkAttachment >&);

  private:
    ::worker::Option< ::worker::List< ::improbable::graphtier::NetworkAttachment > > _networks;
  };

};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Serialize_NetworkAttachment(
    const ::improbable::graphtier::NetworkAttachment&,
    ::schema::improbable::graphtier::NetworkAttachment&);

::improbable::graphtier::NetworkAttachment Deserialize_NetworkAttachment(
    const ::schema::improbable::graphtier::NetworkAttachment&);

void Serialize_NodeDataData(
    const ::improbable::graphtier::NodeDataData&,
    ::schema::improbable::graphtier::NodeDataData&);

::improbable::graphtier::NodeDataData Deserialize_NodeDataData(
    const ::schema::improbable::graphtier::NodeDataData&);

}  // ::detail
}  // ::graphtier
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_graphtier_NodeData_schema_13504961564323053391_INCLUDED
