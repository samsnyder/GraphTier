// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/graphtier/NodeCommands.schema
#ifndef SPATIALOS_SCHEMA_improbable_graphtier_NodeCommands_schema_17214943101047729943_INCLUDED
#define SPATIALOS_SCHEMA_improbable_graphtier_NodeCommands_schema_17214943101047729943_INCLUDED
#include <improbable/collections.h>
#include <improbable/math/coordinates.h>
#include <improbable/math/vector3d.h>
#include <improbable/math/vector3f.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>
#include <improbable/graphtier/GraphTierTypes.h>

// Schema forward declarations.
//----------------------------------------------------------------

namespace schema {
namespace improbable {
namespace graphtier {

class RouteFindResponse;
class RouteFindRequest;
class NodeCommandsData;

}  // ::improbable
}  // ::graphtier
}  // ::schema

namespace improbable {
namespace graphtier {

// Forward declarations.
//----------------------------------------------------------------

class NodeCommandsData;
class RouteFindRequest;
class RouteFindResponse;

namespace detail {
const ::worker::detail::ClientComponentVtable& Vtable_NodeCommands();
struct GenericCommandObject_NodeCommands {
  std::uint32_t CommandId;
  ::worker::Variant<
      ::improbable::graphtier::RouteFindRequest,
      ::improbable::graphtier::RouteFindResponse> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class NodeCommandsData {
public:
  // Main constructor.
  NodeCommandsData();

  // Copyable and moveable.
  NodeCommandsData(NodeCommandsData&&) = default;
  NodeCommandsData(const NodeCommandsData&) = default;
  NodeCommandsData& operator=(NodeCommandsData&&) = default;
  NodeCommandsData& operator=(const NodeCommandsData&) = default;
  ~NodeCommandsData() = default;

  bool operator==(const NodeCommandsData&) const;
  bool operator!=(const NodeCommandsData&) const;
};

class RouteFindRequest {
public:
  // Main constructor.
  RouteFindRequest(::worker::EntityId to);

  // Copyable and moveable.
  RouteFindRequest(RouteFindRequest&&) = default;
  RouteFindRequest(const RouteFindRequest&) = default;
  RouteFindRequest& operator=(RouteFindRequest&&) = default;
  RouteFindRequest& operator=(const RouteFindRequest&) = default;
  ~RouteFindRequest() = default;

  bool operator==(const RouteFindRequest&) const;
  bool operator!=(const RouteFindRequest&) const;

  // Field to = 2.
  ::worker::EntityId to() const;
  ::worker::EntityId& to();
  RouteFindRequest& set_to(::worker::EntityId);

private:
  ::worker::EntityId _to;
};

class RouteFindResponse {
public:
  // Main constructor.
  RouteFindResponse(const ::worker::Option< ::improbable::graphtier::Path >& path);

  // Copyable and moveable.
  RouteFindResponse(RouteFindResponse&&) = default;
  RouteFindResponse(const RouteFindResponse&) = default;
  RouteFindResponse& operator=(RouteFindResponse&&) = default;
  RouteFindResponse& operator=(const RouteFindResponse&) = default;
  ~RouteFindResponse() = default;

  bool operator==(const RouteFindResponse&) const;
  bool operator!=(const RouteFindResponse&) const;

  // Field path = 1.
  const ::worker::Option< ::improbable::graphtier::Path >& path() const;
  ::worker::Option< ::improbable::graphtier::Path >& path();
  RouteFindResponse& set_path(const ::worker::Option< ::improbable::graphtier::Path >&);

private:
  ::worker::Option< ::improbable::graphtier::Path > _path;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::graphtier::NodeCommands;
 *
 *   NodeCommands::Update update;
 *   connection.SendComponentUpdate< NodeCommands >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< NodeCommands >(
 *       [&](const worker::ComponentUpdateOp< NodeCommands >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         NodeCommands::Update update = op.GetUpdate();
 *       });
 *
 *   NodeCommands::Data data = entity.Get< NodeCommands >();
 */
struct NodeCommands : ::worker::detail::ComponentMetaclassBase<
    NodeCommands, detail::Vtable_NodeCommands> {
  static constexpr const ::worker::ComponentId ComponentId = 8005;
  using Data = ::improbable::graphtier::NodeCommandsData;
  using GenericCommandObject = detail::GenericCommandObject_NodeCommands;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::graphtier::NodeCommandsData object. */
    static Update FromInitialData(const ::improbable::graphtier::NodeCommandsData& data);

    /**
     * Converts to a ::improbable::graphtier::NodeCommandsData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::graphtier::NodeCommandsData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::graphtier::NodeCommandsData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::graphtier::NodeCommandsData&) const;
  };

  /**
   * Command metaclasses for the NodeCommands component.
   * Each metaclass can be supplied as the template parameter to all command-related templated
   * types and methods in the C++ worker API.
  */
  class Commands {
  public:
    class FindRoute {
    public:
      static constexpr const std::uint32_t CommandId = 1;
      using ComponentMetaclass = NodeCommands;
      using Request = ::improbable::graphtier::RouteFindRequest;
      using Response = ::improbable::graphtier::RouteFindResponse;
    };
  };
};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Serialize_NodeCommandsData(
    const ::improbable::graphtier::NodeCommandsData&,
    ::schema::improbable::graphtier::NodeCommandsData&);

::improbable::graphtier::NodeCommandsData Deserialize_NodeCommandsData(
    const ::schema::improbable::graphtier::NodeCommandsData&);

void Serialize_RouteFindRequest(
    const ::improbable::graphtier::RouteFindRequest&,
    ::schema::improbable::graphtier::RouteFindRequest&);

::improbable::graphtier::RouteFindRequest Deserialize_RouteFindRequest(
    const ::schema::improbable::graphtier::RouteFindRequest&);

void Serialize_RouteFindResponse(
    const ::improbable::graphtier::RouteFindResponse&,
    ::schema::improbable::graphtier::RouteFindResponse&);

::improbable::graphtier::RouteFindResponse Deserialize_RouteFindResponse(
    const ::schema::improbable::graphtier::RouteFindResponse&);

}  // ::detail
}  // ::graphtier
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_graphtier_NodeCommands_schema_17214943101047729943_INCLUDED
