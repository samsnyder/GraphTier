// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/graphtier/NetworkGraphCommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/graphtier/NetworkGraphCommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace graphtier {

namespace {

const ::google::protobuf::Descriptor* NetworkGraphResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkGraphResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkGraphRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkGraphRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkGraphCommandData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkGraphCommandData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkGraphCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkGraphCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkGraphCommand_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkGraphCommand_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkGraphCommand_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkGraphCommand_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto() {
  protobuf_AddDesc_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/graphtier/NetworkGraphCommand.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkGraphResponse_descriptor_ = file->message_type(0);
  static const int NetworkGraphResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphResponse, field1_data_),
  };
  NetworkGraphResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkGraphResponse_descriptor_,
      NetworkGraphResponse::internal_default_instance(),
      NetworkGraphResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphResponse, _has_bits_),
      -1,
      -1,
      sizeof(NetworkGraphResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphResponse, _internal_metadata_));
  NetworkGraphRequest_descriptor_ = file->message_type(1);
  static const int NetworkGraphRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphRequest, field1_target_network_id_),
  };
  NetworkGraphRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkGraphRequest_descriptor_,
      NetworkGraphRequest::internal_default_instance(),
      NetworkGraphRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphRequest, _has_bits_),
      -1,
      -1,
      sizeof(NetworkGraphRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphRequest, _internal_metadata_));
  NetworkGraphCommandData_descriptor_ = file->message_type(2);
  static const int NetworkGraphCommandData_offsets_[1] = {
  };
  NetworkGraphCommandData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkGraphCommandData_descriptor_,
      NetworkGraphCommandData::internal_default_instance(),
      NetworkGraphCommandData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphCommandData, _has_bits_),
      -1,
      -1,
      sizeof(NetworkGraphCommandData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphCommandData, _internal_metadata_));
  NetworkGraphCommand_descriptor_ = file->message_type(3);
  static const int NetworkGraphCommand_offsets_[1] = {
  };
  NetworkGraphCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkGraphCommand_descriptor_,
      NetworkGraphCommand::internal_default_instance(),
      NetworkGraphCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphCommand, _has_bits_),
      -1,
      -1,
      sizeof(NetworkGraphCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphCommand, _internal_metadata_));
  NetworkGraphCommand_Events_descriptor_ = NetworkGraphCommand_descriptor_->nested_type(0);
  static const int NetworkGraphCommand_Events_offsets_[1] = {
  };
  NetworkGraphCommand_Events_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkGraphCommand_Events_descriptor_,
      NetworkGraphCommand_Events::internal_default_instance(),
      NetworkGraphCommand_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphCommand_Events, _has_bits_),
      -1,
      -1,
      sizeof(NetworkGraphCommand_Events),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphCommand_Events, _internal_metadata_));
  NetworkGraphCommand_Commands_descriptor_ = NetworkGraphCommand_descriptor_->nested_type(1);
  static const int NetworkGraphCommand_Commands_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphCommand_Commands, command_network_graph_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphCommand_Commands, command_network_graph_response_),
  };
  NetworkGraphCommand_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkGraphCommand_Commands_descriptor_,
      NetworkGraphCommand_Commands::internal_default_instance(),
      NetworkGraphCommand_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphCommand_Commands, _has_bits_),
      -1,
      -1,
      sizeof(NetworkGraphCommand_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkGraphCommand_Commands, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkGraphResponse_descriptor_, NetworkGraphResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkGraphRequest_descriptor_, NetworkGraphRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkGraphCommandData_descriptor_, NetworkGraphCommandData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkGraphCommand_descriptor_, NetworkGraphCommand::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkGraphCommand_Events_descriptor_, NetworkGraphCommand_Events::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkGraphCommand_Commands_descriptor_, NetworkGraphCommand_Commands::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto() {
  NetworkGraphResponse_default_instance_.Shutdown();
  delete NetworkGraphResponse_reflection_;
  NetworkGraphRequest_default_instance_.Shutdown();
  delete NetworkGraphRequest_reflection_;
  NetworkGraphCommandData_default_instance_.Shutdown();
  delete NetworkGraphCommandData_reflection_;
  NetworkGraphCommand_default_instance_.Shutdown();
  delete NetworkGraphCommand_reflection_;
  NetworkGraphCommand_Events_default_instance_.Shutdown();
  delete NetworkGraphCommand_Events_reflection_;
  NetworkGraphCommand_Commands_default_instance_.Shutdown();
  delete NetworkGraphCommand_Commands_reflection_;
}

void protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_InitDefaults_improbable_2fentity_5fstate_2eproto();
  NetworkGraphResponse_default_instance_.DefaultConstruct();
  NetworkGraphRequest_default_instance_.DefaultConstruct();
  NetworkGraphCommandData_default_instance_.DefaultConstruct();
  NetworkGraphCommand_default_instance_.DefaultConstruct();
  NetworkGraphCommand_Events_default_instance_.DefaultConstruct();
  NetworkGraphCommand_Commands_default_instance_.DefaultConstruct();
  NetworkGraphResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetworkGraphRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetworkGraphCommandData_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetworkGraphCommand_default_instance_.get_mutable()->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityState::internal_default_instance(),
    8003, 11, false, false,
    ::schema::improbable::graphtier::NetworkGraphCommandData::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityEvent::internal_default_instance(),
    8003, 11, false, false,
    ::schema::improbable::graphtier::NetworkGraphCommand_Events::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityCommand::internal_default_instance(),
    8003, 11, false, false,
    ::schema::improbable::graphtier::NetworkGraphCommand_Commands::internal_default_instance());
  NetworkGraphCommand_Events_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetworkGraphCommand_Commands_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto_once_);
void protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto_once_,
                 &protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto_impl);
}
void protobuf_AddDesc_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.improbable/graphtier/NetworkGraphComma"
    "nd.proto\022\033schema.improbable.graphtier\032\035i"
    "mprobable/entity_state.proto\"5\n\024NetworkG"
    "raphResponse\022\035\n\013field1_data\030\001 \001(\rB\010\302\363\030\004d"
    "ata\"R\n\023NetworkGraphRequest\022;\n\030field1_tar"
    "get_network_id\030\001 \001(\003B\031\302\363\030\021target_network"
    "_id\350\363\030\001\"\031\n\027NetworkGraphCommandData\"\363\004\n\023N"
    "etworkGraphCommand\032\010\n\006Events\032\276\001\n\010Command"
    "s\022W\n\035command_network_graph_request\030\001 \001(\013"
    "20.schema.improbable.graphtier.NetworkGr"
    "aphRequest\022Y\n\036command_network_graph_resp"
    "onse\030\002 \001(\01321.schema.improbable.graphtier"
    ".NetworkGraphResponse2r\n\023component_exten"
    "sion\022\036.schema.improbable.EntityState\030\303> "
    "\001(\01324.schema.improbable.graphtier.Networ"
    "kGraphCommandData2q\n\017event_extension\022\036.s"
    "chema.improbable.EntityEvent\030\303> \001(\01327.sc"
    "hema.improbable.graphtier.NetworkGraphCo"
    "mmand.Events2w\n\021command_extension\022 .sche"
    "ma.improbable.EntityCommand\030\303> \001(\01329.sch"
    "ema.improbable.graphtier.NetworkGraphCom"
    "mand.Commands:1\302\363\030-\n(improbable.graphtie"
    "r.NetworkGraphCommand\020\303>B\037B\035NetworkGraph"
    "CommandOuterClass", 937);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/graphtier/NetworkGraphCommand.proto", &protobuf_RegisterTypes);
  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto_once_);
void protobuf_AddDesc_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto_once_,
                 &protobuf_AddDesc_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto {
  StaticDescriptorInitializer_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto() {
    protobuf_AddDesc_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  }
} static_descriptor_initializer_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkGraphResponse::kField1DataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkGraphResponse::NetworkGraphResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkGraphResponse)
}

void NetworkGraphResponse::InitAsDefaultInstance() {
}

NetworkGraphResponse::NetworkGraphResponse(const NetworkGraphResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkGraphResponse)
}

void NetworkGraphResponse::SharedCtor() {
  _cached_size_ = 0;
  field1_data_ = 0u;
}

NetworkGraphResponse::~NetworkGraphResponse() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkGraphResponse)
  SharedDtor();
}

void NetworkGraphResponse::SharedDtor() {
}

void NetworkGraphResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkGraphResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkGraphResponse_descriptor_;
}

const NetworkGraphResponse& NetworkGraphResponse::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkGraphResponse> NetworkGraphResponse_default_instance_;

NetworkGraphResponse* NetworkGraphResponse::New(::google::protobuf::Arena* arena) const {
  NetworkGraphResponse* n = new NetworkGraphResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkGraphResponse)
  field1_data_ = 0u;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkGraphResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkGraphResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 field1_data = 1;
      case 1: {
        if (tag == 8) {
          set_has_field1_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field1_data_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkGraphResponse)
  return false;
#undef DO_
}

void NetworkGraphResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkGraphResponse)
  // optional uint32 field1_data = 1;
  if (has_field1_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->field1_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkGraphResponse)
}

::google::protobuf::uint8* NetworkGraphResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkGraphResponse)
  // optional uint32 field1_data = 1;
  if (has_field1_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->field1_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkGraphResponse)
  return target;
}

size_t NetworkGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkGraphResponse)
  size_t total_size = 0;

  // optional uint32 field1_data = 1;
  if (has_field1_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->field1_data());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkGraphResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkGraphResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkGraphResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkGraphResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkGraphResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkGraphResponse)
    UnsafeMergeFrom(*source);
  }
}

void NetworkGraphResponse::MergeFrom(const NetworkGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkGraphResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkGraphResponse::UnsafeMergeFrom(const NetworkGraphResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_data()) {
      set_field1_data(from.field1_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkGraphResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkGraphResponse::CopyFrom(const NetworkGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkGraphResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkGraphResponse::IsInitialized() const {

  return true;
}

void NetworkGraphResponse::Swap(NetworkGraphResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkGraphResponse::InternalSwap(NetworkGraphResponse* other) {
  std::swap(field1_data_, other->field1_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkGraphResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkGraphResponse_descriptor_;
  metadata.reflection = NetworkGraphResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkGraphResponse

// optional uint32 field1_data = 1;
bool NetworkGraphResponse::has_field1_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkGraphResponse::set_has_field1_data() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkGraphResponse::clear_has_field1_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkGraphResponse::clear_field1_data() {
  field1_data_ = 0u;
  clear_has_field1_data();
}
::google::protobuf::uint32 NetworkGraphResponse::field1_data() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NetworkGraphResponse.field1_data)
  return field1_data_;
}
void NetworkGraphResponse::set_field1_data(::google::protobuf::uint32 value) {
  set_has_field1_data();
  field1_data_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.NetworkGraphResponse.field1_data)
}

inline const NetworkGraphResponse* NetworkGraphResponse::internal_default_instance() {
  return &NetworkGraphResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkGraphRequest::kField1TargetNetworkIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkGraphRequest::NetworkGraphRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkGraphRequest)
}

void NetworkGraphRequest::InitAsDefaultInstance() {
}

NetworkGraphRequest::NetworkGraphRequest(const NetworkGraphRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkGraphRequest)
}

void NetworkGraphRequest::SharedCtor() {
  _cached_size_ = 0;
  field1_target_network_id_ = GOOGLE_LONGLONG(0);
}

NetworkGraphRequest::~NetworkGraphRequest() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkGraphRequest)
  SharedDtor();
}

void NetworkGraphRequest::SharedDtor() {
}

void NetworkGraphRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkGraphRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkGraphRequest_descriptor_;
}

const NetworkGraphRequest& NetworkGraphRequest::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkGraphRequest> NetworkGraphRequest_default_instance_;

NetworkGraphRequest* NetworkGraphRequest::New(::google::protobuf::Arena* arena) const {
  NetworkGraphRequest* n = new NetworkGraphRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkGraphRequest)
  field1_target_network_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkGraphRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkGraphRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 field1_target_network_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_field1_target_network_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field1_target_network_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkGraphRequest)
  return false;
#undef DO_
}

void NetworkGraphRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkGraphRequest)
  // optional int64 field1_target_network_id = 1;
  if (has_field1_target_network_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field1_target_network_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkGraphRequest)
}

::google::protobuf::uint8* NetworkGraphRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkGraphRequest)
  // optional int64 field1_target_network_id = 1;
  if (has_field1_target_network_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->field1_target_network_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkGraphRequest)
  return target;
}

size_t NetworkGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkGraphRequest)
  size_t total_size = 0;

  // optional int64 field1_target_network_id = 1;
  if (has_field1_target_network_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->field1_target_network_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkGraphRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkGraphRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkGraphRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkGraphRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkGraphRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkGraphRequest)
    UnsafeMergeFrom(*source);
  }
}

void NetworkGraphRequest::MergeFrom(const NetworkGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkGraphRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkGraphRequest::UnsafeMergeFrom(const NetworkGraphRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_target_network_id()) {
      set_field1_target_network_id(from.field1_target_network_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkGraphRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkGraphRequest::CopyFrom(const NetworkGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkGraphRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkGraphRequest::IsInitialized() const {

  return true;
}

void NetworkGraphRequest::Swap(NetworkGraphRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkGraphRequest::InternalSwap(NetworkGraphRequest* other) {
  std::swap(field1_target_network_id_, other->field1_target_network_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkGraphRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkGraphRequest_descriptor_;
  metadata.reflection = NetworkGraphRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkGraphRequest

// optional int64 field1_target_network_id = 1;
bool NetworkGraphRequest::has_field1_target_network_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkGraphRequest::set_has_field1_target_network_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkGraphRequest::clear_has_field1_target_network_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkGraphRequest::clear_field1_target_network_id() {
  field1_target_network_id_ = GOOGLE_LONGLONG(0);
  clear_has_field1_target_network_id();
}
::google::protobuf::int64 NetworkGraphRequest::field1_target_network_id() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NetworkGraphRequest.field1_target_network_id)
  return field1_target_network_id_;
}
void NetworkGraphRequest::set_field1_target_network_id(::google::protobuf::int64 value) {
  set_has_field1_target_network_id();
  field1_target_network_id_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.NetworkGraphRequest.field1_target_network_id)
}

inline const NetworkGraphRequest* NetworkGraphRequest::internal_default_instance() {
  return &NetworkGraphRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkGraphCommandData::NetworkGraphCommandData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkGraphCommandData)
}

void NetworkGraphCommandData::InitAsDefaultInstance() {
}

NetworkGraphCommandData::NetworkGraphCommandData(const NetworkGraphCommandData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkGraphCommandData)
}

void NetworkGraphCommandData::SharedCtor() {
  _cached_size_ = 0;
}

NetworkGraphCommandData::~NetworkGraphCommandData() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkGraphCommandData)
  SharedDtor();
}

void NetworkGraphCommandData::SharedDtor() {
}

void NetworkGraphCommandData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkGraphCommandData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkGraphCommandData_descriptor_;
}

const NetworkGraphCommandData& NetworkGraphCommandData::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkGraphCommandData> NetworkGraphCommandData_default_instance_;

NetworkGraphCommandData* NetworkGraphCommandData::New(::google::protobuf::Arena* arena) const {
  NetworkGraphCommandData* n = new NetworkGraphCommandData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkGraphCommandData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkGraphCommandData)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkGraphCommandData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkGraphCommandData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkGraphCommandData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkGraphCommandData)
  return false;
#undef DO_
}

void NetworkGraphCommandData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkGraphCommandData)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkGraphCommandData)
}

::google::protobuf::uint8* NetworkGraphCommandData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkGraphCommandData)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkGraphCommandData)
  return target;
}

size_t NetworkGraphCommandData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkGraphCommandData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkGraphCommandData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkGraphCommandData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkGraphCommandData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkGraphCommandData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkGraphCommandData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkGraphCommandData)
    UnsafeMergeFrom(*source);
  }
}

void NetworkGraphCommandData::MergeFrom(const NetworkGraphCommandData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkGraphCommandData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkGraphCommandData::UnsafeMergeFrom(const NetworkGraphCommandData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkGraphCommandData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkGraphCommandData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkGraphCommandData::CopyFrom(const NetworkGraphCommandData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkGraphCommandData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkGraphCommandData::IsInitialized() const {

  return true;
}

void NetworkGraphCommandData::Swap(NetworkGraphCommandData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkGraphCommandData::InternalSwap(NetworkGraphCommandData* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkGraphCommandData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkGraphCommandData_descriptor_;
  metadata.reflection = NetworkGraphCommandData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkGraphCommandData

inline const NetworkGraphCommandData* NetworkGraphCommandData::internal_default_instance() {
  return &NetworkGraphCommandData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkGraphCommand_Events::NetworkGraphCommand_Events()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkGraphCommand.Events)
}

void NetworkGraphCommand_Events::InitAsDefaultInstance() {
}

NetworkGraphCommand_Events::NetworkGraphCommand_Events(const NetworkGraphCommand_Events& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkGraphCommand.Events)
}

void NetworkGraphCommand_Events::SharedCtor() {
  _cached_size_ = 0;
}

NetworkGraphCommand_Events::~NetworkGraphCommand_Events() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkGraphCommand.Events)
  SharedDtor();
}

void NetworkGraphCommand_Events::SharedDtor() {
}

void NetworkGraphCommand_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkGraphCommand_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkGraphCommand_Events_descriptor_;
}

const NetworkGraphCommand_Events& NetworkGraphCommand_Events::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkGraphCommand_Events> NetworkGraphCommand_Events_default_instance_;

NetworkGraphCommand_Events* NetworkGraphCommand_Events::New(::google::protobuf::Arena* arena) const {
  NetworkGraphCommand_Events* n = new NetworkGraphCommand_Events;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkGraphCommand_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkGraphCommand.Events)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkGraphCommand_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkGraphCommand.Events)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkGraphCommand.Events)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkGraphCommand.Events)
  return false;
#undef DO_
}

void NetworkGraphCommand_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkGraphCommand.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkGraphCommand.Events)
}

::google::protobuf::uint8* NetworkGraphCommand_Events::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkGraphCommand.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkGraphCommand.Events)
  return target;
}

size_t NetworkGraphCommand_Events::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkGraphCommand.Events)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkGraphCommand_Events::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkGraphCommand.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkGraphCommand_Events* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkGraphCommand_Events>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkGraphCommand.Events)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkGraphCommand.Events)
    UnsafeMergeFrom(*source);
  }
}

void NetworkGraphCommand_Events::MergeFrom(const NetworkGraphCommand_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkGraphCommand.Events)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkGraphCommand_Events::UnsafeMergeFrom(const NetworkGraphCommand_Events& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkGraphCommand_Events::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkGraphCommand.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkGraphCommand_Events::CopyFrom(const NetworkGraphCommand_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkGraphCommand.Events)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkGraphCommand_Events::IsInitialized() const {

  return true;
}

void NetworkGraphCommand_Events::Swap(NetworkGraphCommand_Events* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkGraphCommand_Events::InternalSwap(NetworkGraphCommand_Events* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkGraphCommand_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkGraphCommand_Events_descriptor_;
  metadata.reflection = NetworkGraphCommand_Events_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkGraphCommand_Commands::kCommandNetworkGraphRequestFieldNumber;
const int NetworkGraphCommand_Commands::kCommandNetworkGraphResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkGraphCommand_Commands::NetworkGraphCommand_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkGraphCommand.Commands)
}

void NetworkGraphCommand_Commands::InitAsDefaultInstance() {
  command_network_graph_request_ = const_cast< ::schema::improbable::graphtier::NetworkGraphRequest*>(
      ::schema::improbable::graphtier::NetworkGraphRequest::internal_default_instance());
  command_network_graph_response_ = const_cast< ::schema::improbable::graphtier::NetworkGraphResponse*>(
      ::schema::improbable::graphtier::NetworkGraphResponse::internal_default_instance());
}

NetworkGraphCommand_Commands::NetworkGraphCommand_Commands(const NetworkGraphCommand_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkGraphCommand.Commands)
}

void NetworkGraphCommand_Commands::SharedCtor() {
  _cached_size_ = 0;
  command_network_graph_request_ = NULL;
  command_network_graph_response_ = NULL;
}

NetworkGraphCommand_Commands::~NetworkGraphCommand_Commands() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  SharedDtor();
}

void NetworkGraphCommand_Commands::SharedDtor() {
  if (this != &NetworkGraphCommand_Commands_default_instance_.get()) {
    delete command_network_graph_request_;
    delete command_network_graph_response_;
  }
}

void NetworkGraphCommand_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkGraphCommand_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkGraphCommand_Commands_descriptor_;
}

const NetworkGraphCommand_Commands& NetworkGraphCommand_Commands::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkGraphCommand_Commands> NetworkGraphCommand_Commands_default_instance_;

NetworkGraphCommand_Commands* NetworkGraphCommand_Commands::New(::google::protobuf::Arena* arena) const {
  NetworkGraphCommand_Commands* n = new NetworkGraphCommand_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkGraphCommand_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_command_network_graph_request()) {
      if (command_network_graph_request_ != NULL) command_network_graph_request_->::schema::improbable::graphtier::NetworkGraphRequest::Clear();
    }
    if (has_command_network_graph_response()) {
      if (command_network_graph_response_ != NULL) command_network_graph_response_->::schema::improbable::graphtier::NetworkGraphResponse::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkGraphCommand_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .schema.improbable.graphtier.NetworkGraphRequest command_network_graph_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_network_graph_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_command_network_graph_response;
        break;
      }

      // optional .schema.improbable.graphtier.NetworkGraphResponse command_network_graph_response = 2;
      case 2: {
        if (tag == 18) {
         parse_command_network_graph_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_network_graph_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  return false;
#undef DO_
}

void NetworkGraphCommand_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  // optional .schema.improbable.graphtier.NetworkGraphRequest command_network_graph_request = 1;
  if (has_command_network_graph_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->command_network_graph_request_, output);
  }

  // optional .schema.improbable.graphtier.NetworkGraphResponse command_network_graph_response = 2;
  if (has_command_network_graph_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->command_network_graph_response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkGraphCommand.Commands)
}

::google::protobuf::uint8* NetworkGraphCommand_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  // optional .schema.improbable.graphtier.NetworkGraphRequest command_network_graph_request = 1;
  if (has_command_network_graph_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->command_network_graph_request_, false, target);
  }

  // optional .schema.improbable.graphtier.NetworkGraphResponse command_network_graph_response = 2;
  if (has_command_network_graph_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->command_network_graph_response_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  return target;
}

size_t NetworkGraphCommand_Commands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .schema.improbable.graphtier.NetworkGraphRequest command_network_graph_request = 1;
    if (has_command_network_graph_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->command_network_graph_request_);
    }

    // optional .schema.improbable.graphtier.NetworkGraphResponse command_network_graph_response = 2;
    if (has_command_network_graph_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->command_network_graph_response_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkGraphCommand_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkGraphCommand_Commands* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkGraphCommand_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkGraphCommand.Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkGraphCommand.Commands)
    UnsafeMergeFrom(*source);
  }
}

void NetworkGraphCommand_Commands::MergeFrom(const NetworkGraphCommand_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkGraphCommand_Commands::UnsafeMergeFrom(const NetworkGraphCommand_Commands& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command_network_graph_request()) {
      mutable_command_network_graph_request()->::schema::improbable::graphtier::NetworkGraphRequest::MergeFrom(from.command_network_graph_request());
    }
    if (from.has_command_network_graph_response()) {
      mutable_command_network_graph_response()->::schema::improbable::graphtier::NetworkGraphResponse::MergeFrom(from.command_network_graph_response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkGraphCommand_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkGraphCommand_Commands::CopyFrom(const NetworkGraphCommand_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkGraphCommand.Commands)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkGraphCommand_Commands::IsInitialized() const {

  return true;
}

void NetworkGraphCommand_Commands::Swap(NetworkGraphCommand_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkGraphCommand_Commands::InternalSwap(NetworkGraphCommand_Commands* other) {
  std::swap(command_network_graph_request_, other->command_network_graph_request_);
  std::swap(command_network_graph_response_, other->command_network_graph_response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkGraphCommand_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkGraphCommand_Commands_descriptor_;
  metadata.reflection = NetworkGraphCommand_Commands_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkGraphCommand::kComponentExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NetworkGraphCommandData >, 11, false >
  NetworkGraphCommand::component_extension(kComponentExtensionFieldNumber, *::schema::improbable::graphtier::NetworkGraphCommandData::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkGraphCommand::kEventExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NetworkGraphCommand_Events >, 11, false >
  NetworkGraphCommand::event_extension(kEventExtensionFieldNumber, *::schema::improbable::graphtier::NetworkGraphCommand_Events::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkGraphCommand::kCommandExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NetworkGraphCommand_Commands >, 11, false >
  NetworkGraphCommand::command_extension(kCommandExtensionFieldNumber, *::schema::improbable::graphtier::NetworkGraphCommand_Commands::internal_default_instance());
NetworkGraphCommand::NetworkGraphCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkGraphCommand)
}

void NetworkGraphCommand::InitAsDefaultInstance() {
}

NetworkGraphCommand::NetworkGraphCommand(const NetworkGraphCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkGraphCommand)
}

void NetworkGraphCommand::SharedCtor() {
  _cached_size_ = 0;
}

NetworkGraphCommand::~NetworkGraphCommand() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkGraphCommand)
  SharedDtor();
}

void NetworkGraphCommand::SharedDtor() {
}

void NetworkGraphCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkGraphCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkGraphCommand_descriptor_;
}

const NetworkGraphCommand& NetworkGraphCommand::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkGraphCommand_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkGraphCommand> NetworkGraphCommand_default_instance_;

NetworkGraphCommand* NetworkGraphCommand::New(::google::protobuf::Arena* arena) const {
  NetworkGraphCommand* n = new NetworkGraphCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkGraphCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkGraphCommand)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkGraphCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkGraphCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkGraphCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkGraphCommand)
  return false;
#undef DO_
}

void NetworkGraphCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkGraphCommand)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkGraphCommand)
}

::google::protobuf::uint8* NetworkGraphCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkGraphCommand)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkGraphCommand)
  return target;
}

size_t NetworkGraphCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkGraphCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkGraphCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkGraphCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkGraphCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkGraphCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkGraphCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkGraphCommand)
    UnsafeMergeFrom(*source);
  }
}

void NetworkGraphCommand::MergeFrom(const NetworkGraphCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkGraphCommand)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkGraphCommand::UnsafeMergeFrom(const NetworkGraphCommand& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkGraphCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkGraphCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkGraphCommand::CopyFrom(const NetworkGraphCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkGraphCommand)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkGraphCommand::IsInitialized() const {

  return true;
}

void NetworkGraphCommand::Swap(NetworkGraphCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkGraphCommand::InternalSwap(NetworkGraphCommand* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkGraphCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkGraphCommand_descriptor_;
  metadata.reflection = NetworkGraphCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkGraphCommand_Events

inline const NetworkGraphCommand_Events* NetworkGraphCommand_Events::internal_default_instance() {
  return &NetworkGraphCommand_Events_default_instance_.get();
}
// -------------------------------------------------------------------

// NetworkGraphCommand_Commands

// optional .schema.improbable.graphtier.NetworkGraphRequest command_network_graph_request = 1;
bool NetworkGraphCommand_Commands::has_command_network_graph_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkGraphCommand_Commands::set_has_command_network_graph_request() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkGraphCommand_Commands::clear_has_command_network_graph_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkGraphCommand_Commands::clear_command_network_graph_request() {
  if (command_network_graph_request_ != NULL) command_network_graph_request_->::schema::improbable::graphtier::NetworkGraphRequest::Clear();
  clear_has_command_network_graph_request();
}
const ::schema::improbable::graphtier::NetworkGraphRequest& NetworkGraphCommand_Commands::command_network_graph_request() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NetworkGraphCommand.Commands.command_network_graph_request)
  return command_network_graph_request_ != NULL ? *command_network_graph_request_
                         : *::schema::improbable::graphtier::NetworkGraphRequest::internal_default_instance();
}
::schema::improbable::graphtier::NetworkGraphRequest* NetworkGraphCommand_Commands::mutable_command_network_graph_request() {
  set_has_command_network_graph_request();
  if (command_network_graph_request_ == NULL) {
    command_network_graph_request_ = new ::schema::improbable::graphtier::NetworkGraphRequest;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.NetworkGraphCommand.Commands.command_network_graph_request)
  return command_network_graph_request_;
}
::schema::improbable::graphtier::NetworkGraphRequest* NetworkGraphCommand_Commands::release_command_network_graph_request() {
  // @@protoc_insertion_point(field_release:schema.improbable.graphtier.NetworkGraphCommand.Commands.command_network_graph_request)
  clear_has_command_network_graph_request();
  ::schema::improbable::graphtier::NetworkGraphRequest* temp = command_network_graph_request_;
  command_network_graph_request_ = NULL;
  return temp;
}
void NetworkGraphCommand_Commands::set_allocated_command_network_graph_request(::schema::improbable::graphtier::NetworkGraphRequest* command_network_graph_request) {
  delete command_network_graph_request_;
  command_network_graph_request_ = command_network_graph_request;
  if (command_network_graph_request) {
    set_has_command_network_graph_request();
  } else {
    clear_has_command_network_graph_request();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.graphtier.NetworkGraphCommand.Commands.command_network_graph_request)
}

// optional .schema.improbable.graphtier.NetworkGraphResponse command_network_graph_response = 2;
bool NetworkGraphCommand_Commands::has_command_network_graph_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkGraphCommand_Commands::set_has_command_network_graph_response() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkGraphCommand_Commands::clear_has_command_network_graph_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkGraphCommand_Commands::clear_command_network_graph_response() {
  if (command_network_graph_response_ != NULL) command_network_graph_response_->::schema::improbable::graphtier::NetworkGraphResponse::Clear();
  clear_has_command_network_graph_response();
}
const ::schema::improbable::graphtier::NetworkGraphResponse& NetworkGraphCommand_Commands::command_network_graph_response() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NetworkGraphCommand.Commands.command_network_graph_response)
  return command_network_graph_response_ != NULL ? *command_network_graph_response_
                         : *::schema::improbable::graphtier::NetworkGraphResponse::internal_default_instance();
}
::schema::improbable::graphtier::NetworkGraphResponse* NetworkGraphCommand_Commands::mutable_command_network_graph_response() {
  set_has_command_network_graph_response();
  if (command_network_graph_response_ == NULL) {
    command_network_graph_response_ = new ::schema::improbable::graphtier::NetworkGraphResponse;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.NetworkGraphCommand.Commands.command_network_graph_response)
  return command_network_graph_response_;
}
::schema::improbable::graphtier::NetworkGraphResponse* NetworkGraphCommand_Commands::release_command_network_graph_response() {
  // @@protoc_insertion_point(field_release:schema.improbable.graphtier.NetworkGraphCommand.Commands.command_network_graph_response)
  clear_has_command_network_graph_response();
  ::schema::improbable::graphtier::NetworkGraphResponse* temp = command_network_graph_response_;
  command_network_graph_response_ = NULL;
  return temp;
}
void NetworkGraphCommand_Commands::set_allocated_command_network_graph_response(::schema::improbable::graphtier::NetworkGraphResponse* command_network_graph_response) {
  delete command_network_graph_response_;
  command_network_graph_response_ = command_network_graph_response;
  if (command_network_graph_response) {
    set_has_command_network_graph_response();
  } else {
    clear_has_command_network_graph_response();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.graphtier.NetworkGraphCommand.Commands.command_network_graph_response)
}

inline const NetworkGraphCommand_Commands* NetworkGraphCommand_Commands::internal_default_instance() {
  return &NetworkGraphCommand_Commands_default_instance_.get();
}
// -------------------------------------------------------------------

// NetworkGraphCommand

inline const NetworkGraphCommand* NetworkGraphCommand::internal_default_instance() {
  return &NetworkGraphCommand_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace graphtier
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
