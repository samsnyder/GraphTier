// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/graphtier/NetworkData.schema
#ifndef SPATIALOS_SCHEMA_improbable_graphtier_NetworkData_schema_3806475508392710483_INCLUDED
#define SPATIALOS_SCHEMA_improbable_graphtier_NetworkData_schema_3806475508392710483_INCLUDED
#include <improbable/collections.h>
#include <improbable/math/coordinates.h>
#include <improbable/math/vector3d.h>
#include <improbable/math/vector3f.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

// Schema forward declarations.
//----------------------------------------------------------------

namespace schema {
namespace improbable {
namespace graphtier {

class ExitNodeSet;
class NetworkDataData;

}  // ::improbable
}  // ::graphtier
}  // ::schema

namespace improbable {
namespace graphtier {

// Forward declarations.
//----------------------------------------------------------------

class ExitNodeSet;
class NetworkDataData;

namespace detail {
const ::worker::detail::ClientComponentVtable& Vtable_NetworkData();
struct GenericCommandObject_NetworkData {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class ExitNodeSet {
public:
  // Main constructor.
  ExitNodeSet(
      const ::worker::List< ::worker::EntityId >& exit_nodes,
      ::worker::EntityId network_id);

  // Copyable and moveable.
  ExitNodeSet(ExitNodeSet&&) = default;
  ExitNodeSet(const ExitNodeSet&) = default;
  ExitNodeSet& operator=(ExitNodeSet&&) = default;
  ExitNodeSet& operator=(const ExitNodeSet&) = default;
  ~ExitNodeSet() = default;

  bool operator==(const ExitNodeSet&) const;
  bool operator!=(const ExitNodeSet&) const;

  // Field exit_nodes = 1.
  const ::worker::List< ::worker::EntityId >& exit_nodes() const;
  ::worker::List< ::worker::EntityId >& exit_nodes();
  ExitNodeSet& set_exit_nodes(const ::worker::List< ::worker::EntityId >&);

  // Field network_id = 2.
  ::worker::EntityId network_id() const;
  ::worker::EntityId& network_id();
  ExitNodeSet& set_network_id(::worker::EntityId);

private:
  ::worker::List< ::worker::EntityId > _exit_nodes;
  ::worker::EntityId _network_id;
};

class NetworkDataData {
public:
  // Main constructor.
  NetworkDataData(
      std::uint32_t level,
      const ::worker::List< ::worker::EntityId >& nodes,
      const ::worker::List< ::improbable::graphtier::ExitNodeSet >& exit_node_sets);

  // Copyable and moveable.
  NetworkDataData(NetworkDataData&&) = default;
  NetworkDataData(const NetworkDataData&) = default;
  NetworkDataData& operator=(NetworkDataData&&) = default;
  NetworkDataData& operator=(const NetworkDataData&) = default;
  ~NetworkDataData() = default;

  bool operator==(const NetworkDataData&) const;
  bool operator!=(const NetworkDataData&) const;

  // Field level = 1.
  std::uint32_t level() const;
  std::uint32_t& level();
  NetworkDataData& set_level(std::uint32_t);

  // Field nodes = 2.
  const ::worker::List< ::worker::EntityId >& nodes() const;
  ::worker::List< ::worker::EntityId >& nodes();
  NetworkDataData& set_nodes(const ::worker::List< ::worker::EntityId >&);

  // Field exit_node_sets = 3.
  const ::worker::List< ::improbable::graphtier::ExitNodeSet >& exit_node_sets() const;
  ::worker::List< ::improbable::graphtier::ExitNodeSet >& exit_node_sets();
  NetworkDataData& set_exit_node_sets(const ::worker::List< ::improbable::graphtier::ExitNodeSet >&);

private:
  std::uint32_t _level;
  ::worker::List< ::worker::EntityId > _nodes;
  ::worker::List< ::improbable::graphtier::ExitNodeSet > _exit_node_sets;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::graphtier::NetworkData;
 *
 *   NetworkData::Update update;
 *   connection.SendComponentUpdate< NetworkData >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< NetworkData >(
 *       [&](const worker::ComponentUpdateOp< NetworkData >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         NetworkData::Update update = op.GetUpdate();
 *       });
 *
 *   NetworkData::Data data = entity.Get< NetworkData >();
 */
struct NetworkData : ::worker::detail::ComponentMetaclassBase<
    NetworkData, detail::Vtable_NetworkData> {
  static constexpr const ::worker::ComponentId ComponentId = 8002;
  using Data = ::improbable::graphtier::NetworkDataData;
  using GenericCommandObject = detail::GenericCommandObject_NetworkData;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::graphtier::NetworkDataData object. */
    static Update FromInitialData(const ::improbable::graphtier::NetworkDataData& data);

    /**
     * Converts to a ::improbable::graphtier::NetworkDataData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::graphtier::NetworkDataData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::graphtier::NetworkDataData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::graphtier::NetworkDataData&) const;

    // Field level = 1.
    const ::worker::Option< std::uint32_t >& level() const;
    ::worker::Option< std::uint32_t >& level();
    Update& set_level(std::uint32_t);

    // Field nodes = 2.
    const ::worker::Option< ::worker::List< ::worker::EntityId > >& nodes() const;
    ::worker::Option< ::worker::List< ::worker::EntityId > >& nodes();
    Update& set_nodes(const ::worker::List< ::worker::EntityId >&);

    // Field exit_node_sets = 3.
    const ::worker::Option< ::worker::List< ::improbable::graphtier::ExitNodeSet > >& exit_node_sets() const;
    ::worker::Option< ::worker::List< ::improbable::graphtier::ExitNodeSet > >& exit_node_sets();
    Update& set_exit_node_sets(const ::worker::List< ::improbable::graphtier::ExitNodeSet >&);

  private:
    ::worker::Option< std::uint32_t > _level;
    ::worker::Option< ::worker::List< ::worker::EntityId > > _nodes;
    ::worker::Option< ::worker::List< ::improbable::graphtier::ExitNodeSet > > _exit_node_sets;
  };

};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Serialize_ExitNodeSet(
    const ::improbable::graphtier::ExitNodeSet&,
    ::schema::improbable::graphtier::ExitNodeSet&);

::improbable::graphtier::ExitNodeSet Deserialize_ExitNodeSet(
    const ::schema::improbable::graphtier::ExitNodeSet&);

void Serialize_NetworkDataData(
    const ::improbable::graphtier::NetworkDataData&,
    ::schema::improbable::graphtier::NetworkDataData&);

::improbable::graphtier::NetworkDataData Deserialize_NetworkDataData(
    const ::schema::improbable::graphtier::NetworkDataData&);

}  // ::detail
}  // ::graphtier
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_graphtier_NetworkData_schema_3806475508392710483_INCLUDED
