// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/graphtier/NetworkData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/graphtier/NetworkData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace graphtier {

namespace {

const ::google::protobuf::Descriptor* ExitNodeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitNodeSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkDataData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkDataData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkData_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkData_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkData_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkData_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fgraphtier_2fNetworkData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fgraphtier_2fNetworkData_2eproto() {
  protobuf_AddDesc_improbable_2fgraphtier_2fNetworkData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/graphtier/NetworkData.proto");
  GOOGLE_CHECK(file != NULL);
  ExitNodeSet_descriptor_ = file->message_type(0);
  static const int ExitNodeSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitNodeSet, field1_exit_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitNodeSet, field2_network_id_),
  };
  ExitNodeSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExitNodeSet_descriptor_,
      ExitNodeSet::internal_default_instance(),
      ExitNodeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitNodeSet, _has_bits_),
      -1,
      -1,
      sizeof(ExitNodeSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitNodeSet, _internal_metadata_));
  NetworkDataData_descriptor_ = file->message_type(1);
  static const int NetworkDataData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDataData, field1_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDataData, field2_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDataData, field3_exit_node_sets_),
  };
  NetworkDataData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkDataData_descriptor_,
      NetworkDataData::internal_default_instance(),
      NetworkDataData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDataData, _has_bits_),
      -1,
      -1,
      sizeof(NetworkDataData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDataData, _internal_metadata_));
  NetworkData_descriptor_ = file->message_type(2);
  static const int NetworkData_offsets_[1] = {
  };
  NetworkData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkData_descriptor_,
      NetworkData::internal_default_instance(),
      NetworkData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkData, _has_bits_),
      -1,
      -1,
      sizeof(NetworkData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkData, _internal_metadata_));
  NetworkData_Events_descriptor_ = NetworkData_descriptor_->nested_type(0);
  static const int NetworkData_Events_offsets_[1] = {
  };
  NetworkData_Events_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkData_Events_descriptor_,
      NetworkData_Events::internal_default_instance(),
      NetworkData_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkData_Events, _has_bits_),
      -1,
      -1,
      sizeof(NetworkData_Events),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkData_Events, _internal_metadata_));
  NetworkData_Commands_descriptor_ = NetworkData_descriptor_->nested_type(1);
  static const int NetworkData_Commands_offsets_[1] = {
  };
  NetworkData_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkData_Commands_descriptor_,
      NetworkData_Commands::internal_default_instance(),
      NetworkData_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkData_Commands, _has_bits_),
      -1,
      -1,
      sizeof(NetworkData_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkData_Commands, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fgraphtier_2fNetworkData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExitNodeSet_descriptor_, ExitNodeSet::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkDataData_descriptor_, NetworkDataData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkData_descriptor_, NetworkData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkData_Events_descriptor_, NetworkData_Events::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkData_Commands_descriptor_, NetworkData_Commands::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fgraphtier_2fNetworkData_2eproto() {
  ExitNodeSet_default_instance_.Shutdown();
  delete ExitNodeSet_reflection_;
  NetworkDataData_default_instance_.Shutdown();
  delete NetworkDataData_reflection_;
  NetworkData_default_instance_.Shutdown();
  delete NetworkData_reflection_;
  NetworkData_Events_default_instance_.Shutdown();
  delete NetworkData_Events_reflection_;
  NetworkData_Commands_default_instance_.Shutdown();
  delete NetworkData_Commands_reflection_;
}

void protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_InitDefaults_improbable_2fentity_5fstate_2eproto();
  ExitNodeSet_default_instance_.DefaultConstruct();
  NetworkDataData_default_instance_.DefaultConstruct();
  NetworkData_default_instance_.DefaultConstruct();
  NetworkData_Events_default_instance_.DefaultConstruct();
  NetworkData_Commands_default_instance_.DefaultConstruct();
  ExitNodeSet_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetworkDataData_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetworkData_default_instance_.get_mutable()->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityState::internal_default_instance(),
    8002, 11, false, false,
    ::schema::improbable::graphtier::NetworkDataData::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityEvent::internal_default_instance(),
    8002, 11, false, false,
    ::schema::improbable::graphtier::NetworkData_Events::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityCommand::internal_default_instance(),
    8002, 11, false, false,
    ::schema::improbable::graphtier::NetworkData_Commands::internal_default_instance());
  NetworkData_Events_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetworkData_Commands_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto_once_);
void protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto_once_,
                 &protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto_impl);
}
void protobuf_AddDesc_improbable_2fgraphtier_2fNetworkData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&improbable/graphtier/NetworkData.proto"
    "\022\033schema.improbable.graphtier\032\035improbabl"
    "e/entity_state.proto\"m\n\013ExitNodeSet\022/\n\021f"
    "ield1_exit_nodes\030\001 \003(\003B\024\020\001\302\363\030\nexit_nodes"
    "\350\363\030\001\022-\n\021field2_network_id\030\002 \001(\003B\022\302\363\030\nnet"
    "work_id\350\363\030\001\"\266\001\n\017NetworkDataData\022\037\n\014field"
    "1_level\030\001 \001(\rB\t\302\363\030\005level\022%\n\014field2_nodes"
    "\030\002 \003(\003B\017\020\001\302\363\030\005nodes\350\363\030\001\022[\n\025field3_exit_n"
    "ode_sets\030\003 \003(\0132(.schema.improbable.graph"
    "tier.ExitNodeSetB\022\302\363\030\016exit_node_sets\"\226\003\n"
    "\013NetworkData\032\010\n\006Events\032\n\n\010Commands2j\n\023co"
    "mponent_extension\022\036.schema.improbable.En"
    "tityState\030\302> \001(\0132,.schema.improbable.gra"
    "phtier.NetworkDataData2i\n\017event_extensio"
    "n\022\036.schema.improbable.EntityEvent\030\302> \001(\013"
    "2/.schema.improbable.graphtier.NetworkDa"
    "ta.Events2o\n\021command_extension\022 .schema."
    "improbable.EntityCommand\030\302> \001(\01321.schema"
    ".improbable.graphtier.NetworkData.Comman"
    "ds:)\302\363\030%\n improbable.graphtier.NetworkDa"
    "ta\020\302>B\027B\025NetworkDataOuterClass", 830);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/graphtier/NetworkData.proto", &protobuf_RegisterTypes);
  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fgraphtier_2fNetworkData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_improbable_2fgraphtier_2fNetworkData_2eproto_once_);
void protobuf_AddDesc_improbable_2fgraphtier_2fNetworkData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_improbable_2fgraphtier_2fNetworkData_2eproto_once_,
                 &protobuf_AddDesc_improbable_2fgraphtier_2fNetworkData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fgraphtier_2fNetworkData_2eproto {
  StaticDescriptorInitializer_improbable_2fgraphtier_2fNetworkData_2eproto() {
    protobuf_AddDesc_improbable_2fgraphtier_2fNetworkData_2eproto();
  }
} static_descriptor_initializer_improbable_2fgraphtier_2fNetworkData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExitNodeSet::kField1ExitNodesFieldNumber;
const int ExitNodeSet::kField2NetworkIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExitNodeSet::ExitNodeSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.ExitNodeSet)
}

void ExitNodeSet::InitAsDefaultInstance() {
}

ExitNodeSet::ExitNodeSet(const ExitNodeSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.ExitNodeSet)
}

void ExitNodeSet::SharedCtor() {
  _cached_size_ = 0;
  field2_network_id_ = GOOGLE_LONGLONG(0);
}

ExitNodeSet::~ExitNodeSet() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.ExitNodeSet)
  SharedDtor();
}

void ExitNodeSet::SharedDtor() {
}

void ExitNodeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitNodeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitNodeSet_descriptor_;
}

const ExitNodeSet& ExitNodeSet::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ExitNodeSet> ExitNodeSet_default_instance_;

ExitNodeSet* ExitNodeSet::New(::google::protobuf::Arena* arena) const {
  ExitNodeSet* n = new ExitNodeSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExitNodeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.ExitNodeSet)
  field2_network_id_ = GOOGLE_LONGLONG(0);
  field1_exit_nodes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExitNodeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.ExitNodeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 field1_exit_nodes = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_field1_exit_nodes())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_field1_exit_nodes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_field2_network_id;
        break;
      }

      // optional int64 field2_network_id = 2;
      case 2: {
        if (tag == 16) {
         parse_field2_network_id:
          set_has_field2_network_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field2_network_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.ExitNodeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.ExitNodeSet)
  return false;
#undef DO_
}

void ExitNodeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.ExitNodeSet)
  // repeated int64 field1_exit_nodes = 1 [packed = true];
  if (this->field1_exit_nodes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_field1_exit_nodes_cached_byte_size_);
  }
  for (int i = 0; i < this->field1_exit_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->field1_exit_nodes(i), output);
  }

  // optional int64 field2_network_id = 2;
  if (has_field2_network_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->field2_network_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.ExitNodeSet)
}

::google::protobuf::uint8* ExitNodeSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.ExitNodeSet)
  // repeated int64 field1_exit_nodes = 1 [packed = true];
  if (this->field1_exit_nodes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _field1_exit_nodes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->field1_exit_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->field1_exit_nodes(i), target);
  }

  // optional int64 field2_network_id = 2;
  if (has_field2_network_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->field2_network_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.ExitNodeSet)
  return target;
}

size_t ExitNodeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.ExitNodeSet)
  size_t total_size = 0;

  // optional int64 field2_network_id = 2;
  if (has_field2_network_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->field2_network_id());
  }

  // repeated int64 field1_exit_nodes = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->field1_exit_nodes_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->field1_exit_nodes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _field1_exit_nodes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitNodeSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.ExitNodeSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExitNodeSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExitNodeSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.ExitNodeSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.ExitNodeSet)
    UnsafeMergeFrom(*source);
  }
}

void ExitNodeSet::MergeFrom(const ExitNodeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.ExitNodeSet)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ExitNodeSet::UnsafeMergeFrom(const ExitNodeSet& from) {
  GOOGLE_DCHECK(&from != this);
  field1_exit_nodes_.UnsafeMergeFrom(from.field1_exit_nodes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_field2_network_id()) {
      set_field2_network_id(from.field2_network_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ExitNodeSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.ExitNodeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitNodeSet::CopyFrom(const ExitNodeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.ExitNodeSet)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ExitNodeSet::IsInitialized() const {

  return true;
}

void ExitNodeSet::Swap(ExitNodeSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExitNodeSet::InternalSwap(ExitNodeSet* other) {
  field1_exit_nodes_.UnsafeArenaSwap(&other->field1_exit_nodes_);
  std::swap(field2_network_id_, other->field2_network_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExitNodeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitNodeSet_descriptor_;
  metadata.reflection = ExitNodeSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExitNodeSet

// repeated int64 field1_exit_nodes = 1 [packed = true];
int ExitNodeSet::field1_exit_nodes_size() const {
  return field1_exit_nodes_.size();
}
void ExitNodeSet::clear_field1_exit_nodes() {
  field1_exit_nodes_.Clear();
}
::google::protobuf::int64 ExitNodeSet::field1_exit_nodes(int index) const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.ExitNodeSet.field1_exit_nodes)
  return field1_exit_nodes_.Get(index);
}
void ExitNodeSet::set_field1_exit_nodes(int index, ::google::protobuf::int64 value) {
  field1_exit_nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.ExitNodeSet.field1_exit_nodes)
}
void ExitNodeSet::add_field1_exit_nodes(::google::protobuf::int64 value) {
  field1_exit_nodes_.Add(value);
  // @@protoc_insertion_point(field_add:schema.improbable.graphtier.ExitNodeSet.field1_exit_nodes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ExitNodeSet::field1_exit_nodes() const {
  // @@protoc_insertion_point(field_list:schema.improbable.graphtier.ExitNodeSet.field1_exit_nodes)
  return field1_exit_nodes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ExitNodeSet::mutable_field1_exit_nodes() {
  // @@protoc_insertion_point(field_mutable_list:schema.improbable.graphtier.ExitNodeSet.field1_exit_nodes)
  return &field1_exit_nodes_;
}

// optional int64 field2_network_id = 2;
bool ExitNodeSet::has_field2_network_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExitNodeSet::set_has_field2_network_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ExitNodeSet::clear_has_field2_network_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExitNodeSet::clear_field2_network_id() {
  field2_network_id_ = GOOGLE_LONGLONG(0);
  clear_has_field2_network_id();
}
::google::protobuf::int64 ExitNodeSet::field2_network_id() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.ExitNodeSet.field2_network_id)
  return field2_network_id_;
}
void ExitNodeSet::set_field2_network_id(::google::protobuf::int64 value) {
  set_has_field2_network_id();
  field2_network_id_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.ExitNodeSet.field2_network_id)
}

inline const ExitNodeSet* ExitNodeSet::internal_default_instance() {
  return &ExitNodeSet_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkDataData::kField1LevelFieldNumber;
const int NetworkDataData::kField2NodesFieldNumber;
const int NetworkDataData::kField3ExitNodeSetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkDataData::NetworkDataData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkDataData)
}

void NetworkDataData::InitAsDefaultInstance() {
}

NetworkDataData::NetworkDataData(const NetworkDataData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkDataData)
}

void NetworkDataData::SharedCtor() {
  _cached_size_ = 0;
  field1_level_ = 0u;
}

NetworkDataData::~NetworkDataData() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkDataData)
  SharedDtor();
}

void NetworkDataData::SharedDtor() {
}

void NetworkDataData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkDataData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkDataData_descriptor_;
}

const NetworkDataData& NetworkDataData::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkDataData> NetworkDataData_default_instance_;

NetworkDataData* NetworkDataData::New(::google::protobuf::Arena* arena) const {
  NetworkDataData* n = new NetworkDataData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkDataData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkDataData)
  field1_level_ = 0u;
  field2_nodes_.Clear();
  field3_exit_node_sets_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkDataData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkDataData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 field1_level = 1;
      case 1: {
        if (tag == 8) {
          set_has_field1_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field1_level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_field2_nodes;
        break;
      }

      // repeated int64 field2_nodes = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_field2_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_field2_nodes())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_field2_nodes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_field3_exit_node_sets;
        break;
      }

      // repeated .schema.improbable.graphtier.ExitNodeSet field3_exit_node_sets = 3;
      case 3: {
        if (tag == 26) {
         parse_field3_exit_node_sets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_field3_exit_node_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_field3_exit_node_sets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_field3_exit_node_sets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkDataData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkDataData)
  return false;
#undef DO_
}

void NetworkDataData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkDataData)
  // optional uint32 field1_level = 1;
  if (has_field1_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->field1_level(), output);
  }

  // repeated int64 field2_nodes = 2 [packed = true];
  if (this->field2_nodes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_field2_nodes_cached_byte_size_);
  }
  for (int i = 0; i < this->field2_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->field2_nodes(i), output);
  }

  // repeated .schema.improbable.graphtier.ExitNodeSet field3_exit_node_sets = 3;
  for (unsigned int i = 0, n = this->field3_exit_node_sets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->field3_exit_node_sets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkDataData)
}

::google::protobuf::uint8* NetworkDataData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkDataData)
  // optional uint32 field1_level = 1;
  if (has_field1_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->field1_level(), target);
  }

  // repeated int64 field2_nodes = 2 [packed = true];
  if (this->field2_nodes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _field2_nodes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->field2_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->field2_nodes(i), target);
  }

  // repeated .schema.improbable.graphtier.ExitNodeSet field3_exit_node_sets = 3;
  for (unsigned int i = 0, n = this->field3_exit_node_sets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->field3_exit_node_sets(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkDataData)
  return target;
}

size_t NetworkDataData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkDataData)
  size_t total_size = 0;

  // optional uint32 field1_level = 1;
  if (has_field1_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->field1_level());
  }

  // repeated int64 field2_nodes = 2 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->field2_nodes_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->field2_nodes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _field2_nodes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .schema.improbable.graphtier.ExitNodeSet field3_exit_node_sets = 3;
  {
    unsigned int count = this->field3_exit_node_sets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field3_exit_node_sets(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkDataData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkDataData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkDataData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkDataData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkDataData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkDataData)
    UnsafeMergeFrom(*source);
  }
}

void NetworkDataData::MergeFrom(const NetworkDataData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkDataData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkDataData::UnsafeMergeFrom(const NetworkDataData& from) {
  GOOGLE_DCHECK(&from != this);
  field2_nodes_.UnsafeMergeFrom(from.field2_nodes_);
  field3_exit_node_sets_.MergeFrom(from.field3_exit_node_sets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_level()) {
      set_field1_level(from.field1_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkDataData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkDataData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkDataData::CopyFrom(const NetworkDataData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkDataData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkDataData::IsInitialized() const {

  return true;
}

void NetworkDataData::Swap(NetworkDataData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkDataData::InternalSwap(NetworkDataData* other) {
  std::swap(field1_level_, other->field1_level_);
  field2_nodes_.UnsafeArenaSwap(&other->field2_nodes_);
  field3_exit_node_sets_.UnsafeArenaSwap(&other->field3_exit_node_sets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkDataData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkDataData_descriptor_;
  metadata.reflection = NetworkDataData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkDataData

// optional uint32 field1_level = 1;
bool NetworkDataData::has_field1_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkDataData::set_has_field1_level() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkDataData::clear_has_field1_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkDataData::clear_field1_level() {
  field1_level_ = 0u;
  clear_has_field1_level();
}
::google::protobuf::uint32 NetworkDataData::field1_level() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NetworkDataData.field1_level)
  return field1_level_;
}
void NetworkDataData::set_field1_level(::google::protobuf::uint32 value) {
  set_has_field1_level();
  field1_level_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.NetworkDataData.field1_level)
}

// repeated int64 field2_nodes = 2 [packed = true];
int NetworkDataData::field2_nodes_size() const {
  return field2_nodes_.size();
}
void NetworkDataData::clear_field2_nodes() {
  field2_nodes_.Clear();
}
::google::protobuf::int64 NetworkDataData::field2_nodes(int index) const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NetworkDataData.field2_nodes)
  return field2_nodes_.Get(index);
}
void NetworkDataData::set_field2_nodes(int index, ::google::protobuf::int64 value) {
  field2_nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.NetworkDataData.field2_nodes)
}
void NetworkDataData::add_field2_nodes(::google::protobuf::int64 value) {
  field2_nodes_.Add(value);
  // @@protoc_insertion_point(field_add:schema.improbable.graphtier.NetworkDataData.field2_nodes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
NetworkDataData::field2_nodes() const {
  // @@protoc_insertion_point(field_list:schema.improbable.graphtier.NetworkDataData.field2_nodes)
  return field2_nodes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
NetworkDataData::mutable_field2_nodes() {
  // @@protoc_insertion_point(field_mutable_list:schema.improbable.graphtier.NetworkDataData.field2_nodes)
  return &field2_nodes_;
}

// repeated .schema.improbable.graphtier.ExitNodeSet field3_exit_node_sets = 3;
int NetworkDataData::field3_exit_node_sets_size() const {
  return field3_exit_node_sets_.size();
}
void NetworkDataData::clear_field3_exit_node_sets() {
  field3_exit_node_sets_.Clear();
}
const ::schema::improbable::graphtier::ExitNodeSet& NetworkDataData::field3_exit_node_sets(int index) const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NetworkDataData.field3_exit_node_sets)
  return field3_exit_node_sets_.Get(index);
}
::schema::improbable::graphtier::ExitNodeSet* NetworkDataData::mutable_field3_exit_node_sets(int index) {
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.NetworkDataData.field3_exit_node_sets)
  return field3_exit_node_sets_.Mutable(index);
}
::schema::improbable::graphtier::ExitNodeSet* NetworkDataData::add_field3_exit_node_sets() {
  // @@protoc_insertion_point(field_add:schema.improbable.graphtier.NetworkDataData.field3_exit_node_sets)
  return field3_exit_node_sets_.Add();
}
::google::protobuf::RepeatedPtrField< ::schema::improbable::graphtier::ExitNodeSet >*
NetworkDataData::mutable_field3_exit_node_sets() {
  // @@protoc_insertion_point(field_mutable_list:schema.improbable.graphtier.NetworkDataData.field3_exit_node_sets)
  return &field3_exit_node_sets_;
}
const ::google::protobuf::RepeatedPtrField< ::schema::improbable::graphtier::ExitNodeSet >&
NetworkDataData::field3_exit_node_sets() const {
  // @@protoc_insertion_point(field_list:schema.improbable.graphtier.NetworkDataData.field3_exit_node_sets)
  return field3_exit_node_sets_;
}

inline const NetworkDataData* NetworkDataData::internal_default_instance() {
  return &NetworkDataData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkData_Events::NetworkData_Events()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkData.Events)
}

void NetworkData_Events::InitAsDefaultInstance() {
}

NetworkData_Events::NetworkData_Events(const NetworkData_Events& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkData.Events)
}

void NetworkData_Events::SharedCtor() {
  _cached_size_ = 0;
}

NetworkData_Events::~NetworkData_Events() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkData.Events)
  SharedDtor();
}

void NetworkData_Events::SharedDtor() {
}

void NetworkData_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkData_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkData_Events_descriptor_;
}

const NetworkData_Events& NetworkData_Events::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkData_Events> NetworkData_Events_default_instance_;

NetworkData_Events* NetworkData_Events::New(::google::protobuf::Arena* arena) const {
  NetworkData_Events* n = new NetworkData_Events;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkData_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkData.Events)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkData_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkData.Events)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkData.Events)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkData.Events)
  return false;
#undef DO_
}

void NetworkData_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkData.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkData.Events)
}

::google::protobuf::uint8* NetworkData_Events::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkData.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkData.Events)
  return target;
}

size_t NetworkData_Events::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkData.Events)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkData_Events::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkData.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkData_Events* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkData_Events>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkData.Events)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkData.Events)
    UnsafeMergeFrom(*source);
  }
}

void NetworkData_Events::MergeFrom(const NetworkData_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkData.Events)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkData_Events::UnsafeMergeFrom(const NetworkData_Events& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkData_Events::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkData.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkData_Events::CopyFrom(const NetworkData_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkData.Events)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkData_Events::IsInitialized() const {

  return true;
}

void NetworkData_Events::Swap(NetworkData_Events* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkData_Events::InternalSwap(NetworkData_Events* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkData_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkData_Events_descriptor_;
  metadata.reflection = NetworkData_Events_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkData_Commands::NetworkData_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkData.Commands)
}

void NetworkData_Commands::InitAsDefaultInstance() {
}

NetworkData_Commands::NetworkData_Commands(const NetworkData_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkData.Commands)
}

void NetworkData_Commands::SharedCtor() {
  _cached_size_ = 0;
}

NetworkData_Commands::~NetworkData_Commands() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkData.Commands)
  SharedDtor();
}

void NetworkData_Commands::SharedDtor() {
}

void NetworkData_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkData_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkData_Commands_descriptor_;
}

const NetworkData_Commands& NetworkData_Commands::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkData_Commands> NetworkData_Commands_default_instance_;

NetworkData_Commands* NetworkData_Commands::New(::google::protobuf::Arena* arena) const {
  NetworkData_Commands* n = new NetworkData_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkData_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkData.Commands)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkData_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkData.Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkData.Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkData.Commands)
  return false;
#undef DO_
}

void NetworkData_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkData.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkData.Commands)
}

::google::protobuf::uint8* NetworkData_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkData.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkData.Commands)
  return target;
}

size_t NetworkData_Commands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkData.Commands)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkData_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkData.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkData_Commands* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkData_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkData.Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkData.Commands)
    UnsafeMergeFrom(*source);
  }
}

void NetworkData_Commands::MergeFrom(const NetworkData_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkData.Commands)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkData_Commands::UnsafeMergeFrom(const NetworkData_Commands& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkData_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkData.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkData_Commands::CopyFrom(const NetworkData_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkData.Commands)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkData_Commands::IsInitialized() const {

  return true;
}

void NetworkData_Commands::Swap(NetworkData_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkData_Commands::InternalSwap(NetworkData_Commands* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkData_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkData_Commands_descriptor_;
  metadata.reflection = NetworkData_Commands_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkData::kComponentExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NetworkDataData >, 11, false >
  NetworkData::component_extension(kComponentExtensionFieldNumber, *::schema::improbable::graphtier::NetworkDataData::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkData::kEventExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NetworkData_Events >, 11, false >
  NetworkData::event_extension(kEventExtensionFieldNumber, *::schema::improbable::graphtier::NetworkData_Events::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkData::kCommandExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NetworkData_Commands >, 11, false >
  NetworkData::command_extension(kCommandExtensionFieldNumber, *::schema::improbable::graphtier::NetworkData_Commands::internal_default_instance());
NetworkData::NetworkData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkData)
}

void NetworkData::InitAsDefaultInstance() {
}

NetworkData::NetworkData(const NetworkData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkData)
}

void NetworkData::SharedCtor() {
  _cached_size_ = 0;
}

NetworkData::~NetworkData() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkData)
  SharedDtor();
}

void NetworkData::SharedDtor() {
}

void NetworkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkData_descriptor_;
}

const NetworkData& NetworkData::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkData> NetworkData_default_instance_;

NetworkData* NetworkData::New(::google::protobuf::Arena* arena) const {
  NetworkData* n = new NetworkData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkData)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkData)
  return false;
#undef DO_
}

void NetworkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkData)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkData)
}

::google::protobuf::uint8* NetworkData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkData)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkData)
  return target;
}

size_t NetworkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkData)
    UnsafeMergeFrom(*source);
  }
}

void NetworkData::MergeFrom(const NetworkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkData::UnsafeMergeFrom(const NetworkData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkData::CopyFrom(const NetworkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkData::IsInitialized() const {

  return true;
}

void NetworkData::Swap(NetworkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkData::InternalSwap(NetworkData* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkData_descriptor_;
  metadata.reflection = NetworkData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkData_Events

inline const NetworkData_Events* NetworkData_Events::internal_default_instance() {
  return &NetworkData_Events_default_instance_.get();
}
// -------------------------------------------------------------------

// NetworkData_Commands

inline const NetworkData_Commands* NetworkData_Commands::internal_default_instance() {
  return &NetworkData_Commands_default_instance_.get();
}
// -------------------------------------------------------------------

// NetworkData

inline const NetworkData* NetworkData::internal_default_instance() {
  return &NetworkData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace graphtier
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
