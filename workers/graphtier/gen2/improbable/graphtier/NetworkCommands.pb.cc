// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/graphtier/NetworkCommands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/graphtier/NetworkCommands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace graphtier {

namespace {

const ::google::protobuf::Descriptor* NodeToNodeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeToNodeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeToNodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeToNodeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkCommandsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkCommandsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkCommands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkCommands_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkCommands_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkCommands_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkCommands_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkCommands_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fgraphtier_2fNetworkCommands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fgraphtier_2fNetworkCommands_2eproto() {
  protobuf_AddDesc_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/graphtier/NetworkCommands.proto");
  GOOGLE_CHECK(file != NULL);
  NodeToNodeResponse_descriptor_ = file->message_type(0);
  static const int NodeToNodeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeToNodeResponse, field1_path_),
  };
  NodeToNodeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeToNodeResponse_descriptor_,
      NodeToNodeResponse::internal_default_instance(),
      NodeToNodeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeToNodeResponse, _has_bits_),
      -1,
      -1,
      sizeof(NodeToNodeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeToNodeResponse, _internal_metadata_));
  NodeToNodeRequest_descriptor_ = file->message_type(1);
  static const int NodeToNodeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeToNodeRequest, field1_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeToNodeRequest, field2_to_),
  };
  NodeToNodeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeToNodeRequest_descriptor_,
      NodeToNodeRequest::internal_default_instance(),
      NodeToNodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeToNodeRequest, _has_bits_),
      -1,
      -1,
      sizeof(NodeToNodeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeToNodeRequest, _internal_metadata_));
  NetworkCommandsData_descriptor_ = file->message_type(2);
  static const int NetworkCommandsData_offsets_[1] = {
  };
  NetworkCommandsData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkCommandsData_descriptor_,
      NetworkCommandsData::internal_default_instance(),
      NetworkCommandsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCommandsData, _has_bits_),
      -1,
      -1,
      sizeof(NetworkCommandsData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCommandsData, _internal_metadata_));
  NetworkCommands_descriptor_ = file->message_type(3);
  static const int NetworkCommands_offsets_[1] = {
  };
  NetworkCommands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkCommands_descriptor_,
      NetworkCommands::internal_default_instance(),
      NetworkCommands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCommands, _has_bits_),
      -1,
      -1,
      sizeof(NetworkCommands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCommands, _internal_metadata_));
  NetworkCommands_Events_descriptor_ = NetworkCommands_descriptor_->nested_type(0);
  static const int NetworkCommands_Events_offsets_[1] = {
  };
  NetworkCommands_Events_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkCommands_Events_descriptor_,
      NetworkCommands_Events::internal_default_instance(),
      NetworkCommands_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCommands_Events, _has_bits_),
      -1,
      -1,
      sizeof(NetworkCommands_Events),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCommands_Events, _internal_metadata_));
  NetworkCommands_Commands_descriptor_ = NetworkCommands_descriptor_->nested_type(1);
  static const int NetworkCommands_Commands_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCommands_Commands, command_node_to_node_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCommands_Commands, command_node_to_node_response_),
  };
  NetworkCommands_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkCommands_Commands_descriptor_,
      NetworkCommands_Commands::internal_default_instance(),
      NetworkCommands_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCommands_Commands, _has_bits_),
      -1,
      -1,
      sizeof(NetworkCommands_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkCommands_Commands, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fgraphtier_2fNetworkCommands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeToNodeResponse_descriptor_, NodeToNodeResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeToNodeRequest_descriptor_, NodeToNodeRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkCommandsData_descriptor_, NetworkCommandsData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkCommands_descriptor_, NetworkCommands::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkCommands_Events_descriptor_, NetworkCommands_Events::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkCommands_Commands_descriptor_, NetworkCommands_Commands::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fgraphtier_2fNetworkCommands_2eproto() {
  NodeToNodeResponse_default_instance_.Shutdown();
  delete NodeToNodeResponse_reflection_;
  NodeToNodeRequest_default_instance_.Shutdown();
  delete NodeToNodeRequest_reflection_;
  NetworkCommandsData_default_instance_.Shutdown();
  delete NetworkCommandsData_reflection_;
  NetworkCommands_default_instance_.Shutdown();
  delete NetworkCommands_reflection_;
  NetworkCommands_Events_default_instance_.Shutdown();
  delete NetworkCommands_Events_reflection_;
  NetworkCommands_Commands_default_instance_.Shutdown();
  delete NetworkCommands_Commands_reflection_;
}

void protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_InitDefaults_improbable_2fentity_5fstate_2eproto();
  ::schema::improbable::graphtier::protobuf_InitDefaults_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  NodeToNodeResponse_default_instance_.DefaultConstruct();
  NodeToNodeRequest_default_instance_.DefaultConstruct();
  NetworkCommandsData_default_instance_.DefaultConstruct();
  NetworkCommands_default_instance_.DefaultConstruct();
  NetworkCommands_Events_default_instance_.DefaultConstruct();
  NetworkCommands_Commands_default_instance_.DefaultConstruct();
  NodeToNodeResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeToNodeRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetworkCommandsData_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetworkCommands_default_instance_.get_mutable()->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityState::internal_default_instance(),
    8001, 11, false, false,
    ::schema::improbable::graphtier::NetworkCommandsData::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityEvent::internal_default_instance(),
    8001, 11, false, false,
    ::schema::improbable::graphtier::NetworkCommands_Events::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::schema::improbable::EntityCommand::internal_default_instance(),
    8001, 11, false, false,
    ::schema::improbable::graphtier::NetworkCommands_Commands::internal_default_instance());
  NetworkCommands_Events_default_instance_.get_mutable()->InitAsDefaultInstance();
  NetworkCommands_Commands_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto_once_);
void protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto_once_,
                 &protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto_impl);
}
void protobuf_AddDesc_improbable_2fgraphtier_2fNetworkCommands_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n*improbable/graphtier/NetworkCommands.p"
    "roto\022\033schema.improbable.graphtier\032\035impro"
    "bable/entity_state.proto\032)improbable/gra"
    "phtier/GraphTierTypes.proto\"V\n\022NodeToNod"
    "eResponse\022@\n\013field1_path\030\001 \001(\0132!.schema."
    "improbable.graphtier.PathB\010\302\363\030\004path\"U\n\021N"
    "odeToNodeRequest\022!\n\013field1_from\030\001 \001(\003B\014\302"
    "\363\030\004from\350\363\030\001\022\035\n\tfield2_to\030\002 \001(\003B\n\302\363\030\002to\350\363"
    "\030\001\"\025\n\023NetworkCommandsData\"\331\004\n\017NetworkCom"
    "mands\032\010\n\006Events\032\270\001\n\010Commands\022T\n\034command_"
    "node_to_node_request\030\001 \001(\0132..schema.impr"
    "obable.graphtier.NodeToNodeRequest\022V\n\035co"
    "mmand_node_to_node_response\030\002 \001(\0132/.sche"
    "ma.improbable.graphtier.NodeToNodeRespon"
    "se2n\n\023component_extension\022\036.schema.impro"
    "bable.EntityState\030\301> \001(\01320.schema.improb"
    "able.graphtier.NetworkCommandsData2m\n\017ev"
    "ent_extension\022\036.schema.improbable.Entity"
    "Event\030\301> \001(\01323.schema.improbable.graphti"
    "er.NetworkCommands.Events2s\n\021command_ext"
    "ension\022 .schema.improbable.EntityCommand"
    "\030\301> \001(\01325.schema.improbable.graphtier.Ne"
    "tworkCommands.Commands:-\302\363\030)\n$improbable"
    ".graphtier.NetworkCommands\020\301>B\033B\031Network"
    "CommandsOuterClass", 978);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/graphtier/NetworkCommands.proto", &protobuf_RegisterTypes);
  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::schema::improbable::graphtier::protobuf_AddDesc_improbable_2fgraphtier_2fGraphTierTypes_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fgraphtier_2fNetworkCommands_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_improbable_2fgraphtier_2fNetworkCommands_2eproto_once_);
void protobuf_AddDesc_improbable_2fgraphtier_2fNetworkCommands_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_improbable_2fgraphtier_2fNetworkCommands_2eproto_once_,
                 &protobuf_AddDesc_improbable_2fgraphtier_2fNetworkCommands_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fgraphtier_2fNetworkCommands_2eproto {
  StaticDescriptorInitializer_improbable_2fgraphtier_2fNetworkCommands_2eproto() {
    protobuf_AddDesc_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  }
} static_descriptor_initializer_improbable_2fgraphtier_2fNetworkCommands_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeToNodeResponse::kField1PathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeToNodeResponse::NodeToNodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NodeToNodeResponse)
}

void NodeToNodeResponse::InitAsDefaultInstance() {
  field1_path_ = const_cast< ::schema::improbable::graphtier::Path*>(
      ::schema::improbable::graphtier::Path::internal_default_instance());
}

NodeToNodeResponse::NodeToNodeResponse(const NodeToNodeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NodeToNodeResponse)
}

void NodeToNodeResponse::SharedCtor() {
  _cached_size_ = 0;
  field1_path_ = NULL;
}

NodeToNodeResponse::~NodeToNodeResponse() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NodeToNodeResponse)
  SharedDtor();
}

void NodeToNodeResponse::SharedDtor() {
  if (this != &NodeToNodeResponse_default_instance_.get()) {
    delete field1_path_;
  }
}

void NodeToNodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeToNodeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeToNodeResponse_descriptor_;
}

const NodeToNodeResponse& NodeToNodeResponse::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeToNodeResponse> NodeToNodeResponse_default_instance_;

NodeToNodeResponse* NodeToNodeResponse::New(::google::protobuf::Arena* arena) const {
  NodeToNodeResponse* n = new NodeToNodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeToNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NodeToNodeResponse)
  if (has_field1_path()) {
    if (field1_path_ != NULL) field1_path_->::schema::improbable::graphtier::Path::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeToNodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NodeToNodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .schema.improbable.graphtier.Path field1_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field1_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NodeToNodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NodeToNodeResponse)
  return false;
#undef DO_
}

void NodeToNodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NodeToNodeResponse)
  // optional .schema.improbable.graphtier.Path field1_path = 1;
  if (has_field1_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field1_path_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NodeToNodeResponse)
}

::google::protobuf::uint8* NodeToNodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NodeToNodeResponse)
  // optional .schema.improbable.graphtier.Path field1_path = 1;
  if (has_field1_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field1_path_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NodeToNodeResponse)
  return target;
}

size_t NodeToNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NodeToNodeResponse)
  size_t total_size = 0;

  // optional .schema.improbable.graphtier.Path field1_path = 1;
  if (has_field1_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field1_path_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeToNodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NodeToNodeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeToNodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeToNodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NodeToNodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NodeToNodeResponse)
    UnsafeMergeFrom(*source);
  }
}

void NodeToNodeResponse::MergeFrom(const NodeToNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NodeToNodeResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeToNodeResponse::UnsafeMergeFrom(const NodeToNodeResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_path()) {
      mutable_field1_path()->::schema::improbable::graphtier::Path::MergeFrom(from.field1_path());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NodeToNodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NodeToNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeToNodeResponse::CopyFrom(const NodeToNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NodeToNodeResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeToNodeResponse::IsInitialized() const {

  return true;
}

void NodeToNodeResponse::Swap(NodeToNodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeToNodeResponse::InternalSwap(NodeToNodeResponse* other) {
  std::swap(field1_path_, other->field1_path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeToNodeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeToNodeResponse_descriptor_;
  metadata.reflection = NodeToNodeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeToNodeResponse

// optional .schema.improbable.graphtier.Path field1_path = 1;
bool NodeToNodeResponse::has_field1_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeToNodeResponse::set_has_field1_path() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeToNodeResponse::clear_has_field1_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeToNodeResponse::clear_field1_path() {
  if (field1_path_ != NULL) field1_path_->::schema::improbable::graphtier::Path::Clear();
  clear_has_field1_path();
}
const ::schema::improbable::graphtier::Path& NodeToNodeResponse::field1_path() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NodeToNodeResponse.field1_path)
  return field1_path_ != NULL ? *field1_path_
                         : *::schema::improbable::graphtier::Path::internal_default_instance();
}
::schema::improbable::graphtier::Path* NodeToNodeResponse::mutable_field1_path() {
  set_has_field1_path();
  if (field1_path_ == NULL) {
    field1_path_ = new ::schema::improbable::graphtier::Path;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.NodeToNodeResponse.field1_path)
  return field1_path_;
}
::schema::improbable::graphtier::Path* NodeToNodeResponse::release_field1_path() {
  // @@protoc_insertion_point(field_release:schema.improbable.graphtier.NodeToNodeResponse.field1_path)
  clear_has_field1_path();
  ::schema::improbable::graphtier::Path* temp = field1_path_;
  field1_path_ = NULL;
  return temp;
}
void NodeToNodeResponse::set_allocated_field1_path(::schema::improbable::graphtier::Path* field1_path) {
  delete field1_path_;
  field1_path_ = field1_path;
  if (field1_path) {
    set_has_field1_path();
  } else {
    clear_has_field1_path();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.graphtier.NodeToNodeResponse.field1_path)
}

inline const NodeToNodeResponse* NodeToNodeResponse::internal_default_instance() {
  return &NodeToNodeResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeToNodeRequest::kField1FromFieldNumber;
const int NodeToNodeRequest::kField2ToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeToNodeRequest::NodeToNodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NodeToNodeRequest)
}

void NodeToNodeRequest::InitAsDefaultInstance() {
}

NodeToNodeRequest::NodeToNodeRequest(const NodeToNodeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NodeToNodeRequest)
}

void NodeToNodeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&field1_from_, 0, reinterpret_cast<char*>(&field2_to_) -
    reinterpret_cast<char*>(&field1_from_) + sizeof(field2_to_));
}

NodeToNodeRequest::~NodeToNodeRequest() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NodeToNodeRequest)
  SharedDtor();
}

void NodeToNodeRequest::SharedDtor() {
}

void NodeToNodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeToNodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeToNodeRequest_descriptor_;
}

const NodeToNodeRequest& NodeToNodeRequest::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeToNodeRequest> NodeToNodeRequest_default_instance_;

NodeToNodeRequest* NodeToNodeRequest::New(::google::protobuf::Arena* arena) const {
  NodeToNodeRequest* n = new NodeToNodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeToNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NodeToNodeRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NodeToNodeRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NodeToNodeRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(field1_from_, field2_to_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeToNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NodeToNodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 field1_from = 1;
      case 1: {
        if (tag == 8) {
          set_has_field1_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field1_from_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_field2_to;
        break;
      }

      // optional int64 field2_to = 2;
      case 2: {
        if (tag == 16) {
         parse_field2_to:
          set_has_field2_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field2_to_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NodeToNodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NodeToNodeRequest)
  return false;
#undef DO_
}

void NodeToNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NodeToNodeRequest)
  // optional int64 field1_from = 1;
  if (has_field1_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field1_from(), output);
  }

  // optional int64 field2_to = 2;
  if (has_field2_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->field2_to(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NodeToNodeRequest)
}

::google::protobuf::uint8* NodeToNodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NodeToNodeRequest)
  // optional int64 field1_from = 1;
  if (has_field1_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->field1_from(), target);
  }

  // optional int64 field2_to = 2;
  if (has_field2_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->field2_to(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NodeToNodeRequest)
  return target;
}

size_t NodeToNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NodeToNodeRequest)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 field1_from = 1;
    if (has_field1_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field1_from());
    }

    // optional int64 field2_to = 2;
    if (has_field2_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field2_to());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeToNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NodeToNodeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeToNodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeToNodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NodeToNodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NodeToNodeRequest)
    UnsafeMergeFrom(*source);
  }
}

void NodeToNodeRequest::MergeFrom(const NodeToNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NodeToNodeRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeToNodeRequest::UnsafeMergeFrom(const NodeToNodeRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_from()) {
      set_field1_from(from.field1_from());
    }
    if (from.has_field2_to()) {
      set_field2_to(from.field2_to());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NodeToNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NodeToNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeToNodeRequest::CopyFrom(const NodeToNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NodeToNodeRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeToNodeRequest::IsInitialized() const {

  return true;
}

void NodeToNodeRequest::Swap(NodeToNodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeToNodeRequest::InternalSwap(NodeToNodeRequest* other) {
  std::swap(field1_from_, other->field1_from_);
  std::swap(field2_to_, other->field2_to_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeToNodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeToNodeRequest_descriptor_;
  metadata.reflection = NodeToNodeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeToNodeRequest

// optional int64 field1_from = 1;
bool NodeToNodeRequest::has_field1_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeToNodeRequest::set_has_field1_from() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeToNodeRequest::clear_has_field1_from() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeToNodeRequest::clear_field1_from() {
  field1_from_ = GOOGLE_LONGLONG(0);
  clear_has_field1_from();
}
::google::protobuf::int64 NodeToNodeRequest::field1_from() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NodeToNodeRequest.field1_from)
  return field1_from_;
}
void NodeToNodeRequest::set_field1_from(::google::protobuf::int64 value) {
  set_has_field1_from();
  field1_from_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.NodeToNodeRequest.field1_from)
}

// optional int64 field2_to = 2;
bool NodeToNodeRequest::has_field2_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeToNodeRequest::set_has_field2_to() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeToNodeRequest::clear_has_field2_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeToNodeRequest::clear_field2_to() {
  field2_to_ = GOOGLE_LONGLONG(0);
  clear_has_field2_to();
}
::google::protobuf::int64 NodeToNodeRequest::field2_to() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NodeToNodeRequest.field2_to)
  return field2_to_;
}
void NodeToNodeRequest::set_field2_to(::google::protobuf::int64 value) {
  set_has_field2_to();
  field2_to_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.graphtier.NodeToNodeRequest.field2_to)
}

inline const NodeToNodeRequest* NodeToNodeRequest::internal_default_instance() {
  return &NodeToNodeRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCommandsData::NetworkCommandsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkCommandsData)
}

void NetworkCommandsData::InitAsDefaultInstance() {
}

NetworkCommandsData::NetworkCommandsData(const NetworkCommandsData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkCommandsData)
}

void NetworkCommandsData::SharedCtor() {
  _cached_size_ = 0;
}

NetworkCommandsData::~NetworkCommandsData() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkCommandsData)
  SharedDtor();
}

void NetworkCommandsData::SharedDtor() {
}

void NetworkCommandsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkCommandsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkCommandsData_descriptor_;
}

const NetworkCommandsData& NetworkCommandsData::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkCommandsData> NetworkCommandsData_default_instance_;

NetworkCommandsData* NetworkCommandsData::New(::google::protobuf::Arena* arena) const {
  NetworkCommandsData* n = new NetworkCommandsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCommandsData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkCommandsData)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkCommandsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkCommandsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkCommandsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkCommandsData)
  return false;
#undef DO_
}

void NetworkCommandsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkCommandsData)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkCommandsData)
}

::google::protobuf::uint8* NetworkCommandsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkCommandsData)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkCommandsData)
  return target;
}

size_t NetworkCommandsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkCommandsData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCommandsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkCommandsData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkCommandsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkCommandsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkCommandsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkCommandsData)
    UnsafeMergeFrom(*source);
  }
}

void NetworkCommandsData::MergeFrom(const NetworkCommandsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkCommandsData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkCommandsData::UnsafeMergeFrom(const NetworkCommandsData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkCommandsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkCommandsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkCommandsData::CopyFrom(const NetworkCommandsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkCommandsData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkCommandsData::IsInitialized() const {

  return true;
}

void NetworkCommandsData::Swap(NetworkCommandsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCommandsData::InternalSwap(NetworkCommandsData* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkCommandsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkCommandsData_descriptor_;
  metadata.reflection = NetworkCommandsData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkCommandsData

inline const NetworkCommandsData* NetworkCommandsData::internal_default_instance() {
  return &NetworkCommandsData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCommands_Events::NetworkCommands_Events()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkCommands.Events)
}

void NetworkCommands_Events::InitAsDefaultInstance() {
}

NetworkCommands_Events::NetworkCommands_Events(const NetworkCommands_Events& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkCommands.Events)
}

void NetworkCommands_Events::SharedCtor() {
  _cached_size_ = 0;
}

NetworkCommands_Events::~NetworkCommands_Events() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkCommands.Events)
  SharedDtor();
}

void NetworkCommands_Events::SharedDtor() {
}

void NetworkCommands_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkCommands_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkCommands_Events_descriptor_;
}

const NetworkCommands_Events& NetworkCommands_Events::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkCommands_Events> NetworkCommands_Events_default_instance_;

NetworkCommands_Events* NetworkCommands_Events::New(::google::protobuf::Arena* arena) const {
  NetworkCommands_Events* n = new NetworkCommands_Events;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCommands_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkCommands.Events)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkCommands_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkCommands.Events)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkCommands.Events)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkCommands.Events)
  return false;
#undef DO_
}

void NetworkCommands_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkCommands.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkCommands.Events)
}

::google::protobuf::uint8* NetworkCommands_Events::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkCommands.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkCommands.Events)
  return target;
}

size_t NetworkCommands_Events::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkCommands.Events)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCommands_Events::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkCommands.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkCommands_Events* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkCommands_Events>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkCommands.Events)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkCommands.Events)
    UnsafeMergeFrom(*source);
  }
}

void NetworkCommands_Events::MergeFrom(const NetworkCommands_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkCommands.Events)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkCommands_Events::UnsafeMergeFrom(const NetworkCommands_Events& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkCommands_Events::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkCommands.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkCommands_Events::CopyFrom(const NetworkCommands_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkCommands.Events)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkCommands_Events::IsInitialized() const {

  return true;
}

void NetworkCommands_Events::Swap(NetworkCommands_Events* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCommands_Events::InternalSwap(NetworkCommands_Events* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkCommands_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkCommands_Events_descriptor_;
  metadata.reflection = NetworkCommands_Events_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCommands_Commands::kCommandNodeToNodeRequestFieldNumber;
const int NetworkCommands_Commands::kCommandNodeToNodeResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkCommands_Commands::NetworkCommands_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkCommands.Commands)
}

void NetworkCommands_Commands::InitAsDefaultInstance() {
  command_node_to_node_request_ = const_cast< ::schema::improbable::graphtier::NodeToNodeRequest*>(
      ::schema::improbable::graphtier::NodeToNodeRequest::internal_default_instance());
  command_node_to_node_response_ = const_cast< ::schema::improbable::graphtier::NodeToNodeResponse*>(
      ::schema::improbable::graphtier::NodeToNodeResponse::internal_default_instance());
}

NetworkCommands_Commands::NetworkCommands_Commands(const NetworkCommands_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkCommands.Commands)
}

void NetworkCommands_Commands::SharedCtor() {
  _cached_size_ = 0;
  command_node_to_node_request_ = NULL;
  command_node_to_node_response_ = NULL;
}

NetworkCommands_Commands::~NetworkCommands_Commands() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkCommands.Commands)
  SharedDtor();
}

void NetworkCommands_Commands::SharedDtor() {
  if (this != &NetworkCommands_Commands_default_instance_.get()) {
    delete command_node_to_node_request_;
    delete command_node_to_node_response_;
  }
}

void NetworkCommands_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkCommands_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkCommands_Commands_descriptor_;
}

const NetworkCommands_Commands& NetworkCommands_Commands::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkCommands_Commands> NetworkCommands_Commands_default_instance_;

NetworkCommands_Commands* NetworkCommands_Commands::New(::google::protobuf::Arena* arena) const {
  NetworkCommands_Commands* n = new NetworkCommands_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCommands_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkCommands.Commands)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_command_node_to_node_request()) {
      if (command_node_to_node_request_ != NULL) command_node_to_node_request_->::schema::improbable::graphtier::NodeToNodeRequest::Clear();
    }
    if (has_command_node_to_node_response()) {
      if (command_node_to_node_response_ != NULL) command_node_to_node_response_->::schema::improbable::graphtier::NodeToNodeResponse::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkCommands_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkCommands.Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .schema.improbable.graphtier.NodeToNodeRequest command_node_to_node_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_node_to_node_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_command_node_to_node_response;
        break;
      }

      // optional .schema.improbable.graphtier.NodeToNodeResponse command_node_to_node_response = 2;
      case 2: {
        if (tag == 18) {
         parse_command_node_to_node_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_node_to_node_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkCommands.Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkCommands.Commands)
  return false;
#undef DO_
}

void NetworkCommands_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkCommands.Commands)
  // optional .schema.improbable.graphtier.NodeToNodeRequest command_node_to_node_request = 1;
  if (has_command_node_to_node_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->command_node_to_node_request_, output);
  }

  // optional .schema.improbable.graphtier.NodeToNodeResponse command_node_to_node_response = 2;
  if (has_command_node_to_node_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->command_node_to_node_response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkCommands.Commands)
}

::google::protobuf::uint8* NetworkCommands_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkCommands.Commands)
  // optional .schema.improbable.graphtier.NodeToNodeRequest command_node_to_node_request = 1;
  if (has_command_node_to_node_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->command_node_to_node_request_, false, target);
  }

  // optional .schema.improbable.graphtier.NodeToNodeResponse command_node_to_node_response = 2;
  if (has_command_node_to_node_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->command_node_to_node_response_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkCommands.Commands)
  return target;
}

size_t NetworkCommands_Commands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkCommands.Commands)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .schema.improbable.graphtier.NodeToNodeRequest command_node_to_node_request = 1;
    if (has_command_node_to_node_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->command_node_to_node_request_);
    }

    // optional .schema.improbable.graphtier.NodeToNodeResponse command_node_to_node_response = 2;
    if (has_command_node_to_node_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->command_node_to_node_response_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCommands_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkCommands.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkCommands_Commands* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkCommands_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkCommands.Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkCommands.Commands)
    UnsafeMergeFrom(*source);
  }
}

void NetworkCommands_Commands::MergeFrom(const NetworkCommands_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkCommands.Commands)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkCommands_Commands::UnsafeMergeFrom(const NetworkCommands_Commands& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command_node_to_node_request()) {
      mutable_command_node_to_node_request()->::schema::improbable::graphtier::NodeToNodeRequest::MergeFrom(from.command_node_to_node_request());
    }
    if (from.has_command_node_to_node_response()) {
      mutable_command_node_to_node_response()->::schema::improbable::graphtier::NodeToNodeResponse::MergeFrom(from.command_node_to_node_response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkCommands_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkCommands.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkCommands_Commands::CopyFrom(const NetworkCommands_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkCommands.Commands)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkCommands_Commands::IsInitialized() const {

  return true;
}

void NetworkCommands_Commands::Swap(NetworkCommands_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCommands_Commands::InternalSwap(NetworkCommands_Commands* other) {
  std::swap(command_node_to_node_request_, other->command_node_to_node_request_);
  std::swap(command_node_to_node_response_, other->command_node_to_node_response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkCommands_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkCommands_Commands_descriptor_;
  metadata.reflection = NetworkCommands_Commands_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCommands::kComponentExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NetworkCommandsData >, 11, false >
  NetworkCommands::component_extension(kComponentExtensionFieldNumber, *::schema::improbable::graphtier::NetworkCommandsData::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCommands::kEventExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NetworkCommands_Events >, 11, false >
  NetworkCommands::event_extension(kEventExtensionFieldNumber, *::schema::improbable::graphtier::NetworkCommands_Events::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkCommands::kCommandExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::graphtier::NetworkCommands_Commands >, 11, false >
  NetworkCommands::command_extension(kCommandExtensionFieldNumber, *::schema::improbable::graphtier::NetworkCommands_Commands::internal_default_instance());
NetworkCommands::NetworkCommands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.graphtier.NetworkCommands)
}

void NetworkCommands::InitAsDefaultInstance() {
}

NetworkCommands::NetworkCommands(const NetworkCommands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.graphtier.NetworkCommands)
}

void NetworkCommands::SharedCtor() {
  _cached_size_ = 0;
}

NetworkCommands::~NetworkCommands() {
  // @@protoc_insertion_point(destructor:schema.improbable.graphtier.NetworkCommands)
  SharedDtor();
}

void NetworkCommands::SharedDtor() {
}

void NetworkCommands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkCommands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkCommands_descriptor_;
}

const NetworkCommands& NetworkCommands::default_instance() {
  protobuf_InitDefaults_improbable_2fgraphtier_2fNetworkCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetworkCommands> NetworkCommands_default_instance_;

NetworkCommands* NetworkCommands::New(::google::protobuf::Arena* arena) const {
  NetworkCommands* n = new NetworkCommands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkCommands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.graphtier.NetworkCommands)
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkCommands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.graphtier.NetworkCommands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.graphtier.NetworkCommands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.graphtier.NetworkCommands)
  return false;
#undef DO_
}

void NetworkCommands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.graphtier.NetworkCommands)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.graphtier.NetworkCommands)
}

::google::protobuf::uint8* NetworkCommands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.graphtier.NetworkCommands)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.graphtier.NetworkCommands)
  return target;
}

size_t NetworkCommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.graphtier.NetworkCommands)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkCommands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.graphtier.NetworkCommands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkCommands* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkCommands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.graphtier.NetworkCommands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.graphtier.NetworkCommands)
    UnsafeMergeFrom(*source);
  }
}

void NetworkCommands::MergeFrom(const NetworkCommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.graphtier.NetworkCommands)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetworkCommands::UnsafeMergeFrom(const NetworkCommands& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NetworkCommands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.graphtier.NetworkCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkCommands::CopyFrom(const NetworkCommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.graphtier.NetworkCommands)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetworkCommands::IsInitialized() const {

  return true;
}

void NetworkCommands::Swap(NetworkCommands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkCommands::InternalSwap(NetworkCommands* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkCommands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkCommands_descriptor_;
  metadata.reflection = NetworkCommands_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkCommands_Events

inline const NetworkCommands_Events* NetworkCommands_Events::internal_default_instance() {
  return &NetworkCommands_Events_default_instance_.get();
}
// -------------------------------------------------------------------

// NetworkCommands_Commands

// optional .schema.improbable.graphtier.NodeToNodeRequest command_node_to_node_request = 1;
bool NetworkCommands_Commands::has_command_node_to_node_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkCommands_Commands::set_has_command_node_to_node_request() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkCommands_Commands::clear_has_command_node_to_node_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkCommands_Commands::clear_command_node_to_node_request() {
  if (command_node_to_node_request_ != NULL) command_node_to_node_request_->::schema::improbable::graphtier::NodeToNodeRequest::Clear();
  clear_has_command_node_to_node_request();
}
const ::schema::improbable::graphtier::NodeToNodeRequest& NetworkCommands_Commands::command_node_to_node_request() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NetworkCommands.Commands.command_node_to_node_request)
  return command_node_to_node_request_ != NULL ? *command_node_to_node_request_
                         : *::schema::improbable::graphtier::NodeToNodeRequest::internal_default_instance();
}
::schema::improbable::graphtier::NodeToNodeRequest* NetworkCommands_Commands::mutable_command_node_to_node_request() {
  set_has_command_node_to_node_request();
  if (command_node_to_node_request_ == NULL) {
    command_node_to_node_request_ = new ::schema::improbable::graphtier::NodeToNodeRequest;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.NetworkCommands.Commands.command_node_to_node_request)
  return command_node_to_node_request_;
}
::schema::improbable::graphtier::NodeToNodeRequest* NetworkCommands_Commands::release_command_node_to_node_request() {
  // @@protoc_insertion_point(field_release:schema.improbable.graphtier.NetworkCommands.Commands.command_node_to_node_request)
  clear_has_command_node_to_node_request();
  ::schema::improbable::graphtier::NodeToNodeRequest* temp = command_node_to_node_request_;
  command_node_to_node_request_ = NULL;
  return temp;
}
void NetworkCommands_Commands::set_allocated_command_node_to_node_request(::schema::improbable::graphtier::NodeToNodeRequest* command_node_to_node_request) {
  delete command_node_to_node_request_;
  command_node_to_node_request_ = command_node_to_node_request;
  if (command_node_to_node_request) {
    set_has_command_node_to_node_request();
  } else {
    clear_has_command_node_to_node_request();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.graphtier.NetworkCommands.Commands.command_node_to_node_request)
}

// optional .schema.improbable.graphtier.NodeToNodeResponse command_node_to_node_response = 2;
bool NetworkCommands_Commands::has_command_node_to_node_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkCommands_Commands::set_has_command_node_to_node_response() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkCommands_Commands::clear_has_command_node_to_node_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkCommands_Commands::clear_command_node_to_node_response() {
  if (command_node_to_node_response_ != NULL) command_node_to_node_response_->::schema::improbable::graphtier::NodeToNodeResponse::Clear();
  clear_has_command_node_to_node_response();
}
const ::schema::improbable::graphtier::NodeToNodeResponse& NetworkCommands_Commands::command_node_to_node_response() const {
  // @@protoc_insertion_point(field_get:schema.improbable.graphtier.NetworkCommands.Commands.command_node_to_node_response)
  return command_node_to_node_response_ != NULL ? *command_node_to_node_response_
                         : *::schema::improbable::graphtier::NodeToNodeResponse::internal_default_instance();
}
::schema::improbable::graphtier::NodeToNodeResponse* NetworkCommands_Commands::mutable_command_node_to_node_response() {
  set_has_command_node_to_node_response();
  if (command_node_to_node_response_ == NULL) {
    command_node_to_node_response_ = new ::schema::improbable::graphtier::NodeToNodeResponse;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.graphtier.NetworkCommands.Commands.command_node_to_node_response)
  return command_node_to_node_response_;
}
::schema::improbable::graphtier::NodeToNodeResponse* NetworkCommands_Commands::release_command_node_to_node_response() {
  // @@protoc_insertion_point(field_release:schema.improbable.graphtier.NetworkCommands.Commands.command_node_to_node_response)
  clear_has_command_node_to_node_response();
  ::schema::improbable::graphtier::NodeToNodeResponse* temp = command_node_to_node_response_;
  command_node_to_node_response_ = NULL;
  return temp;
}
void NetworkCommands_Commands::set_allocated_command_node_to_node_response(::schema::improbable::graphtier::NodeToNodeResponse* command_node_to_node_response) {
  delete command_node_to_node_response_;
  command_node_to_node_response_ = command_node_to_node_response;
  if (command_node_to_node_response) {
    set_has_command_node_to_node_response();
  } else {
    clear_has_command_node_to_node_response();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.graphtier.NetworkCommands.Commands.command_node_to_node_response)
}

inline const NetworkCommands_Commands* NetworkCommands_Commands::internal_default_instance() {
  return &NetworkCommands_Commands_default_instance_.get();
}
// -------------------------------------------------------------------

// NetworkCommands

inline const NetworkCommands* NetworkCommands::internal_default_instance() {
  return &NetworkCommands_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace graphtier
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
