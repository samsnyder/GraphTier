// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/standard_library.schema
#ifndef SPATIALOS_SCHEMA_improbable_standard_library_schema_15375418286384799311_INCLUDED
#define SPATIALOS_SCHEMA_improbable_standard_library_schema_15375418286384799311_INCLUDED
#include <improbable/collections.h>
#include <improbable/math/coordinates.h>
#include <improbable/math/vector3d.h>
#include <improbable/math/vector3f.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

// Schema forward declarations.
//----------------------------------------------------------------

namespace schema {
namespace improbable {

class WorkerAttribute;
class WorkerAttributeSet;
class WorkerRequirementSet;
class ComponentAcl;
class EntityAclData;

}  // ::improbable
}  // ::schema

namespace improbable {

// Forward declarations.
//----------------------------------------------------------------

class ComponentAcl;
class EntityAclData;
class WorkerAttribute;
class WorkerAttributeSet;
class WorkerRequirementSet;

namespace detail {
const ::worker::detail::ClientComponentVtable& Vtable_EntityAcl();
struct GenericCommandObject_EntityAcl {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class ComponentAcl {
public:
  // Main constructor.
  ComponentAcl(const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& write);

  // Copyable and moveable.
  ComponentAcl(ComponentAcl&&) = default;
  ComponentAcl(const ComponentAcl&) = default;
  ComponentAcl& operator=(ComponentAcl&&) = default;
  ComponentAcl& operator=(const ComponentAcl&) = default;
  ~ComponentAcl() = default;

  bool operator==(const ComponentAcl&) const;
  bool operator!=(const ComponentAcl&) const;

  // Field write = 1.
  const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& write() const;
  ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& write();
  ComponentAcl& set_write(const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >&);

private:
  ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet > _write;
};

class EntityAclData {
public:
  // Main constructor.
  EntityAclData(
      const ::worker::Option< ::improbable::WorkerRequirementSet >& read,
      const ::worker::Option< ::improbable::ComponentAcl >& component_acl);

  // Copyable and moveable.
  EntityAclData(EntityAclData&&) = default;
  EntityAclData(const EntityAclData&) = default;
  EntityAclData& operator=(EntityAclData&&) = default;
  EntityAclData& operator=(const EntityAclData&) = default;
  ~EntityAclData() = default;

  bool operator==(const EntityAclData&) const;
  bool operator!=(const EntityAclData&) const;

  // Field read = 1.
  const ::worker::Option< ::improbable::WorkerRequirementSet >& read() const;
  ::worker::Option< ::improbable::WorkerRequirementSet >& read();
  EntityAclData& set_read(const ::worker::Option< ::improbable::WorkerRequirementSet >&);

  // Field component_acl = 2.
  const ::worker::Option< ::improbable::ComponentAcl >& component_acl() const;
  ::worker::Option< ::improbable::ComponentAcl >& component_acl();
  EntityAclData& set_component_acl(const ::worker::Option< ::improbable::ComponentAcl >&);

private:
  ::worker::Option< ::improbable::WorkerRequirementSet > _read;
  ::worker::Option< ::improbable::ComponentAcl > _component_acl;
};

class WorkerAttribute {
public:
  // Main constructor.
  WorkerAttribute(const ::worker::Option< std::string >& name);

  // Copyable and moveable.
  WorkerAttribute(WorkerAttribute&&) = default;
  WorkerAttribute(const WorkerAttribute&) = default;
  WorkerAttribute& operator=(WorkerAttribute&&) = default;
  WorkerAttribute& operator=(const WorkerAttribute&) = default;
  ~WorkerAttribute() = default;

  bool operator==(const WorkerAttribute&) const;
  bool operator!=(const WorkerAttribute&) const;

  // Field name = 1.
  const ::worker::Option< std::string >& name() const;
  ::worker::Option< std::string >& name();
  WorkerAttribute& set_name(const ::worker::Option< std::string >&);

private:
  ::worker::Option< std::string > _name;
};

class WorkerAttributeSet {
public:
  // Main constructor.
  WorkerAttributeSet(const ::worker::List< ::improbable::WorkerAttribute >& attribute);

  // Copyable and moveable.
  WorkerAttributeSet(WorkerAttributeSet&&) = default;
  WorkerAttributeSet(const WorkerAttributeSet&) = default;
  WorkerAttributeSet& operator=(WorkerAttributeSet&&) = default;
  WorkerAttributeSet& operator=(const WorkerAttributeSet&) = default;
  ~WorkerAttributeSet() = default;

  bool operator==(const WorkerAttributeSet&) const;
  bool operator!=(const WorkerAttributeSet&) const;

  // Field attribute = 1.
  const ::worker::List< ::improbable::WorkerAttribute >& attribute() const;
  ::worker::List< ::improbable::WorkerAttribute >& attribute();
  WorkerAttributeSet& set_attribute(const ::worker::List< ::improbable::WorkerAttribute >&);

private:
  ::worker::List< ::improbable::WorkerAttribute > _attribute;
};

class WorkerRequirementSet {
public:
  // Main constructor.
  WorkerRequirementSet(const ::worker::List< ::improbable::WorkerAttributeSet >& attribute_set);

  // Copyable and moveable.
  WorkerRequirementSet(WorkerRequirementSet&&) = default;
  WorkerRequirementSet(const WorkerRequirementSet&) = default;
  WorkerRequirementSet& operator=(WorkerRequirementSet&&) = default;
  WorkerRequirementSet& operator=(const WorkerRequirementSet&) = default;
  ~WorkerRequirementSet() = default;

  bool operator==(const WorkerRequirementSet&) const;
  bool operator!=(const WorkerRequirementSet&) const;

  // Field attribute_set = 1.
  const ::worker::List< ::improbable::WorkerAttributeSet >& attribute_set() const;
  ::worker::List< ::improbable::WorkerAttributeSet >& attribute_set();
  WorkerRequirementSet& set_attribute_set(const ::worker::List< ::improbable::WorkerAttributeSet >&);

private:
  ::worker::List< ::improbable::WorkerAttributeSet > _attribute_set;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::EntityAcl;
 *
 *   EntityAcl::Update update;
 *   connection.SendComponentUpdate< EntityAcl >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< EntityAcl >(
 *       [&](const worker::ComponentUpdateOp< EntityAcl >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         EntityAcl::Update update = op.GetUpdate();
 *       });
 *
 *   EntityAcl::Data data = entity.Get< EntityAcl >();
 */
struct EntityAcl : ::worker::detail::ComponentMetaclassBase<
    EntityAcl, detail::Vtable_EntityAcl> {
  static constexpr const ::worker::ComponentId ComponentId = 50;
  using Data = ::improbable::EntityAclData;
  using GenericCommandObject = detail::GenericCommandObject_EntityAcl;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::EntityAclData object. */
    static Update FromInitialData(const ::improbable::EntityAclData& data);

    /**
     * Converts to a ::improbable::EntityAclData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::EntityAclData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::EntityAclData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::EntityAclData&) const;

    // Field read = 1.
    const ::worker::Option< ::worker::Option< ::improbable::WorkerRequirementSet > >& read() const;
    ::worker::Option< ::worker::Option< ::improbable::WorkerRequirementSet > >& read();
    Update& set_read(const ::worker::Option< ::improbable::WorkerRequirementSet >&);

    // Field component_acl = 2.
    const ::worker::Option< ::worker::Option< ::improbable::ComponentAcl > >& component_acl() const;
    ::worker::Option< ::worker::Option< ::improbable::ComponentAcl > >& component_acl();
    Update& set_component_acl(const ::worker::Option< ::improbable::ComponentAcl >&);

  private:
    ::worker::Option< ::worker::Option< ::improbable::WorkerRequirementSet > > _read;
    ::worker::Option< ::worker::Option< ::improbable::ComponentAcl > > _component_acl;
  };

};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Serialize_ComponentAcl(
    const ::improbable::ComponentAcl&,
    ::schema::improbable::ComponentAcl&);

::improbable::ComponentAcl Deserialize_ComponentAcl(
    const ::schema::improbable::ComponentAcl&);

void Serialize_EntityAclData(
    const ::improbable::EntityAclData&,
    ::schema::improbable::EntityAclData&);

::improbable::EntityAclData Deserialize_EntityAclData(
    const ::schema::improbable::EntityAclData&);

void Serialize_WorkerAttribute(
    const ::improbable::WorkerAttribute&,
    ::schema::improbable::WorkerAttribute&);

::improbable::WorkerAttribute Deserialize_WorkerAttribute(
    const ::schema::improbable::WorkerAttribute&);

void Serialize_WorkerAttributeSet(
    const ::improbable::WorkerAttributeSet&,
    ::schema::improbable::WorkerAttributeSet&);

::improbable::WorkerAttributeSet Deserialize_WorkerAttributeSet(
    const ::schema::improbable::WorkerAttributeSet&);

void Serialize_WorkerRequirementSet(
    const ::improbable::WorkerRequirementSet&,
    ::schema::improbable::WorkerRequirementSet&);

::improbable::WorkerRequirementSet Deserialize_WorkerRequirementSet(
    const ::schema::improbable::WorkerRequirementSet&);

}  // ::detail
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_standard_library_schema_15375418286384799311_INCLUDED
